export default [
    "{ filename: \"src/MeAudioPlayer.cpp\", code: \"/**\\r\\n * \\\\par Copyright (C), 2012-2017, MakeBlock\\r\\n * \\\\class   MeAudioPlayer\\r\\n * \\\\brief   Driver for MeAudioPlayer module.\\r\\n * @file    MeAudioPlayer.h\\r\\n * @author  MakeBlock\\r\\n * @version V1.0.0\\r\\n * @date    2017/11/17\\r\\n * @brief   Header for MeAudioPlayer.cpp module.\\r\\n *\\r\\n * \\\\par Copyright\\r\\n * This software is Copyright (C), 2012-2016, MakeBlock. Use is subject to license \\\\n\\r\\n * conditions. The main licensing options available are GPL V2 or Commercial: \\\\n\\r\\n *\\r\\n * \\\\par Open Source Licensing GPL V2\\r\\n * This is the appropriate option if you want to share the source code of your \\\\n\\r\\n * application with everyone you distribute it to, and you also want to give them \\\\n\\r\\n * the right to share who uses it. If you wish to use this software under Open \\\\n\\r\\n * Source Licensing, you must contribute all your source code to the open source \\\\n\\r\\n * community in accordance with the GPL Version 2 when your application is \\\\n\\r\\n * distributed. See http://www.gnu.org/copyleft/gpl.html\\r\\n *\\r\\n * \\\\par Description\\r\\n * This file is a drive for MeAudioPlayer module, It supports MeAudioPlayer V1.0 device provided\\r\\n * by MakeBlock.\\r\\n *\\r\\n * \\\\par Method List:\\r\\n *\\r\\n *   void MeAudioPlayer::PlayerInit(void)\\r\\n *   void MeAudioPlayer::playMusicFileIndex(uint16_t music_index);\\r\\n *   void MeAudioPlayer::playMusicFileName(String str);  \\r\\n *   void MeAudioPlayer::pauseMusic(void);\\r\\n *   void MeAudioPlayer::stopMusic(void);\\r\\n *   void MeAudioPlayer::playNextMusic(void);\\r\\n *   void MeAudioPlayer::playPrevMusic(void);\\r\\n *   void MeAudioPlayer::setMusicVolume(uint8_t vol);\\r\\n *   void MeAudioPlayer::setMusicPlayMode(uint8_t mode);\\r\\n *   void MeAudioPlayer::startRecordingFileName(String str);\\r\\n *   void MeAudioPlayer::stopRecording(void);\\r\\n *   void MeAudioPlayer::volumeUp(void);\\r\\n *   void MeAudioPlayer::volumeDown(void);\\r\\n *   void MeAudioPlayer::deleteFileName(String str);\\r\\n *   void MeAudioPlayer::deleteAllMusicFile(void);\\r\\n * \\r\\n * \\\\par History:\\r\\n * <pre>\\r\\n * \\\"<Author>\\\"         \\\"<Time>\\\"        \\\"<Version>\\\"        \\\"<Descr>\\\"\\r\\n *  Lanweiting      2017/11/15          1.0.0         Build the files.\\r\\n * </pre>\\r\\n *\\r\\n * @example MeAudioPlayerTest.ino\\r\\n */\\r\\n\\r\\n#include \\\"MeAudioPlayer.h\\\"\\r\\n\\r\\n/* Private functions ---------------------------------------------------------*/\\r\\n#ifdef ME_PORT_DEFINED\\r\\n/**\\r\\n * Alternate Constructor which can call your own function to map the MeAudioPlayer to arduino port,\\r\\n * no pins are used or initialized here\\r\\n */\\r\\nMeAudioPlayer::MeAudioPlayer(void) : MePort(0)\\r\\n{\\r\\n  Device_Address = AUDIOPLAYER_DEFAULT_ADDRESS;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Alternate Constructor which can call your own function to map the MeAudioPlayer to arduino port,\\r\\n * \\\\param[in]\\r\\n *   port - RJ25 port number\\r\\n */\\r\\nMeAudioPlayer::MeAudioPlayer(uint8_t port) : MePort(port)\\r\\n{\\r\\n  Device_Address = AUDIOPLAYER_DEFAULT_ADDRESS;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Alternate Constructor which can call your own function to map the MeAudioPlayer to arduino port\\r\\n * and change the i2c device address\\r\\n * \\\\param[in]\\r\\n *   port - RJ25 port number\\r\\n * \\\\param[in]\\r\\n *   address - the i2c address you want to set\\r\\n */\\r\\nMeAudioPlayer::MeAudioPlayer(uint8_t port, uint8_t address) : MePort(port)\\r\\n{\\r\\n  Device_Address = address;\\r\\n}\\r\\n#else  // ME_PORT_DEFINED\\r\\n/**\\r\\n * Alternate Constructor which can call your own function to map the _AD0 and _INT to arduino port,\\r\\n * \\\\param[in]\\r\\n *   _AD0 - arduino gpio number\\r\\n * \\\\param[in]\\r\\n *   _INT - arduino gpio number\\r\\n */\\r\\nMeAudioPlayer::MeAudioPlayer(uint8_t _AD0, uint8_t _INT)\\r\\n{\\r\\n  Device_Address = AUDIOPLAYER_DEFAULT_ADDRESS;\\r\\n  _AD0 = _AD0;\\r\\n  _INT = _INT;\\r\\n}\\r\\n\\r\\n#endif /* ME_PORT_DEFINED */\\r\\n\\r\\n\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    sendCmd\\r\\n * \\\\par Description\\r\\n *    send the datas to serial com.\\r\\n * \\\\param[in]\\r\\n *    data pionter,len\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid MeAudioPlayer::sendCmd(uint8_t *sendcmd, uint8_t len)\\r\\n{\\r\\n  int8_t i;\\r\\n  \\r\\n/*  if(millis() - nextCmd_time > MAX_TIMEOUT)  \\r\\n  {\\r\\n    Wire.beginTransmission(Device_Address);\\r\\n    for(i = 0; i < len ; i++)\\r\\n    {\\r\\n      Wire.write(sendcmd[i]);\\r\\n    }\\r\\n    Wire.endTransmission(true);\\r\\n    nextCmd_time = millis();\\r\\n  }*/\\r\\n  \\r\\n  Wire.beginTransmission(Device_Address);\\r\\n  for(i = 0; i < len ; i++)\\r\\n  {\\r\\n    Wire.write(sendcmd[i]);\\r\\n  }\\r\\n  Wire.endTransmission(true);\\r\\n  \\r\\n}\\r\\n\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    checkSum\\r\\n * \\\\par Description\\r\\n *    return check And result\\r\\n * \\\\param[in]\\r\\n *    data pionter,len\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nuint8_t MeAudioPlayer::checkSum(uint8_t* buffer, uint8_t len)\\r\\n{\\r\\n  uint8_t result = 0x00;\\r\\n  for (int i = 1; i < len; i++)\\r\\n  {\\r\\n  \\tresult += *(buffer+i);\\r\\n  }\\r\\n  return result;\\r\\n}\\r\\n\\r\\n/**\\r\\n * \\\\par Function\\r\\n *   PlayerInit\\r\\n * \\\\par Description\\r\\n *   Initialize the MeAudioPlayer.\\r\\n * \\\\param[in]\\r\\n *   None\\r\\n * \\\\par Output\\r\\n *   None\\r\\n * \\\\return\\r\\n *   None\\r\\n * \\\\par Others\\r\\n *   None\\r\\n */\\r\\nvoid MeAudioPlayer::PlayerInit(void)\\r\\n{\\r\\n  // readbuffer[15] = {0};\\r\\n  writebuffer[27] =  {0};\\r\\n  Wire.begin();\\r\\n  delay(3000);\\r\\n  prevCmd_time = millis();\\r\\n}\\r\\n/************************************************************\\r\\n\\r\\n\\t\\t\\tPlaying Music Control Function\\r\\n\\r\\n*************************************************************/\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    playMusicFileIndex\\r\\n * \\\\par Description\\r\\n *    play a mucsic File with it index on root\\r\\n * \\\\param[in]\\r\\n *    uint16_t index\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid MeAudioPlayer::playMusicFileIndex(uint16_t music_index)\\r\\n{\\r\\n  uint8_t len = 0x05;\\r\\n  nextCmd_time = millis();\\r\\n  if (nextCmd_time - prevCmd_time < MAX_TIMEOUT)\\r\\n  {\\r\\n    delay( MAX_TIMEOUT - (nextCmd_time - prevCmd_time));\\r\\n  }\\r\\n  if (music_index > 0xFFFF)\\r\\n  {\\r\\n    music_index = 0xFFFF;\\r\\n  }\\r\\n  writebuffer[0] = MECODE_START;\\r\\n  writebuffer[1] = len;\\r\\n  writebuffer[2] = MEPLAY_FILE_INDEX;\\r\\n  writebuffer[3] = music_index >> 8;\\r\\n  writebuffer[4] = (uint8_t)music_index;\\r\\n  writebuffer[5] = checkSum(writebuffer, len);\\r\\n  writebuffer[6] = MECODE_END;\\r\\n  \\r\\n  sendCmd(writebuffer, len+2);\\r\\n  prevCmd_time = millis();\\r\\n}\\r\\n\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    playMusicFileName\\r\\n * \\\\par Description\\r\\n *    play a mucsic File with it name\\r\\n * \\\\param[in]\\r\\n *    String str\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\n\\r\\nvoid MeAudioPlayer::playMusicFileName(String str)\\r\\n{\\r\\n  uint8_t len = 0;\\r\\n  uint8_t str_len = 0;\\r\\n  uint8_t i = 0;\\r\\n  char temp[10];\\r\\n  char temp_ch;\\r\\n  str_len = str.length();\\r\\n\\r\\n  if (str_len > 8)\\r\\n  {\\r\\n    len = 8;   \\r\\n  }\\r\\n  else\\r\\n  {\\r\\n    len = str_len;\\r\\n  }\\r\\n  for (int i = 0; i < len; i++)\\r\\n  {\\r\\n    temp_ch = str.charAt(i);\\r\\n    temp[i] = (temp_ch >= 'a' && temp_ch <= 'z') ? (temp_ch - 32) : temp_ch;  \\r\\n  }\\r\\n  \\r\\n  \\r\\n  nextCmd_time = millis();\\r\\n  if (nextCmd_time - prevCmd_time < MAX_TIMEOUT)\\r\\n  {\\r\\n    delay( MAX_TIMEOUT - (nextCmd_time - prevCmd_time));\\r\\n  }\\r\\n  \\r\\n  if (str_len > 8)\\r\\n  {\\r\\n    len = 11;\\r\\n    writebuffer[0] = MECODE_START;\\r\\n    writebuffer[1] = len;\\r\\n    writebuffer[2] = MEPLAY_FILE_NAME;\\r\\n  \\r\\n    for (int k = 0; k < 6; k++)\\r\\n    {\\r\\n      writebuffer[3 + k] = (uint8_t)temp[k];\\r\\n    }\\r\\n    writebuffer[len - 2] = 0x7E;\\r\\n    writebuffer[len - 1] = 0x31;\\r\\n    writebuffer[len] = (uint8_t)checkSum(writebuffer, len);\\r\\n    writebuffer[len + 1] = MECODE_END;\\r\\n  }\\r\\n  else\\r\\n  {\\r\\n    len = str_len + 3;\\r\\n    writebuffer[0] = MECODE_START;\\r\\n    writebuffer[1] = len;\\r\\n    writebuffer[2] = MEPLAY_FILE_NAME;\\r\\n  \\r\\n    for (int k = 0; k < str_len+1; k++)\\r\\n    {\\r\\n      writebuffer[3 + k] = (uint8_t)temp[k];\\r\\n    }\\r\\n    writebuffer[len] = (uint8_t)checkSum(writebuffer, len);\\r\\n    writebuffer[len+1] = MECODE_END;\\r\\n  }\\r\\n\\r\\n  sendCmd(writebuffer, len + 2);\\r\\n  prevCmd_time = millis();\\r\\n}  \\r\\n/**\\r\\n * \\\\par Function\\r\\n *    pauseMusic\\r\\n * \\\\par Description\\r\\n *    pause mucsic File\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid MeAudioPlayer::pauseMusic(void)\\r\\n{\\r\\n  uint8_t len = 0x03;\\r\\n  nextCmd_time = millis();\\r\\n  if (nextCmd_time - prevCmd_time < MAX_TIMEOUT)\\r\\n  {\\r\\n    delay( MAX_TIMEOUT - (nextCmd_time - prevCmd_time));\\r\\n  }\\r\\n  writebuffer[0] = MECODE_START;\\r\\n  writebuffer[1] = len;\\r\\n  writebuffer[2] = MEPAUSE_MUSIC;\\r\\n  writebuffer[3] = checkSum(writebuffer, len);\\r\\n  writebuffer[4] = MECODE_END;\\r\\n  sendCmd(writebuffer, 5);\\r\\n  prevCmd_time = millis();\\r\\n}\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    stopMusic\\r\\n * \\\\par Description\\r\\n *    stop play mucsic File\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid MeAudioPlayer::stopMusic(void)\\r\\n{\\r\\n\\tuint8_t len = 0x03;\\r\\n  nextCmd_time = millis();\\r\\n  if (nextCmd_time - prevCmd_time < MAX_TIMEOUT)\\r\\n  {\\r\\n    delay( MAX_TIMEOUT - (nextCmd_time - prevCmd_time));\\r\\n  }\\r\\n\\twritebuffer[0] = MECODE_START;\\r\\n\\twritebuffer[1] = len;\\r\\n\\twritebuffer[2] = MESTOP_MUSIC;\\r\\n\\twritebuffer[3] = checkSum(writebuffer, len);\\r\\n\\twritebuffer[4] = MECODE_END;\\r\\n\\tsendCmd(writebuffer, 5);\\r\\n  prevCmd_time = millis();\\r\\n}\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    playNextMusic\\r\\n * \\\\par Description\\r\\n *    play next mucsic File\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid MeAudioPlayer::playNextMusic(void)\\r\\n{\\r\\n\\tuint8_t len = 0x03;\\r\\n  nextCmd_time = millis();\\r\\n  if (nextCmd_time - prevCmd_time < MAX_TIMEOUT)\\r\\n  {\\r\\n    delay( MAX_TIMEOUT - (nextCmd_time - prevCmd_time));\\r\\n  }\\r\\n\\twritebuffer[0] = MECODE_START;\\r\\n\\twritebuffer[1] = len;\\r\\n\\twritebuffer[2] = MEPLAY_NEXT;\\r\\n\\twritebuffer[3] = checkSum(writebuffer, len);\\r\\n\\twritebuffer[4] = MECODE_END;\\r\\n\\tsendCmd(writebuffer, 5);\\r\\n  prevCmd_time = millis();\\r\\n}\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    playPrevMusic\\r\\n * \\\\par Description\\r\\n *    play prev mucsic File\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid MeAudioPlayer::playPrevMusic(void)\\r\\n{\\r\\n\\tuint8_t len = 0x03;\\r\\n  nextCmd_time = millis();\\r\\n  if (nextCmd_time - prevCmd_time < MAX_TIMEOUT)\\r\\n  {\\r\\n    delay( MAX_TIMEOUT - (nextCmd_time - prevCmd_time));\\r\\n  }\\r\\n\\twritebuffer[0] = MECODE_START;\\r\\n\\twritebuffer[1] = len;\\r\\n\\twritebuffer[2] = MEPLAY_PREV;\\r\\n\\twritebuffer[3] = checkSum(writebuffer, len);\\r\\n\\twritebuffer[4] = MECODE_END;\\r\\n\\tsendCmd(writebuffer, 5);\\r\\n  prevCmd_time = millis();\\r\\n}\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    setMusicVolume\\r\\n * \\\\par Description\\r\\n *    set play Music Volume value\\r\\n * \\\\param[in]\\r\\n *    uint8_t vol(00~100),default:66\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid MeAudioPlayer::setMusicVolume(uint8_t vol)\\r\\n{\\r\\n\\tuint8_t len = 0x04;\\r\\n  vol = (uint8_t)(vol * 0.24);\\r\\n\\tif (vol > 24)\\r\\n\\t{\\r\\n\\t\\tvol = 24;\\r\\n\\t}\\r\\n\\tif (vol < 0)\\r\\n\\t{\\r\\n\\t\\tvol = 0;\\r\\n\\t}\\r\\n\\twritebuffer[0] = MECODE_START;\\r\\n\\twritebuffer[1] = len;\\r\\n\\twritebuffer[2] = MEVOLUME_CTL;\\r\\n\\twritebuffer[3] = vol;\\r\\n\\twritebuffer[4] = checkSum(writebuffer, len);\\r\\n\\twritebuffer[5] = MECODE_END;\\r\\n\\tsendCmd(writebuffer, 6);\\r\\n}\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    setMusicPlayMode\\r\\n * \\\\par Description\\r\\n *    set play Music Play mode\\r\\n * \\\\param[in]\\r\\n *    uint8_t mode(00~04),\\r\\n *    00:Single non-loop playback mode(default)\\r\\n *    01:Single cycle play mode\\r\\n *    02:Repertoire loop mode\\r\\n *    03:Random mode\\r\\n *    04:Folder loop mode\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid MeAudioPlayer::setMusicPlayMode(uint8_t mode)\\r\\n{\\r\\n\\tuint8_t len = 0x04;\\r\\n  nextCmd_time = millis();\\r\\n  if (nextCmd_time - prevCmd_time < MAX_TIMEOUT)\\r\\n  {\\r\\n    delay( MAX_TIMEOUT - (nextCmd_time - prevCmd_time));\\r\\n  }\\r\\n\\tif (mode > 4)\\r\\n\\t{\\r\\n\\t\\tmode = 0;\\r\\n\\t}\\r\\n\\tif (mode < 0)\\r\\n\\t{\\r\\n\\t\\tmode = 0;\\r\\n\\t}\\r\\n\\twritebuffer[0] = MECODE_START;\\r\\n\\twritebuffer[1] = len;\\r\\n\\twritebuffer[2] = MESET_PLAY_MODE;\\r\\n\\twritebuffer[3] = mode;\\r\\n\\twritebuffer[4] = checkSum(writebuffer, len);\\r\\n\\twritebuffer[5] = MECODE_END;\\r\\n\\tsendCmd(writebuffer, 6);\\r\\n  prevCmd_time = millis();\\r\\n}\\r\\n\\r\\n/************************************************************\\r\\n\\r\\n\\t\\t\\tRecoding Control Function\\r\\n*************************************************************/\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    startRecodingFileName\\r\\n * \\\\par Description\\r\\n *    start Recoding a mucsic File and Name is\\r\\n * \\\\param[in]\\r\\n *    String str\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid MeAudioPlayer::startRecordingFileName(String str)\\r\\n{\\r\\n  uint8_t len = 0;\\r\\n  uint8_t str_len = 0;\\r\\n  uint8_t i = 0;\\r\\n  char temp[20];\\r\\n  char temp_ch;\\r\\n  str_len = str.length();\\r\\n\\r\\n  if (str_len > 20)\\r\\n  {\\r\\n    str_len = 20;   \\r\\n  }\\r\\n\\r\\n  for (int i = 0; i < str_len; i++)\\r\\n  {\\r\\n    temp_ch = str.charAt(i);\\r\\n    temp[i] = (temp_ch >= 'a' && temp_ch <= 'z') ? (temp_ch - 32) : temp_ch;  \\r\\n  }\\r\\n    \\r\\n  nextCmd_time = millis();\\r\\n  if (nextCmd_time - prevCmd_time < MAX_TIMEOUT)\\r\\n  {\\r\\n    delay( MAX_TIMEOUT - (nextCmd_time - prevCmd_time));\\r\\n  }\\r\\n  \\r\\n  len = str_len + 3;\\r\\n  writebuffer[0] = MECODE_START;\\r\\n  writebuffer[1] = len;\\r\\n  writebuffer[2] = MEFILE_NAME_RECORDING;\\r\\n  for (int k = 0; k < str_len+1; k++)\\r\\n  {\\r\\n    writebuffer[3 + k] = (uint8_t)temp[k];\\r\\n  }\\r\\n  writebuffer[len] = (uint8_t)checkSum(writebuffer, len);\\r\\n  writebuffer[len+1] = MECODE_END;\\r\\n  sendCmd(writebuffer, len + 2);\\r\\n  prevCmd_time = millis();\\r\\n}\\r\\n\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    stopRecodingFileName\\r\\n * \\\\par Description\\r\\n *    stop Recoding a mucsic File and Name is\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid MeAudioPlayer::stopRecording(void)\\r\\n{\\r\\n\\tuint8_t len = 0x03;\\r\\n  nextCmd_time = millis();\\r\\n  if (nextCmd_time - prevCmd_time < MAX_TIMEOUT)\\r\\n  {\\r\\n    delay( MAX_TIMEOUT - (nextCmd_time - prevCmd_time));\\r\\n  }\\r\\n\\twritebuffer[0] = MECODE_START;\\r\\n\\twritebuffer[1] = len;\\r\\n\\twritebuffer[2] = MESTOP_RECORDING;\\r\\n\\twritebuffer[3] = checkSum(writebuffer, len);\\r\\n\\twritebuffer[4] = MECODE_END;\\r\\n\\tsendCmd(writebuffer, 5);\\r\\n  prevCmd_time = millis();\\r\\n}\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    deleteFileName\\r\\n * \\\\par Description\\r\\n *    delete a Recoding mucsic File and Name is\\r\\n * \\\\param[in]\\r\\n *    String str\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid MeAudioPlayer::deleteFileName(String str)\\r\\n{\\r\\n  uint8_t len = 0;\\r\\n  uint8_t str_len = 0;\\r\\n  uint8_t i = 0;\\r\\n  char temp[20];\\r\\n  char temp_ch;\\r\\n  str_len = str.length();\\r\\n\\r\\n  for (int i = 0; i < str_len; i++)\\r\\n  {\\r\\n    temp_ch = str.charAt(i);\\r\\n    temp[i] = (temp_ch >= 'a' && temp_ch <= 'z') ? (temp_ch - 32) : temp_ch;  \\r\\n  }\\r\\n    \\r\\n  nextCmd_time = millis();\\r\\n  if (nextCmd_time - prevCmd_time < MAX_TIMEOUT)\\r\\n  {\\r\\n    delay( MAX_TIMEOUT - (nextCmd_time - prevCmd_time));\\r\\n  }\\r\\n  \\r\\n  \\r\\n  len = str_len + 3;\\r\\n  writebuffer[0] = MECODE_START;\\r\\n  writebuffer[1] = len;\\r\\n  writebuffer[2] = MEDELETE_SPECIFY_FILE_NAME;\\r\\n\\r\\n  for (int k = 0; k < str_len+1; k++)\\r\\n  {\\r\\n    writebuffer[3 + k] = (uint8_t)temp[k];\\r\\n  }\\r\\n  writebuffer[len] = (uint8_t)checkSum(writebuffer, len);\\r\\n  writebuffer[len+1] = MECODE_END;\\r\\n\\r\\n  sendCmd(writebuffer, len + 2);\\r\\n  prevCmd_time = millis();\\r\\n}\\r\\n\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    deleteAllMusicFile\\r\\n * \\\\par Description\\r\\n *    delete all mucsic File\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid MeAudioPlayer::deleteAllMusicFile(void)\\r\\n{\\r\\n\\tuint8_t len = 0x03;\\r\\n  nextCmd_time = millis();\\r\\n  if (nextCmd_time - prevCmd_time < MAX_TIMEOUT)\\r\\n  {\\r\\n    delay( MAX_TIMEOUT - (nextCmd_time - prevCmd_time));\\r\\n  }\\r\\n\\twritebuffer[0] = MECODE_START;\\r\\n\\twritebuffer[1] = len;\\r\\n\\twritebuffer[2] = MEDELETE_ALL;\\r\\n\\twritebuffer[3] = checkSum(writebuffer, len);\\r\\n\\twritebuffer[4] = MECODE_END;\\r\\n\\tsendCmd(writebuffer, 5);\\r\\n  prevCmd_time = millis();\\r\\n}\\r\\n\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    volumeUp\\r\\n * \\\\par Description\\r\\n *    volume Up\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid MeAudioPlayer::volumeUp(void)\\r\\n{\\r\\n  uint8_t len = 0x03;\\r\\n  writebuffer[0] = MECODE_START;\\r\\n  writebuffer[1] = len;\\r\\n  writebuffer[2] = MESET_VOLUME_UP;\\r\\n  writebuffer[3] = checkSum(writebuffer, len);\\r\\n  writebuffer[4] = MECODE_END;\\r\\n  sendCmd(writebuffer, 5);\\r\\n}\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    volumeDown\\r\\n * \\\\par Description\\r\\n *    volume Down\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid MeAudioPlayer::volumeDown(void)\\r\\n{\\r\\n  uint8_t len = 0x03;\\r\\n  writebuffer[0] = MECODE_START;\\r\\n  writebuffer[1] = len;\\r\\n  writebuffer[2] = MESET_VOLUME_DOWN;\\r\\n  writebuffer[3] = checkSum(writebuffer, len);\\r\\n  writebuffer[4] = MECODE_END;\\r\\n  sendCmd(writebuffer, 5);\\r\\n}\\r\\n\\r\\n/**\\r\\n * \\\\par Function\\r\\n *   getFirmwareVersion\\r\\n * \\\\par Description\\r\\n *   Get Firmware Version.\\r\\n * \\\\param[in]\\r\\n *   None\\r\\n * \\\\par Output\\r\\n *   buffer: for storage version, length greater than 8\\r\\n * \\\\return\\r\\n *   None\\r\\n * \\\\par Others\\r\\n */\\r\\nvoid MeAudioPlayer::getFirmwareVersion(char *buffer)\\r\\n{\\r\\n  int16_t i = 0;\\r\\n  int8_t return_value = 0;\\r\\n  uint8_t reg = GET_VERSION_ADDR;\\r\\n\\r\\n  return_value = readData(reg, &i2cData[reg], 8);\\r\\n  \\r\\n  if(return_value == I2C_OK)\\r\\n  {\\r\\n\\r\\n    memcpy(buffer, &i2cData[reg], 8);\\r\\n  }\\r\\n  delay(2);\\r\\n}\\r\\n\\r\\n/**\\r\\n * \\\\par Function\\r\\n *   readData\\r\\n * \\\\par Description\\r\\n *   Write the data to i2c device.\\r\\n * \\\\param[in]\\r\\n *   start - the address which will write the data to.\\r\\n * \\\\param[in]\\r\\n *   pData - the head address of data array.\\r\\n * \\\\param[in]\\r\\n *   size - set the number of data will be written to the devide.\\r\\n * \\\\par Output\\r\\n *   None\\r\\n * \\\\return\\r\\n *   Return the error code.\\r\\n *   the definition of the value of variable return_value:\\r\\n *   0:success\\r\\n *   1:BUFFER_LENGTH is shorter than size\\r\\n *   2:address send, nack received\\r\\n *   3:data send, nack received\\r\\n *   4:other twi error\\r\\n *   refer to the arduino official library twi.c\\r\\n * \\\\par Others\\r\\n *   Calling the official i2c library to read data.\\r\\n */\\r\\nint8_t MeAudioPlayer::readData(uint8_t start, uint8_t *buffer, uint8_t size)\\r\\n{\\r\\n  int16_t i = 0;\\r\\n  int8_t return_value = 0;\\r\\n\\r\\n  Wire.beginTransmission(Device_Address);\\r\\n  return_value = Wire.write(start);\\r\\n  if(return_value != 1)\\r\\n  {\\r\\n    return(I2C_ERROR);\\r\\n  }\\r\\n  return_value = Wire.endTransmission(false);\\r\\n  if(return_value != 0)\\r\\n  {\\r\\n    return(return_value);\\r\\n  }\\r\\n  delayMicroseconds(1);\\r\\n  /* Third parameter is true: relase I2C-bus after data is read. */\\r\\n  Wire.requestFrom(Device_Address, size, (uint8_t)true);\\r\\n  while(Wire.available() && i < size)\\r\\n  {\\r\\n    buffer[i++] = Wire.read();\\r\\n\\r\\n  }\\r\\n  delayMicroseconds(1);\\r\\n  if(i != size)\\r\\n  {\\r\\n    return(I2C_ERROR);\\r\\n  }\\r\\n  return(0); //return: no error \\r\\n}\\r\\n\" }",
    "{ filename: \"src/MeAudioPlayer.h\", code: \"/**\\r\\n * \\\\par Copyright (C), 2012-2017, MakeBlock\\r\\n * \\\\class   MeAudioPlayer\\r\\n * \\\\brief   Driver for MeAudioPlayer module.\\r\\n * @file    MeAudioPlayer.h\\r\\n * @author  MakeBlock\\r\\n * @version V1.0.0\\r\\n * @date    2017/11/17\\r\\n * @brief   Header for MeAudioPlayer.cpp module.\\r\\n *\\r\\n * \\\\par Copyright\\r\\n * This software is Copyright (C), 2012-2016, MakeBlock. Use is subject to license \\\\n\\r\\n * conditions. The main licensing options available are GPL V2 or Commercial: \\\\n\\r\\n *\\r\\n * \\\\par Open Source Licensing GPL V2\\r\\n * This is the appropriate option if you want to share the source code of your \\\\n\\r\\n * application with everyone you distribute it to, and you also want to give them \\\\n\\r\\n * the right to share who uses it. If you wish to use this software under Open \\\\n\\r\\n * Source Licensing, you must contribute all your source code to the open source \\\\n\\r\\n * community in accordance with the GPL Version 2 when your application is \\\\n\\r\\n * distributed. See http://www.gnu.org/copyleft/gpl.html\\r\\n *\\r\\n * \\\\par Description\\r\\n * This file is a drive for MeAudioPlayer module, It supports MeAudioPlayer V1.0 device provided\\r\\n * by MakeBlock.\\r\\n *\\r\\n * \\\\par Method List:\\r\\n *\\r\\n * \\r\\n/*\\r\\n *   void MeAudioPlayer::PlayerInit(void)\\r\\n *   void MeAudioPlayer::playMusicFileIndex(uint16_t music_index);\\r\\n *   void MeAudioPlayer::playMusicFileName(String str);  \\r\\n *   void MeAudioPlayer::pauseMusic(void);\\r\\n *   void MeAudioPlayer::stopMusic(void);\\r\\n *   void MeAudioPlayer::playNextMusic(void);\\r\\n *   void MeAudioPlayer::playPrevMusic(void);\\r\\n *   void MeAudioPlayer::setMusicVolume(uint8_t vol);\\r\\n *   void MeAudioPlayer::setMusicPlayMode(uint8_t mode);\\r\\n *   void MeAudioPlayer::startRecordingFileName(String str);\\r\\n *   void MeAudioPlayer::stopRecording(void);\\r\\n *   void MeAudioPlayer::volumeUp(void);\\r\\n *   void MeAudioPlayer::volumeDown(void);\\r\\n *   void MeAudioPlayer::deleteFileName(String str);\\r\\n *   void MeAudioPlayer::deleteAllMusicFile(void);\\r\\n\\r\\n*/\\r\\n/*\\r\\n * \\r\\n * \\\\par History:\\r\\n * <pre>\\r\\n * \\\"<Author>\\\"         \\\"<Time>\\\"        \\\"<Version>\\\"        \\\"<Descr>\\\"\\r\\n *  Lanweiting      2017/11/15          1.0.0         Build the files.\\r\\n * </pre>\\r\\n *\\r\\n */\\r\\n\\r\\n/* Define to prevent recursive inclusion -------------------------------------*/\\r\\n#ifndef _MeAudioPlayer_H_\\r\\n#define _MeAudioPlayer_H_\\r\\n\\r\\n/* Includes ------------------------------------------------------------------*/\\r\\n#include <stdint.h>\\r\\n#include <stdbool.h>\\r\\n#include <Arduino.h>\\r\\n\\r\\n#include \\\"MeConfig.h\\\"\\r\\n\\r\\n #ifdef ME_PORT_DEFINED\\r\\n#include \\\"MePort.h\\\"\\r\\n #endif // ME_PORT_DEFINED\\r\\n\\r\\n\\r\\n/* Exported macro ------------------------------------------------------------*/\\r\\n#define I2C_OK                          (0)\\r\\n#define I2C_ERROR                       (-1)\\r\\n#define AUDIOPLAYER_DEFAULT_ADDRESS     (0x2B)//\\r\\n\\r\\n/* Communication Control CMD------------------------------------------------------------*/\\r\\n#define MEPLAY_FILE_INDEX               0xA2\\r\\n#define MEPLAY_FILE_NAME                0xA3\\r\\n#define MEPAUSE_MUSIC                   0xAA\\r\\n#define MESTOP_MUSIC                    0xAB\\r\\n#define MEPLAY_NEXT                     0xAC\\r\\n#define MEPLAY_PREV                     0xAD\\r\\n#define MEVOLUME_CTL                    0xAE\\r\\n#define MESET_PLAY_MODE                 0xAF\\r\\n#define MEMEMORY_SELECT                 0xD2\\r\\n\\r\\n#define MEFILE_NAME_RECORDING           0xD6\\r\\n#define MESTOP_RECORDING                0xD9\\r\\n#define MEDELETE_SPECIFY_FILE_NAME      0xDB\\r\\n#define MEDELETE_ALL                    0xDE\\r\\n\\r\\n#define MECODE_START                    0x7E\\r\\n#define MECODE_END                      0xEF\\r\\n\\r\\n/* Music Mode Control CMD------------------------------------------------------------*/\\r\\n#define SINGLE_NON_CYCLE                0x00\\r\\n#define SINGLE_CYCLE                    0x01\\r\\n#define ALL_CYCLE                       0x02\\r\\n#define RANDOM_PLAY                     0x03\\r\\n#define FOLDER_CYCLE                    0x04\\r\\n/* Memory Mode Control CMD------------------------------------------------------------*/\\r\\n#define DEFAULT_MEMORY                  0x00\\r\\n#define EXTERNAL_MEMORY                 0x01\\r\\n\\r\\n#define MESET_VOLUME_UP                 0xEA\\r\\n#define MESET_VOLUME_DOWN               0xEB\\r\\n#define MEGET_VERSION                   0xEC\\r\\n//IIC Register Address\\r\\n#define GET_VERSION_ADDR                0x01\\r\\n\\r\\n#define MAX_TIMEOUT                     100L\\r\\n\\r\\n/*\\r\\n * Class: MeAudioPlayer\\r\\n * \\\\par Description\\r\\n * Declaration of Class MeAudioPlayer\\r\\n */\\r\\n\\r\\n#ifndef ME_PORT_DEFINED\\r\\nclass MeAudioPlayer\\r\\n#else // !ME_PORT_DEFINED\\r\\n  class MeAudioPlayer : public MePort\\r\\n#endif // !ME_PORT_DEFINED\\r\\n{\\r\\npublic:\\r\\n#ifdef ME_PORT_DEFINED\\r\\n/**\\r\\n * Alternate Constructor which can call your own function to map the MeAudioPlayer to arduino port,\\r\\n * no pins are used or initialized here\\r\\n */\\r\\n  MeAudioPlayer(void);\\r\\n\\r\\n/**\\r\\n * Alternate Constructor which can call your own function to map the MeAudioPlayer to arduino port.\\r\\n * \\\\param[in]\\r\\n *   port - RJ25 port number\\r\\n */\\r\\n  MeAudioPlayer(uint8_t port);\\r\\n  /**\\r\\n * Alternate Constructor which can call your own function to map the MeAudioPlayer to arduino port\\r\\n * and change the i2c device address\\r\\n * \\\\param[in]\\r\\n *   port - RJ25 port number\\r\\n * \\\\param[in]\\r\\n *   address - the i2c address you want to set\\r\\n */ \\r\\n  MeAudioPlayer(uint8_t port, uint8_t address);\\r\\n#else // ME_PORT_DEFINED\\r\\n/**\\r\\n * Alternate Constructor which can call your own function to map the _AD0 and _INT to arduino port,\\r\\n * \\\\param[in]\\r\\n *   _AD0 - arduino gpio number\\r\\n * \\\\param[in]\\r\\n *   _INT - arduino gpio number\\r\\n */\\r\\n  MeAudioPlayer(uint8_t _AD0, uint8_t _INT);\\r\\n\\r\\n#endif  /* ME_PORT_DEFINED */\\r\\n/**\\r\\n * \\\\par Function\\r\\n *   PlayerInit\\r\\n * \\\\par Description\\r\\n *   Initialize the MeAudioPlayer.\\r\\n * \\\\param[in]\\r\\n *   None\\r\\n * \\\\par Output\\r\\n *   None\\r\\n * \\\\return\\r\\n *   None\\r\\n * \\\\par Others\\r\\n *   None\\r\\n */\\r\\n  void PlayerInit(void);\\r\\n\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    sendData\\r\\n * \\\\par Description\\r\\n *    send the datas to serial com.\\r\\n * \\\\param[in]\\r\\n *    data pionter,len\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid sendCmd(uint8_t *sendcmd, uint8_t len);\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    checkSum\\r\\n * \\\\par Description\\r\\n *    return check And result\\r\\n * \\\\param[in]\\r\\n *    data pionter,len\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nuint8_t checkSum(uint8_t* buffer, uint8_t len);\\r\\n/************************************************************\\r\\n\\r\\n      Playing Music Control Function\\r\\n\\r\\n*************************************************************/\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    playMusicFileIndex\\r\\n * \\\\par Description\\r\\n *    play a mucsic File with it index on root\\r\\n * \\\\param[in]\\r\\n *    uint16_t index\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid playMusicFileIndex(uint16_t music_index);\\r\\n\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    playMusicFileName\\r\\n * \\\\par Description\\r\\n *    play a mucsic File with it name\\r\\n * \\\\param[in]\\r\\n *    char str[]\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid playMusicFileName(String str);\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    pauseMusic\\r\\n * \\\\par Description\\r\\n *    pause mucsic File\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid pauseMusic(void);\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    stopMusic\\r\\n * \\\\par Description\\r\\n *    stop play mucsic File\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid stopMusic(void);\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    playNextMusic\\r\\n * \\\\par Description\\r\\n *    play next mucsic File\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid playNextMusic(void);\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    playPrevMusic\\r\\n * \\\\par Description\\r\\n *    play prev mucsic File\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid playPrevMusic(void);\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    setMusicVolume\\r\\n * \\\\par Description\\r\\n *    set play Music Volume value\\r\\n * \\\\param[in]\\r\\n *    uint8_t vol(00~100),default:66\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid setMusicVolume(uint8_t vol);\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    setMusicPlayMode\\r\\n * \\\\par Description\\r\\n *    set play Music Play mode\\r\\n * \\\\param[in]\\r\\n *    uint8_t mode(00~04),\\r\\n *    00:Single non-loop playback mode(default)\\r\\n *    01:Single cycle play mode\\r\\n *    02:Repertoire loop mode\\r\\n *    03:Random mode\\r\\n *    04:Folder loop mode\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid setMusicPlayMode(uint8_t mode);\\r\\n\\r\\n/************************************************************\\r\\n\\r\\n      Recoding Control Function\\r\\n\\r\\n*************************************************************/\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    startRecodingFileName\\r\\n * \\\\par Description\\r\\n *    start Recoding a mucsic File and Name is\\r\\n * \\\\param[in]\\r\\n *    char str[]\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid startRecordingFileName(String str);\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    stopRecodingFileName\\r\\n * \\\\par Description\\r\\n *    stop Recoding a mucsic File and Name is\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid stopRecording(void);\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    deleteFileName\\r\\n * \\\\par Description\\r\\n *    delete a Recoding mucsic File and Name is\\r\\n * \\\\param[in]\\r\\n *    char str[]\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid deleteFileName(String str);\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    deleteAllMusicFile\\r\\n * \\\\par Description\\r\\n *    delete all mucsic File\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid deleteAllMusicFile(void);\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    volumeUp\\r\\n * \\\\par Description\\r\\n *    volume Up\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid volumeUp(void);\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    volumeDown\\r\\n * \\\\par Description\\r\\n *    volume Down\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid volumeDown(void);\\r\\n/**\\r\\n * \\\\par Function\\r\\n *   getFirmwareVersion\\r\\n * \\\\par Description\\r\\n *   Get Firmware Version.\\r\\n * \\\\param[in]\\r\\n *   None\\r\\n * \\\\par Output\\r\\n *   buffer: for storage version, length greater than 8\\r\\n * \\\\return\\r\\n *   None\\r\\n * \\\\par Others\\r\\n */\\r\\nvoid getFirmwareVersion(char *buffer);\\r\\n/**\\r\\n * \\\\par Function\\r\\n *   readData\\r\\n * \\\\par Description\\r\\n *   Write the data to i2c device.\\r\\n * \\\\param[in]\\r\\n *   start - the address which will write the data to.\\r\\n * \\\\param[in]\\r\\n *   pData - the head address of data array.\\r\\n * \\\\param[in]\\r\\n *   size - set the number of data will be written to the devide.\\r\\n * \\\\par Output\\r\\n *   None\\r\\n * \\\\return\\r\\n *   Return the error code.\\r\\n *   the definition of the value of variable return_value:\\r\\n *   0:success\\r\\n *   1:BUFFER_LENGTH is shorter than size\\r\\n *   2:address send, nack received\\r\\n *   3:data send, nack received\\r\\n *   4:other twi error\\r\\n *   refer to the arduino official library twi.c\\r\\n * \\\\par Others\\r\\n *   Calling the official i2c library to read data.\\r\\n */\\r\\nint8_t readData(uint8_t start, uint8_t *buffer, uint8_t size);\\r\\nuint8_t Device_Address;\\r\\n\\r\\nprivate:\\r\\n  volatile uint8_t  _S1;\\r\\n  volatile uint8_t  _S2;\\r\\n  volatile uint8_t  _AD0;\\r\\n  volatile uint8_t  _INT;\\r\\n  uint8_t i2cData[10];\\r\\n  // uint8_t readbuffer[27];\\r\\n  uint8_t writebuffer[27];\\r\\n  uint32_t nextCmd_time;\\r\\n  uint32_t prevCmd_time;\\r\\n};\\r\\n#endif\\r\\n\\r\\n\" }"
];