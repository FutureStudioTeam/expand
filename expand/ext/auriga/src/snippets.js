export default [
    "arduinoc: {\n    \"MeRGBLed\": {\n        \"prefix\": \"MeRGBLed\",\n        \"body\": \"MeRGBLed\",\n        \"kind\": 5\n    },\n    \"MeRGBLed_Board\": {\n        \"prefix\": \"MeRGBLed_Board\",\n        \"body\": \"MeRGBLed rgbled_0(0, 12);\",\n        \"description\": \"Alternate Constructor which can call your own function to map the MeRGBLed to arduino port,it will assigned the LED display buffer and initialization the GPIO of LED lights. The slot2 will be used here, and the default number of light strips is 32.\",\n        \"kind\": 25\n    },\n    \"MeRGBLed_Strip\": {\n        \"prefix\": \"MeRGBLed_Strip\",\n        \"body\": \"MeRGBLed rgbled_${1|6,7,8,9,10|}_${2|1,2|}(${1|6,7,8,9,10|}, ${2|1,2|}, ${3:led_num});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the MeRGBLed to arduino port,it will assigned the LED display buffer and initialization the GPIO of LED lights.You can set any slot for the LED data PIN, and reset the LED number by this constructor.\",\n        \"kind\": 25\n    },\n    \"MeRGBLed::setpin\": {\n        \"prefix\": \"MeRGBLed::setpin\",\n        \"body\": \"setpin(${1:44})\",\n        \"description\": \"Reset the LED available data PIN by its arduino port.\",\n        \"kind\": 1\n    },\n    \"MeRGBLed::setColorWithHex\": {\n        \"prefix\": \"MeRGBLed::setColorWithHex\",\n        \"body\": \"setColor(${1:Led_Number}, ${2:value})\",\n        \"description\": \"Set the LED color for any LED.\",\n        \"kind\": 1\n    },\n    \"MeRGBLed::setColorWithRGB\": {\n        \"prefix\": \"MeRGBLed::setColorWithRGB\",\n        \"body\": \"setColor(${1:Led_Number}, ${2:red}, ${3:green}, ${4:blue})\",\n        \"description\": \"Set the LED color for any LED.\",\n        \"kind\": 1\n    },\n    \"MeRGBLed::show\": {\n        \"prefix\": \"MeRGBLed::show\",\n        \"body\": \"show()\",\n        \"description\": \"Transmission the data to WS2812.\",\n        \"kind\": 1\n    },\n    \"MeBuzzer\": {\n        \"prefix\": \"MeBuzzer\",\n        \"body\": \"MeBuzzer\",\n        \"kind\": 5\n    },\n    \"MeBuzzer_Constructor\": {\n        \"prefix\": \"MeBuzzer\",\n        \"body\": \"MeBuzzer buzzer;\",\n        \"description\": \"Alternate Constructor which can call your own function to map the Buzzer to arduino port,Buzzer pins are used and initialized here.\",\n        \"kind\": 25\n    },\n    \"MeBuzzer::setpin\": {\n        \"prefix\": \"MeBuzzer::setpin\",\n        \"body\": \"setpin(${1:45})\",\n        \"description\": \"Reset the buzzer available pin by its arduino port.\",\n        \"kind\": 1\n    },\n    \"MeBuzzer::tone\": {\n        \"prefix\": \"MeBuzzer::tone\",\n        \"body\": \"tone(${1:frequency}, ${2:duration})\",\n        \"description\": \"Playing the tones.\",\n        \"kind\": 1\n    },\n    \"MeEncoderOnBoard\": {\n        \"prefix\": \"MeEncoderOnBoard\",\n        \"body\": \"MeEncoderOnBoard\",\n        \"kind\": 5\n    },\n    \"MeEncoderOnBoard_Constructor\": {\n        \"prefix\": \"MeEncoderOnBoard\",\n        \"body\": \"MeEncoderOnBoard Encoder_${1|1,2|}(SLOT${1|1,2|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the Encoder motor to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeEncoderOnBoard::getIntNum\": {\n        \"prefix\": \"MeEncoderOnBoard::getIntNum\",\n        \"body\": \"getIntNum()\",\n        \"description\": \"This function used to get the Auriga/MegaPi Interrupt number of current objects.\",\n        \"kind\": 1\n    },\n    \"MeEncoderOnBoard::getPortB\": {\n        \"prefix\": \"MeEncoderOnBoard::getPortB\",\n        \"body\": \"getPortB()\",\n        \"description\": \"This function used to get the GPIO number of current objects's dir port B.\",\n        \"kind\": 1\n    },\n    \"MeEncoderOnBoard::pulsePosPlus\": {\n        \"prefix\": \"MeEncoderOnBoard::pulsePosPlus\",\n        \"body\": \"pulsePosPlus()\",\n        \"description\": \"This function used to increase the current pos value(pulse counter).\",\n        \"kind\": 1\n    },\n    \"MeEncoderOnBoard::pulsePosMinus\": {\n        \"prefix\": \"MeEncoderOnBoard::pulsePosMinus\",\n        \"body\": \"pulsePosMinus()\",\n        \"description\": \"This function used to reduction the current pos value(pulse counter).\",\n        \"kind\": 1\n    },\n    \"MeEncoderOnBoard::setTarPWM\": {\n        \"prefix\": \"MeEncoderOnBoard::setTarPWM\",\n        \"body\": \"setTarPWM(${1:speed})\",\n        \"description\": \"This function used for set the target pwm value.\",\n        \"kind\": 1\n    },\n    \"MeEncoderOnBoard::loop\": {\n        \"prefix\": \"MeEncoderOnBoard::loop\",\n        \"body\": \"loop()\",\n        \"description\": \"This function should be called without Blocked.\",\n        \"kind\": 1\n    },\n    \"MeLightSensor\": {\n        \"prefix\": \"MeLightSensor\",\n        \"body\": \"MeLightSensor\",\n        \"kind\": 5\n    },\n    \"MeLightSensor_Board\": {\n        \"prefix\": \"MeLightSensor_Board\",\n        \"body\": \"MeLightSensor lightsensor_${1|11,12|}(${1|11,12|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the light sensor to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeLightSensor_Port\": {\n        \"prefix\": \"MeLightSensor_Port\",\n        \"body\": \"MeLightSensor lightsensor_${1|6,7,8,9,10|}(${1|6,7,8,9,10|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the light sensor to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeLightSensor::read\": {\n        \"prefix\": \"MeLightSensor::read\",\n        \"body\": \"read()\",\n        \"description\": \"Read analog value of light sensor.\",\n        \"kind\": 1\n    },\n    \"MeOnBoardTemp\": {\n        \"prefix\": \"MeOnBoardTemp\",\n        \"body\": \"MeOnBoardTemp\",\n        \"kind\": 5\n    },\n    \"MeOnBoardTemp_Constructor\": {\n        \"prefix\": \"MeOnBoardTemp\",\n        \"body\": \"MeOnBoardTemp temperature_onboard(PORT_13);\",\n        \"description\": \"Alternate Constructor which can call your own function to map the On Board Temperature to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeOnBoardTemp::readValue\": {\n        \"prefix\": \"MeOnBoardTemp::readValue\",\n        \"body\": \"readValue()\",\n        \"description\": \"Read the value of On Board Temperature.\",\n        \"kind\": 1\n    },\n    \"MeSoundSensor\": {\n        \"prefix\": \"MeSoundSensor\",\n        \"body\": \"MeSoundSensor\",\n        \"kind\": 5\n    },\n    \"MeSoundSensor_Board\": {\n        \"prefix\": \"MeSoundSensor_Board\",\n        \"body\": \"MeSoundSensor soundsensor_${1:14}(${1:14});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the Sound Sensor to arduino port\",\n        \"kind\": 25\n    },\n    \"MeSoundSensor_Port\": {\n        \"prefix\": \"MeSoundSensor_Port\",\n        \"body\": \"MeSoundSensor soundsensor_${1|6,7,8,9,10|}(${1|6,7,8,9,10|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the Sound Sensor to arduino port\",\n        \"kind\": 25\n    },\n    \"MeSoundSensor::strength\": {\n        \"prefix\": \"MeSoundSensor::strength\",\n        \"body\": \"strength()\",\n        \"description\": \"Read and return the sensor value.\",\n        \"kind\": 1\n    },\n    \"MeGyro\": {\n        \"prefix\": \"MeGyro\",\n        \"body\": \"MeGyro\",\n        \"kind\": 5\n    },\n    \"MeGyro_Board\": {\n        \"prefix\": \"MeGyro_Board\",\n        \"body\": \"MeGyro gyro_0(0, 0x69);\",\n        \"description\": \"Alternate Constructor which can call your own function to map the _AD0 and _INT to arduino port,no pins are used or initialized here\",\n        \"kind\": 25\n    },\n    \"MeGyro::begin\": {\n        \"prefix\": \"MeGyro::begin\",\n        \"body\": \"begin()\",\n        \"description\": \"Initialize the MeGyro.\",\n        \"kind\": 1\n    },\n    \"MeGyro::update\": {\n        \"prefix\": \"MeGyro::update\",\n        \"body\": \"update()\",\n        \"description\": \"Update some calculated angle values to the variable.\",\n        \"kind\": 1\n    },\n    \"MeGyro::getAngle\": {\n        \"prefix\": \"MeGyro::getAngle_axis\",\n        \"body\": \"getAngle(${1|1,2,3|})\",\n        \"description\": \"Get the angle value of setting axis.Axis settings(1:X-axis, 2:Y-axis, 3:Z-axis)\",\n        \"kind\": 1\n    },\n    \"MeUltrasonicSensor\": {\n        \"prefix\": \"MeUltrasonicSensor\",\n        \"body\": \"MeUltrasonicSensor\",\n        \"kind\": 5\n    },\n    \"MeUltrasonicSensor_Port\": {\n        \"prefix\": \"MeUltrasonicSensor_Port\",\n        \"body\": \"MeUltrasonicSensor ultrasonic_${1|6,7,8,9,10|}(${1|6,7,8,9,10|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the ultrasonic Sensor to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeUltrasonicSensor::distanceCm\": {\n        \"prefix\": \"MeUltrasonicSensor::distanceCm\",\n        \"body\": \"distanceCm()\",\n        \"description\": \"Centimeters return the distance.\",\n        \"kind\": 1\n    },\n    \"MeLineFollower\": {\n        \"prefix\": \"MeLineFollower\",\n        \"body\": \"MeLineFollower\",\n        \"kind\": 5\n    },\n    \"MeLineFollower_Port\": {\n        \"prefix\": \"MeLineFollower_Port\",\n        \"body\": \"MeLineFollower linefollower_${1|6,7,8,9,10|}(${1|6,7,8,9,10|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the line follwer device to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeLineFollower::readSensors\": {\n        \"prefix\": \"MeLineFollower::readSensors\",\n        \"body\": \"readSensors()\",\n        \"description\": \"Get the sensors state.\",\n        \"kind\": 1\n    },\n    \"include_MeAuriga\": {\n        \"prefix\": \"include_MeAuriga\",\n        \"body\": \"#include <MeAuriga.h>\",\n        \"description\": \"The driver for MeAuriga board by MakeBlock.\",\n        \"kind\": 25\n    },\n    \"MeSerial::begin\": {\n        \"prefix\": \"MeSerial::begin\",\n        \"body\": \"begin(115200)\",\n        \"description\": \"Sets the speed (baud rate) for the serial communication.\",\n        \"kind\": 1\n    },\n    \"MePort\": {\n        \"prefix\": \"MePort\",\n        \"body\": \"MePort\",\n        \"kind\": 5\n    },\n    \"MePort_Constructor\": {\n        \"prefix\": \"MePort\",\n        \"body\": \"MePort port_${1|6,7,8,9,10|}(${1|6,7,8,9,10|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the MePort to arduino port,no pins are used or initialized here, but PWM frequency set to 976 Hz.\",\n        \"kind\": 25\n    },\n    \"MePort::pin\": {\n        \"prefix\": \"MePort::pin_Slot\",\n        \"body\": \"pin${1|1,2|}()\",\n        \"description\": \"Return the arduino pin number of current RJ25 object's slot1 or slot2\",\n        \"kind\": 1\n    },\n    \"MeTemperature\": {\n        \"prefix\": \"MeTemperature\",\n        \"body\": \"MeTemperature\",\n        \"kind\": 5\n    },\n    \"MeTemperature_Port_Slot\": {\n        \"prefix\": \"MeTemperature_Port_Slot\",\n        \"body\": \"MeTemperature temperature_${1|6,7,8,9,10|}_${2|1,2|}(${1|6,7,8,9,10|}, ${2|1,2|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the temperature sensor to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeTemperature::temperature\": {\n        \"prefix\": \"MeTemperature::temperature\",\n        \"body\": \"temperature()\",\n        \"description\": \"Get the celsius of temperature\",\n        \"kind\": 1\n    },\n    \"MePotentiometer\": {\n        \"prefix\": \"MePotentiometer\",\n        \"body\": \"MePotentiometer\",\n        \"kind\": 5\n    },\n    \"MePotentiometer_Port\": {\n        \"prefix\": \"MePotentiometer_Port\",\n        \"body\": \"MePotentiometer potentiometer_${1|6,7,8,9,10|}(${1|6,7,8,9,10|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the Me potentiometer device to arduino port.\",\n        \"kind\": 25\n    },\n    \"MePotentiometer::read\": {\n        \"prefix\": \"MePotentiometer::read\",\n        \"body\": \"read()\",\n        \"description\": \"Read DAC value of Me potentiometer module.\",\n        \"kind\": 1\n    },\n    \"Servo\": {\n        \"prefix\": \"Servo\",\n        \"body\": \"Servo\",\n        \"kind\": 5\n    },\n    \"Servo_Port_Slot\": {\n        \"prefix\": \"Servo_Port_Slot\",\n        \"body\": \"Servo servo_${1|6,7,8,9,10|}_${2|1,2|};\",\n        \"description\": \"Allows MeAuriga board to control RC (hobby) servo motors.\",\n        \"kind\": 25\n    },\n    \"Servo::attach\": {\n        \"prefix\": \"Servo::attach\",\n        \"body\": \"attach(${1:pin})\",\n        \"description\": \"Attach the Servo variable to a pin.\",\n        \"kind\": 1\n    },\n    \"Servo::write\": {\n        \"prefix\": \"Servo::write\",\n        \"body\": \"write(${1:angle})\",\n        \"description\": \"Writes a value to the servo, controlling the shaft accordingly.\",\n        \"kind\": 1\n    },\n    \"Me7SegmentDisplay\": {\n        \"prefix\": \"Me7SegmentDisplay\",\n        \"body\": \"Me7SegmentDisplay\",\n        \"kind\": 5\n    },\n    \"Me7SegmentDisplay_Port\": {\n        \"prefix\": \"Me7SegmentDisplay_Port\",\n        \"body\": \"Me7SegmentDisplay seg7_${1|6,7,8,9,10|}(${1|6,7,8,9,10|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the 7-Segment display to arduino port,the slot1 will be used for data pin and slot2 will used for clk pin.\",\n        \"kind\": 25\n    },\n    \"Me7SegmentDisplay::display\": {\n        \"prefix\": \"Me7SegmentDisplay::display\",\n        \"body\": \"display(${1:value})\",\n        \"description\": \"Display certain value, and this value type is uint16_t.\",\n        \"kind\": 1\n    }\n}"
];