export default [
    "{ filename: \"src/MeEnhanceEncoderOnBoard.cpp\", code: \"/**\\r\\n * \\\\par Copyright (C), 2012-2016, MakeBlock\\r\\n * \\\\class   MeEnhanceEncoderOnBoard\\r\\n * \\\\brief   Driver for Encoder module on MeAuriga and MeMegaPi.\\r\\n * @file    MeEnhanceEncoderOnBoard.cpp\\r\\n * @author  MakeBlock\\r\\n * @version V1.0.0\\r\\n * @date    2017/11/17\\r\\n * @brief   Driver for Encoder module on MeAuriga and MeMegaPi.\\r\\n *\\r\\n * \\\\par Copyright\\r\\n * This software is Copyright (C), 2012-2016, MakeBlock. Use is subject to license \\\\n\\r\\n * conditions. The main licensing options available are GPL V2 or Commercial: \\\\n\\r\\n *\\r\\n * \\\\par Open Source Licensing GPL V2\\r\\n * This is the appropriate option if you want to share the source code of your \\\\n\\r\\n * application with everyone you distribute it to, and you also want to give them \\\\n\\r\\n * the right to share who uses it. If you wish to use this software under Open \\\\n\\r\\n * Source Licensing, you must contribute all your source code to the open source \\\\n\\r\\n * community in accordance with the GPL Version 2 when your application is \\\\n\\r\\n * distributed. See http://www.gnu.org/copyleft/gpl.html\\r\\n *\\r\\n * \\\\par Description\\r\\n * This file is a drive for Encoder On MeAuriga and MeMegaPi.\\r\\n *\\r\\n * \\\\par Method List:\\r\\n *\\r\\n *    1. void MeEnhanceEncoderOnBoard::pwmMove(uint8_t slot);\\r\\n *\\r\\n * \\\\par History:\\r\\n * <pre>\\r\\n * \\\"<Author>\\\"         \\\"<Time>\\\"        \\\"<Version>\\\"        \\\"<Descr>\\\"\\r\\n * Payton         2017/11/17     1.0.0            Add description\\r\\n * </pre>\\r\\n *\\r\\n */\\r\\n\\r\\n#include \\\"MeEnhanceEncoderOnBoard.h\\\"\\r\\n\\r\\n/**\\n * Alternate Constructor which can call your own function to map the Encoder motor to arduino port,\\n * no pins are used or initialized here.\\n * \\\\param[in]\\n *   None\\n */\\nMeEnhanceEncoderOnBoard::MeEnhanceEncoderOnBoard() : MeEncoderOnBoard(0)\\r\\n{\\n  _mode = DIRECT_MODE;\\r\\n  _targetPwm = 0;\\r\\n  _currentPwm = 0;\\r\\n}\\r\\n\\r\\n/**\\n * Alternate Constructor which can call your own function to map the Encoder motor to arduino port\\n * \\\\param[in]\\n *   slot - megapi slot from SLOT1 to SLOT4(Auriga SLOT1 and SLOT2).\\n */\\nMeEnhanceEncoderOnBoard::MeEnhanceEncoderOnBoard(uint8_t slot) : MeEncoderOnBoard(slot)\\r\\n{\\r\\n  _mode = DIRECT_MODE;\\r\\n  _targetPwm = 0;\\r\\n  _currentPwm = 0;\\r\\n}\\r\\n\\r\\n/**\\n * \\\\par Function\\n *    setEnhanceTarPWM\\r\\n * \\\\par Description\\n *    This function used for set the target pwm value.\\n * \\\\param[in]\\n *    pwm_value - the target pwm value.\\n * \\\\par Output\\n *    None\\n * \\\\par Return\\n *    None\\n * \\\\par Others\\n *    None\\n */\\nvoid MeEnhanceEncoderOnBoard::setTarPWM(int16_t pwm_value)\\r\\n{\\r\\n  _mode = PWM_MODE;\\r\\n  _targetPwm = constrain(pwm_value,-255,255);\\r\\n}\\r\\n\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    enhancePwmMove\\r\\n * \\\\par Description\\r\\n *    This function used for  move with PWM mode.\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\nvoid MeEnhanceEncoderOnBoard::pwmMove(void)\\r\\n{\\r\\n  _currentPwm = getCurPwm();\\r\\n  if(_targetPwm > _currentPwm + ONE_STEP_PWM)\\r\\n  {\\r\\n    _currentPwm += ONE_STEP_PWM;\\r\\n  }\\r\\n  else if(_targetPwm < _currentPwm - ONE_STEP_PWM)\\r\\n  {\\r\\n    _currentPwm -= ONE_STEP_PWM;\\r\\n  }\\r\\n  else\\r\\n  {\\r\\n    _currentPwm = _targetPwm;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\n * \\\\par Function\\n *    loop\\n * \\\\par Description\\n *    This function should be called without Blocked.\\n * \\\\param[in]\\n *    None\\n * \\\\par Output\\n *    None\\n * \\\\par Return\\n *    None\\n * \\\\par Others\\n *    None\\n */\\nvoid MeEnhanceEncoderOnBoard::loop(void)\\r\\n{\\r\\n  updateCurPos();\\r\\n  updateSpeed();\\r\\n\\r\\n  if(millis() - _move_time > 5)\\r\\n  {\\r\\n    _move_time = millis();\\r\\n    if(_mode == PWM_MODE)\\r\\n    {\\r\\n      pwmMove();\\r\\n      setMotorPwm(_currentPwm);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n\" }",
    "{ filename: \"src/MeEnhanceEncoderOnBoard.h\", code: \"/**\\r\\n * \\\\par Copyright (C), 2012-2016, MakeBlock\\r\\n * \\\\class   MeEnhanceEncoderOnBoard\\r\\n * \\\\brief   Driver for Encoder module on MeAuriga and MeMegaPi.\\r\\n * @file    MeEnhanceEncoderOnBoard.h\\r\\n * @author  MakeBlock\\r\\n * @version V1.0.0\\r\\n * @date    2017/11/17\\r\\n * @brief   Header for MeEnhanceEncoderOnBoard.cpp module\\r\\n *\\r\\n * \\\\par Copyright\\r\\n * This software is Copyright (C), 2012-2016, MakeBlock. Use is subject to license \\\\n\\r\\n * conditions. The main licensing options available are GPL V2 or Commercial: \\\\n\\r\\n *\\r\\n * \\\\par Open Source Licensing GPL V2\\r\\n * This is the appropriate option if you want to share the source code of your \\\\n\\r\\n * application with everyone you distribute it to, and you also want to give them \\\\n\\r\\n * the right to share who uses it. If you wish to use this software under Open \\\\n\\r\\n * Source Licensing, you must contribute all your source code to the open source \\\\n\\r\\n * community in accordance with the GPL Version 2 when your application is \\\\n\\r\\n * distributed. See http://www.gnu.org/copyleft/gpl.html\\r\\n *\\r\\n * \\\\par Description\\r\\n * This file is a drive for Encoder On MeAuriga and MeMegaPi.\\r\\n *\\r\\n * \\\\par Method List:\\r\\n *\\r\\n *    1. void MeEnhanceEncoderOnBoard::pwmMove(uint8_t slot);\\r\\n *\\r\\n * \\\\par History:\\r\\n * <pre>\\r\\n * \\\"<Author>\\\"         \\\"<Time>\\\"        \\\"<Version>\\\"        \\\"<Descr>\\\"\\r\\n * Payton        2017/11/17     1.0.0            Build New\\r\\n * </pre>\\r\\n */\\r\\n\\r\\n#ifndef ME_Enhance_Encoder_OnBoard_H\\r\\n#define ME_Enhance_Encoder_OnBoard_H\\r\\n\\r\\n#include <Arduino.h>\\r\\n#include <stdbool.h>\\r\\n#include <avr/interrupt.h>\\r\\n#include <MeEncoderOnBoard.h>\\r\\n\\r\\n//motor once change pwm value\\r\\n#define ONE_STEP_PWM    60\\r\\n\\r\\n/**\\r\\n * Class: MeEnhanceEncoderOnBoard\\r\\n * \\\\par Description\\r\\n * Declaration of Class MeEnhanceEncoderOnBoard\\r\\n */\\r\\nclass MeEnhanceEncoderOnBoard : public MeEncoderOnBoard\\r\\n{\\r\\npublic:\\r\\n/**\\r\\n * Alternate Constructor which can call your own function to map the Encoder motor to arduino port,\\r\\n * no pins are used or initialized here.\\r\\n * \\\\param[in]\\r\\n *\\t None\\r\\n */\\r\\n\\tMeEnhanceEncoderOnBoard();\\r\\n\\r\\n/**\\r\\n * Alternate Constructor which can call your own function to map the Encoder motor to arduino port\\r\\n * \\\\param[in]\\r\\n *\\t slot - megapi slot from SLOT1 to SLOT4(Auriga SLOT1 and SLOT2).\\r\\n */\\r\\n\\tMeEnhanceEncoderOnBoard(uint8_t slot);\\r\\n\\r\\n/**\\r\\n * \\\\par Function\\r\\n *\\t\\tsetTarPWM\\r\\n * \\\\par Description\\r\\n *\\t\\tThis function used for set the target pwm value.\\r\\n * \\\\param[in]\\r\\n *\\t\\tpwm_value - the target pwm value.\\r\\n * \\\\par Output\\r\\n *\\t\\tNone\\r\\n * \\\\par Return\\r\\n *\\t\\tNone\\r\\n * \\\\par Others\\r\\n *\\t\\tNone\\r\\n */\\r\\nvoid setTarPWM(int16_t pwm_value);\\r\\n\\r\\n/**\\r\\n * \\\\par Function\\r\\n *    pwmMove\\r\\n * \\\\par Description\\r\\n *    This function used for move with PWM mode.\\r\\n * \\\\param[in]\\r\\n *    None\\r\\n * \\\\par Output\\r\\n *    None\\r\\n * \\\\par Return\\r\\n *    None\\r\\n * \\\\par Others\\r\\n *    None\\r\\n */\\r\\n  void pwmMove(void);\\r\\n\\r\\n/**\\r\\n * \\\\par Function\\r\\n *\\t\\tloop\\r\\n * \\\\par Description\\r\\n *\\t\\tThis function should be called without Blocked.\\r\\n * \\\\param[in]\\r\\n *\\t\\tNone\\r\\n * \\\\par Output\\r\\n *\\t\\tNone\\r\\n * \\\\par Return\\r\\n *\\t\\tNone\\r\\n * \\\\par Others\\r\\n *\\t\\tNone\\r\\n */\\r\\nvoid loop(void);\\r\\n\\r\\n\\r\\nprivate:\\r\\n  uint8_t _mode;\\r\\n  int16_t _targetPwm;\\r\\n  int16_t _currentPwm;\\r\\n  long _move_time;\\r\\n\\r\\n};\\r\\n#endif\\r\\n\\r\\n\\r\\n\\r\\n\" }"
];