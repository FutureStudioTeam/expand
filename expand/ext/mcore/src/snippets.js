export default [
    "arduinoc: {\n    \"MeLEDMatrix\": {\n        \"prefix\": \"MeLEDMatrix\",\n        \"body\": \"MeLEDMatrix\",\n        \"kind\": 5\n    },\n    \"MeLEDMatrix_Port\": {\n        \"prefix\": \"MeLEDMatrix_Port\",\n        \"body\": \"MeLEDMatrix ledMtx_${1|1,2,3,4|}(${1|1,2,3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the LED Matrix to arduino port,if the hardware serial was selected, we will used the hardware serial.\",\n        \"kind\": 25\n    },\n    \"MeLEDMatrix::clearScreen\": {\n        \"prefix\": \"MeLEDMatrix::clearScreen\",\n        \"body\": \"clearScreen()\",\n        \"description\": \"Clear the screen.\",\n        \"kind\": 1\n    },\n    \"MeLEDMatrix::setBrightness\": {\n        \"prefix\": \"MeLEDMatrix::setBrightness\",\n        \"body\": \"setBrightness(${1:6})\",\n        \"description\": \"Set the brightness of LED Matrix.\",\n        \"kind\": 1\n    },\n    \"MeLEDMatrix::setColorIndex\": {\n        \"prefix\": \"MeLEDMatrix::setColorIndex\",\n        \"body\": \"setColorIndex(${1:1})\",\n        \"description\": \"Set the color index for LED Matrix.\",\n        \"kind\": 1\n    },\n    \"MeLEDMatrix::drawBitmap\": {\n        \"prefix\": \"MeLEDMatrix::drawBitmap\",\n        \"body\": \"drawBitmap(${1:x}, ${2:y}, ${3:Bitmap_Width}, ${4:Bitmap})\",\n        \"description\": \"Draw a bitmap.\",\n        \"kind\": 1\n    },\n    \"MeLEDMatrix::drawStr\": {\n        \"prefix\": \"MeLEDMatrix::drawStr\",\n        \"body\": \"drawStr(${1:x}, ${2:y}, ${3:string})\",\n        \"description\": \"Draw a string.\",\n        \"kind\": 1\n    },\n    \"MeLEDMatrix::showClock\": {\n        \"prefix\": \"MeLEDMatrix::showClock\",\n        \"body\": \"showClock(${1:hour}, ${2:minute}, true)\",\n        \"description\": \"Show the clock on LED Matrix.\",\n        \"kind\": 1\n    },\n    \"MeLEDMatrix::showNum\": {\n        \"prefix\": \"MeLEDMatrix::showNum\",\n        \"body\": \"showNum(${1:value}, ${2:3})\",\n        \"description\": \"Show the number on LED Matrix.\",\n        \"kind\": 1\n    },\n    \"MeRGBLed\": {\n        \"prefix\": \"MeRGBLed\",\n        \"body\": \"MeRGBLed\",\n        \"kind\": 5\n    },\n    \"MeRGBLed_Board\": {\n        \"prefix\": \"MeRGBLed_Board\",\n        \"body\": \"MeRGBLed rgbled_7(7, 2);\",\n        \"description\": \"Alternate Constructor which can call your own function to map the MeRGBLed to arduino port,it will assigned the LED display buffer and initialization the GPIO of LED lights. The slot2 will be used here, and the default number of light strips is 32.\",\n        \"kind\": 25\n    },\n    \"MeRGBLed::setColorWithHex\": {\n        \"prefix\": \"MeRGBLed::setColorWithHex\",\n        \"body\": \"setColor(${1:Led_Number}, ${2:value})\",\n        \"description\": \"Set the LED color for any LED.\",\n        \"kind\": 1\n    },\n    \"MeRGBLed::setColorWithRGB\": {\n        \"prefix\": \"MeRGBLed::setColorWithRGB\",\n        \"body\": \"setColor(${1:Led_Number}, ${2:red}, ${3:green}, ${4:blue})\",\n        \"description\": \"Set the LED color for any LED.\",\n        \"kind\": 1\n    },\n    \"MeRGBLed::show\": {\n        \"prefix\": \"MeRGBLed::show\",\n        \"body\": \"show()\",\n        \"description\": \"Transmission the data to WS2812.\",\n        \"kind\": 1\n    },\n    \"MeBuzzer\": {\n        \"prefix\": \"MeBuzzer\",\n        \"body\": \"MeBuzzer\",\n        \"kind\": 5\n    },\n    \"MeBuzzer::MeBuzzer\": {\n        \"prefix\": \"MeBuzzer\",\n        \"body\": \"MeBuzzer buzzer;\",\n        \"description\": \"Alternate Constructor which can call your own function to map the Buzzer to arduino port,Buzzer pins are used and initialized here.\",\n        \"kind\": 25\n    },\n    \"MeBuzzer::tone\": {\n        \"prefix\": \"MeBuzzer::tone\",\n        \"body\": \"tone(${1:frequency}, ${2:duration})\",\n        \"description\": \"Playing the tones.\",\n        \"kind\": 1\n    },\n    \"MeDCMotor\": {\n        \"prefix\": \"MeDCMotor\",\n        \"body\": \"MeDCMotor\",\n        \"kind\": 5\n    },\n    \"MeDCMotor_Board\": {\n        \"prefix\": \"MeDCMotor_Board\",\n        \"body\": \"MeDCMotor motor_${1|9,10|}(${1|9,10|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the DC motor to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeDCMotor::run\": {\n        \"prefix\": \"MeDCMotor::run\",\n        \"body\": \"run(${1:speed})\",\n        \"description\": \"Control the motor forward or reverse.\",\n        \"kind\": 1\n    },\n    \"MeLightSensor\": {\n        \"prefix\": \"MeLightSensor\",\n        \"body\": \"MeLightSensor\",\n        \"kind\": 5\n    },\n    \"MeLightSensor_Board\": {\n        \"prefix\": \"MeLightSensor_Board\",\n        \"body\": \"MeLightSensor lightsensor_6(6);\",\n        \"description\": \"Alternate Constructor which can call your own function to map the light sensor to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeLightSensor_Port\": {\n        \"prefix\": \"MeLightSensor_Port\",\n        \"body\": \"MeLightSensor lightsensor_${1|3,4|}(${1|3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the light sensor to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeLightSensor::read\": {\n        \"prefix\": \"MeLightSensor::read\",\n        \"body\": \"read()\",\n        \"description\": \"Read analog value of light sensor.\",\n        \"kind\": 1\n    },\n    \"MeUltrasonicSensor\": {\n        \"prefix\": \"MeUltrasonicSensor\",\n        \"body\": \"MeUltrasonicSensor\",\n        \"kind\": 5\n    },\n    \"MeUltrasonicSensor_Port\": {\n        \"prefix\": \"MeUltrasonicSensor_Port\",\n        \"body\": \"MeUltrasonicSensor ultrasonic_${1|1,2,3,4|}(${1|1,2,3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the ultrasonic Sensor to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeUltrasonicSensor::distanceCm\": {\n        \"prefix\": \"MeUltrasonicSensor::distanceCm\",\n        \"body\": \"distanceCm()\",\n        \"description\": \"Centimeters return the distance.\",\n        \"kind\": 1\n    },\n    \"MeLineFollower\": {\n        \"prefix\": \"MeLineFollower\",\n        \"body\": \"MeLineFollower\",\n        \"kind\": 5\n    },\n    \"MeLineFollower_Port\": {\n        \"prefix\": \"MeLineFollower_Port\",\n        \"body\": \"MeLineFollower linefollower_${1|1,2,3,4|}(${1|1,2,3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the line follwer device to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeLineFollower::readSensors\": {\n        \"prefix\": \"MeLineFollower::readSensors\",\n        \"body\": \"readSensors()\",\n        \"description\": \"Get the sensors state.\",\n        \"kind\": 1\n    },\n    \"MeIR\": {\n        \"prefix\": \"MeIR\",\n        \"body\": \"MeIR\",\n        \"kind\": 5\n    },\n    \"MeIR_Constructor\": {\n        \"prefix\": \"MeIR\",\n        \"body\": \"MeIR ir;\",\n        \"description\": \"Alternate Constructor which can call your own function to map the IR to arduino port,no pins are used or initialized here.\",\n        \"kind\": 25\n    },\n    \"MeIR::begin\": {\n        \"prefix\": \"MeIR::begin\",\n        \"body\": \"begin()\",\n        \"description\": \"Initialize interrupt.\",\n        \"kind\": 1\n    },\n    \"MeIR::getString\": {\n        \"prefix\": \"MeIR::getString\",\n        \"body\": \"getString()\",\n        \"description\": \"Get string in a INTR.\",\n        \"kind\": 1\n    },\n    \"MeIR::sendString\": {\n        \"prefix\": \"MeIR::sendString\",\n        \"body\": \"sendString('${1:string}')\",\n        \"description\": \"Send data.\",\n        \"kind\": 1\n    },\n    \"MeIR::loop\": {\n        \"prefix\": \"MeIR::loop\",\n        \"body\": \"loop()\",\n        \"description\": \"A circle of operation.\",\n        \"kind\": 1\n    },\n    \"MeIR::keyPressed\": {\n        \"prefix\": \"MeIR::keyPressed\",\n        \"body\": \"keyPressed(${1:key})\",\n        \"description\": \"Press key.\",\n        \"kind\": 1\n    },\n    \"include_MeMCore\": {\n        \"prefix\": \"include_MeMCore\",\n        \"body\": \"#include <MeMCore.h>\",\n        \"description\": \"The Hardware adaptation layer between Mbot board and all MakeBlock drives.\",\n        \"kind\": 25\n    },\n    \"Me7SegmentDisplay\": {\n        \"prefix\": \"Me7SegmentDisplay\",\n        \"body\": \"Me7SegmentDisplay\",\n        \"kind\": 5\n    },\n    \"Me7SegmentDisplay_Port\": {\n        \"prefix\": \"Me7SegmentDisplay_Port\",\n        \"body\": \"Me7SegmentDisplay seg7_${1|1,2,3,4|}(${1|1,2,3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the 7-Segment display to arduino port,the slot1 will be used for data pin and slot2 will used for clk pin.\",\n        \"kind\": 25\n    },\n    \"Me7SegmentDisplay::display\": {\n        \"prefix\": \"Me7SegmentDisplay::display\",\n        \"body\": \"display(${1:value})\",\n        \"description\": \"Display certain value, and this value type is uint16_t.\",\n        \"kind\": 1\n    },\n    \"MePort\": {\n        \"prefix\": \"MePort\",\n        \"body\": \"MePort\",\n        \"kind\": 5\n    },\n    \"MePort_Constructor\": {\n        \"prefix\": \"MePort\",\n        \"body\": \"MePort port_${1|1,2,3,4|}(${1|1,2,3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the MePort to arduino port,no pins are used or initialized here, but PWM frequency set to 976 Hz.\",\n        \"kind\": 25\n    },\n    \"MePort::pin\": {\n        \"prefix\": \"MePort::pin_Slot\",\n        \"body\": \"pin${1|1,2|}()\",\n        \"description\": \"Return the arduino pin number of current RJ25 object's slot1 or slot2\",\n        \"kind\": 1\n    },\n    \"Servo\": {\n        \"prefix\": \"Servo\",\n        \"body\": \"Servo\",\n        \"kind\": 5\n    },\n    \"Servo_Port_Slot\": {\n        \"prefix\": \"Servo_Port_Slot\",\n        \"body\": \"Servo servo_${1|1,2,3,4|}_${2|1,2|};\",\n        \"description\": \"Allows MeAuriga board to control RC (hobby) servo motors.\",\n        \"kind\": 25\n    },\n    \"Servo::attach\": {\n        \"prefix\": \"Servo::attach\",\n        \"body\": \"attach(${1:pin})\",\n        \"description\": \"Attach the Servo variable to a pin.\",\n        \"kind\": 1\n    },\n    \"Servo::write\": {\n        \"prefix\": \"Servo::write\",\n        \"body\": \"write(${1:angle})\",\n        \"description\": \"Writes a value to the servo, controlling the shaft accordingly.\",\n        \"kind\": 1\n    },\n    \"MeRGBLed_Port\": {\n        \"prefix\": \"MeRGBLed_Port\",\n        \"body\": \"MeRGBLed rgbled_${1|1,2,3,4|}(${1|1,2,3,4|}, ${2:led_num});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the MeRGBLed to arduino port,it will assigned the LED display buffer and initialization the GPIO of LED lights. The slot2 will be used here, and the default number of light strips is 32.\",\n        \"kind\": 25\n    },\n    \"MeSoundSensor\": {\n        \"prefix\": \"MeSoundSensor\",\n        \"body\": \"MeSoundSensor\",\n        \"kind\": 5\n    },\n    \"MeSoundSensor_Port\": {\n        \"prefix\": \"MeSoundSensor_Port\",\n        \"body\": \"MeSoundSensor soundsensor_${1|3,4|}(${1|3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the Sound Sensor to arduino port\",\n        \"kind\": 25\n    },\n    \"MeSoundSensor::strength\": {\n        \"prefix\": \"MeSoundSensor::strength\",\n        \"body\": \"strength()\",\n        \"description\": \"Read and return the sensor value.\",\n        \"kind\": 1\n    },\n    \"MeTemperature\": {\n        \"prefix\": \"MeTemperature\",\n        \"body\": \"MeTemperature\",\n        \"kind\": 5\n    },\n    \"MeTemperature_Port_Slot\": {\n        \"prefix\": \"MeTemperature_Port_Slot\",\n        \"body\": \"MeTemperature temperature_${1|1,2,3,4|}_${2|1,2|}(${1|1,2,3,4|}, ${2|1,2|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the temperature sensor to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeTemperature::temperature\": {\n        \"prefix\": \"MeTemperature::temperature\",\n        \"body\": \"temperature()\",\n        \"description\": \"Get the celsius of temperature\",\n        \"kind\": 1\n    },\n    \"MePotentiometer\": {\n        \"prefix\": \"MePotentiometer\",\n        \"body\": \"MePotentiometer\",\n        \"kind\": 5\n    },\n    \"MePotentiometer_Port\": {\n        \"prefix\": \"MePotentiometer_Port\",\n        \"body\": \"MePotentiometer potentiometer_${1|3,4|}(${1|3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the Me potentiometer device to arduino port.\",\n        \"kind\": 25\n    },\n    \"MePotentiometer::read\": {\n        \"prefix\": \"MePotentiometer::read\",\n        \"body\": \"read()\",\n        \"description\": \"Read DAC value of Me potentiometer module.\",\n        \"kind\": 1\n    }\n}"
];