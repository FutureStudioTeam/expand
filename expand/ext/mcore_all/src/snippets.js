export default [
    "arduinoc: {\n    \"MeShutter\": {\n        \"prefix\": \"MeShutter\",\n        \"body\": \"MeShutter\",\n        \"kind\": 5\n    },\n    \"MeShutter_Port\": {\n        \"prefix\": \"MeShutter_Port\",\n        \"body\": \"MeShutter shutter_${1|1,2,3,4|}(${1|1,2,3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the MeShutter to arduino port,and the shot and focus PIN will be set LOW\",\n        \"kind\": 25\n    },\n    \"MeShutter::setState\": {\n        \"prefix\": \"MeShutter::setState\",\n        \"body\": \"setState(${1|1,0,3,2|})\",\n        \"description\": \"Set shutter device's work state.state - 0:shotOff, 1:shotOn, 2:focusOff, 3:focusOn\",\n        \"kind\": 1\n    },\n    \"MeRGBLed_Strip\": {\n        \"prefix\": \"MeRGBLed_Strip\",\n        \"body\": \"MeRGBLed rgbled_${1|1,2,3,4|}_${2|1,2|}(${1|1,2,3,4|}, ${2|1,2|}, ${3:led_num});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the MeRGBLed to arduino port,it will assigned the LED display buffer and initialization the GPIO of LED lights.You can set any slot for the LED data PIN, and reset the LED number by this constructor.\",\n        \"kind\": 25\n    },\n    \"MeHumiture\": {\n        \"prefix\": \"MeHumiture\",\n        \"body\": \"MeHumiture\",\n        \"kind\": 5\n    },\n    \"MeHumiture_Port\": {\n        \"prefix\": \"MeHumiture_Port\",\n        \"body\": \"MeHumiture humiture_${1|1,2,3,4|}(${1|1,2,3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the temperature sensor to arduino port,the slot2 pin will be used here since specify slot is not be set.\",\n        \"kind\": 25\n    },\n    \"MeHumiture::update\": {\n        \"prefix\": \"MeHumiture::update\",\n        \"body\": \"update()\",\n        \"description\": \"Use this function to update the sensor data\",\n        \"kind\": 1\n    },\n    \"MeHumiture::getValue\": {\n        \"prefix\": \"MeHumiture::getValue_TEMP_HUMITURE\",\n        \"body\": \"getValue(${1|0,1|})\",\n        \"description\": \"Use this function to Get the Temperature data or Humidity data.index - The value '0' means get the value of Humidity data and '1' used to get the Temperature data.\",\n        \"kind\": 1\n    },\n    \"MeTouchSensor\": {\n        \"prefix\": \"MeTouchSensor\",\n        \"body\": \"MeTouchSensor\",\n        \"kind\": 5\n    },\n    \"MeTouchSensor_Port\": {\n        \"prefix\": \"MeTouchSensor_Port\",\n        \"body\": \"MeTouchSensor touchSensor_${1|1,2,3,4|}(${1|1,2,3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the touch Sensor to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeTouchSensor::touched\": {\n        \"prefix\": \"MeTouchSensor::touched\",\n        \"body\": \"touched()\",\n        \"description\": \"Read and return the output signal.\",\n        \"kind\": 1\n    },\n    \"MeCompass\": {\n        \"prefix\": \"MeCompass\",\n        \"body\": \"MeCompass\",\n        \"kind\": 5\n    },\n    \"MeCompass_Port\": {\n        \"prefix\": \"MeCompass_Port\",\n        \"body\": \"MeCompass compass_${1|1,2,3,4|}(${1|1,2,3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the MeCompass to arduino port,no pins are used or initialized here, but PWM frequency set to 976 Hz.\",\n        \"kind\": 25\n    },\n    \"MeCompass::begin\": {\n        \"prefix\": \"MeCompass::begin\",\n        \"body\": \"begin()\",\n        \"description\": \"Initialize the MeCompass.\",\n        \"kind\": 1\n    },\n    \"MeCompass::getAngle\": {\n        \"prefix\": \"MeCompass::getAngle\",\n        \"body\": \"getAngle()\",\n        \"description\": \"Calculate the yaw angle by the calibrated sensor value.\",\n        \"kind\": 1\n    },\n    \"MeFlameSensor\": {\n        \"prefix\": \"MeFlameSensor\",\n        \"body\": \"MeFlameSensor\",\n        \"kind\": 5\n    },\n    \"MeFlameSensor_Port\": {\n        \"prefix\": \"MeFlameSensor_Port\",\n        \"body\": \"MeFlameSensor flameSensor_${1|3,4|}(${1|3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the flame snesor to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeFlameSensor::readAnalog\": {\n        \"prefix\": \"MeFlameSensor::readAnalog\",\n        \"body\": \"readAnalog()\",\n        \"description\": \"Read the analog signal of flame snesor.\",\n        \"kind\": 1\n    },\n    \"MeGasSensor\": {\n        \"prefix\": \"MeGasSensor\",\n        \"body\": \"MeGasSensor\",\n        \"kind\": 5\n    },\n    \"MeGasSensor_Port\": {\n        \"prefix\": \"MeGasSensor\",\n        \"body\": \"MeGasSensor gasSensor_${1|3,4|}(${1|3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the gas snesor to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeGasSensor::readAnalog\": {\n        \"prefix\": \"MeGasSensor::readAnalog\",\n        \"body\": \"readAnalog()\",\n        \"description\": \"Read the analog signal of gas snesor.\",\n        \"kind\": 1\n    },\n    \"MeGyro\": {\n        \"prefix\": \"MeGyro\",\n        \"body\": \"MeGyro\",\n        \"kind\": 5\n    },\n    \"MeGyro_Board\": {\n        \"prefix\": \"MeGyro_Board\",\n        \"body\": \"MeGyro gyro;\",\n        \"description\": \"Alternate Constructor which can call your own function to map the MeGyro to arduino port,no pins are used or initialized here.\",\n        \"kind\": 25\n    },\n    \"MeGyro::begin\": {\n        \"prefix\": \"MeGyro::begin\",\n        \"body\": \"begin()\",\n        \"description\": \"Initialize the MeGyro.\",\n        \"kind\": 1\n    },\n    \"MeGyro::update\": {\n        \"prefix\": \"MeGyro::update\",\n        \"body\": \"update()\",\n        \"description\": \"Update some calculated angle values to the variable.\",\n        \"kind\": 1\n    },\n    \"MeGyro::getAngle\": {\n        \"prefix\": \"MeGyro::getAngle_axis\",\n        \"body\": \"getAngle(${1|1,2,3|})\",\n        \"description\": \"Get the angle value of setting axis.Axis settings(1:X-axis, 2:Y-axis, 3:Z-axis)\",\n        \"kind\": 1\n    },\n    \"MePIRMotionSensor\": {\n        \"prefix\": \"MePIRMotionSensor\",\n        \"body\": \"MePIRMotionSensor\",\n        \"kind\": 5\n    },\n    \"MePIRMotionSensor::MePIRMotionSensor\": {\n        \"prefix\": \"MePIRMotionSensor\",\n        \"body\": \"MePIRMotionSensor pir_${1|1,2,3,4|}(${1|1,2,3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the gas snesor to arduino port.\",\n        \"kind\": 25\n    },\n    \"MePIRMotionSensor::isHumanDetected\": {\n        \"prefix\": \"MePIRMotionSensor::isHumanDetected\",\n        \"body\": \"isHumanDetected()\",\n        \"description\": \"Is human been detected.\",\n        \"kind\": 1\n    },\n    \"Me4Button\": {\n        \"prefix\": \"Me4Button\",\n        \"body\": \"Me4Button\",\n        \"kind\": 5\n    },\n    \"Me4Button_Port\": {\n        \"prefix\": \"Me4Button_Port\",\n        \"body\": \"Me4Button buttonSensor_${1|3,4|}(${1|3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the Me4Button to arduino port,the slot2 pin will be used for key pin.\",\n        \"kind\": 25\n    },\n    \"Me4Button::pressed\": {\n        \"prefix\": \"Me4Button::pressed\",\n        \"body\": \"pressed()\",\n        \"description\": \"Read key ADC value to a variable.\",\n        \"kind\": 1\n    },\n    \"MeLimitSwitch\": {\n        \"prefix\": \"MeLimitSwitch\",\n        \"body\": \"MeLimitSwitch\",\n        \"kind\": 5\n    },\n    \"MeLimitSwitch_Port_Slot\": {\n        \"prefix\": \"MeLimitSwitch_Port_Slot\",\n        \"body\": \"MeLimitSwitch sw_${1|1,2,3,4|}_${2|1,2|}(${1|1,2,3,4|}, ${2|1,2|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the limit switch to arduino port,you can set any slot for the limit switch device.\",\n        \"kind\": 25\n    },\n    \"MeLimitSwitch::touched\": {\n        \"prefix\": \"MeLimitSwitch::touched\",\n        \"body\": \"touched()\",\n        \"description\": \"Get switch value from selected _slot defined by MePort.\",\n        \"kind\": 1\n    },\n    \"MeJoystick\": {\n        \"prefix\": \"MeJoystick\",\n        \"body\": \"MeJoystick\",\n        \"kind\": 5\n    },\n    \"MeJoystick_Port\": {\n        \"prefix\": \"MeJoystick_Port\",\n        \"body\": \"MeJoystick joystick_${1|3,4|}(${1|3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the MeJoystick to arduino port.\",\n        \"kind\": 25\n    },\n    \"MeJoystick::read\": {\n        \"prefix\": \"MeJoystick::read_axis\",\n        \"body\": \"read(${1|1,2|})\",\n        \"description\": \"Get the value of setting axis.axis - '1' for X-axis and '2' for Y-axis\",\n        \"kind\": 1\n    },\n    \"MeInfraredReceiver\": {\n        \"prefix\": \"MeInfraredReceiver\",\n        \"body\": \"MeInfraredReceiver\",\n        \"kind\": 5\n    },\n    \"MeInfraredReceiver_Port\": {\n        \"prefix\": \"MeInfraredReceiver_Port\",\n        \"body\": \"MeInfraredReceiver ir_${1|1,2,3,4|}(${1|1,2,3,4|});\",\n        \"description\": \"Alternate Constructor which can call your own function to map the Infrared Receiver to arduino port,If the hardware serial was selected, we will used the hardware serial.\",\n        \"kind\": 25\n    },\n    \"MeInfraredReceiver::begin\": {\n        \"prefix\": \"MeInfraredReceiver::begin\",\n        \"body\": \"begin()\",\n        \"description\": \"Sets the speed (baud rate) for the serial communication.\",\n        \"kind\": 1\n    },\n    \"MeInfraredReceiver::getCode\": {\n        \"prefix\": \"MeInfraredReceiver::getCode\",\n        \"body\": \"getCode()\",\n        \"description\": \"Get the button code.\",\n        \"kind\": 1\n    },\n    \"MeInfraredReceiver::loop\": {\n        \"prefix\": \"MeInfraredReceiver::loop\",\n        \"body\": \"loop()\",\n        \"description\": \"This function used with getCode, it should called in the main loop.\",\n        \"kind\": 1\n    }\n}"
];