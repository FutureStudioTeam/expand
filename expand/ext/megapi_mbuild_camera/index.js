(function(global,factory){if("function"==typeof define&&define.amd)define(["exports"],factory);else if("undefined"!=typeof exports)factory(exports);else{var mod={exports:{}};factory(mod.exports),global.unknown=mod.exports}})("undefined"==typeof globalThis?"undefined"==typeof self?this:self:globalThis,function(_exports){"use strict";function _defineProperties(target,props){for(var i=0,descriptor;i<props.length;i++)descriptor=props[i],descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var normalCompletion=!0,didErr=!1,err;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _classCallCheck(instance,Constructor){if(!_instanceof(instance,Constructor))throw new TypeError("Cannot call a class as a function")}function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_unsupportedIterableToArray(arr)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}var gen=fn.apply(self,args);_next(void 0)})}}function _instanceof(left,right){return null!=right&&"undefined"!=typeof Symbol&&right[Symbol.hasInstance]?!!right[Symbol.hasInstance](left):left instanceof right}function _typeof(obj){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,!function(global){function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&_instanceof(outerFn.prototype,Generator)?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return generator._invoke=makeInvokeMethod(innerFn,self,context),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}function defineIteratorMethods(prototype){["next","throw","return"].forEach(function(method){prototype[method]=function(arg){return this._invoke(method,arg)}})}function AsyncIterator(generator){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"===record.type)reject(record.arg);else{var result=record.arg,value=result.value;return value&&"object"===_typeof(value)&&hasOwn.call(value,"__await")?Promise.resolve(value.__await).then(function(value){invoke("next",value,resolve,reject)},function(err){invoke("throw",err,resolve,reject)}):Promise.resolve(value).then(function(unwrapped){result.value=unwrapped,resolve(result)},function(error){return invoke("throw",error,resolve,reject)})}}function enqueue(method,arg){function callInvokeWithMethodAndArg(){return new Promise(function(resolve,reject){invoke(method,arg,resolve,reject)})}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}var previousPromise;this._invoke=enqueue}function makeInvokeMethod(innerFn,self,context){var state="suspendedStart";return function(method,arg){if(state==="executing")throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult()}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg)}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done}}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg)}}}function maybeInvokeDelegate(delegate,context){var method=delegate.iterator[context.method];if(void 0===method){if(context.delegate=null,"throw"===context.method){if(delegate.iterator.return&&(context.method="return",context.arg=void 0,maybeInvokeDelegate(delegate,context),"throw"===context.method))return ContinueSentinel;context.method="throw",context.arg=new TypeError("The iterator does not provide a 'throw' method")}return ContinueSentinel}var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;if(!info)return context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel;if(info.done)context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=void 0);else return info;return context.delegate=null,ContinueSentinel}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=void 0,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:void 0,done:!0}}var Op=Object.prototype,hasOwn=Op.hasOwnProperty,$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag",inModule="object"===("undefined"==typeof module?"undefined":_typeof(module)),runtime=global.regeneratorRuntime;if(runtime)return void(inModule&&(module.exports=runtime));runtime=global.regeneratorRuntime=inModule?module.exports||{}:{},runtime.wrap=wrap;var ContinueSentinel={},IteratorPrototype={};IteratorPrototype[iteratorSymbol]=function(){return this};var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);GeneratorFunction.prototype=Gp.constructor=GeneratorFunctionPrototype,GeneratorFunctionPrototype.constructor=GeneratorFunction,GeneratorFunctionPrototype[toStringTagSymbol]=GeneratorFunction.displayName="GeneratorFunction",runtime.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name))},runtime.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,!(toStringTagSymbol in genFun)&&(genFun[toStringTagSymbol]="GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun},runtime.awrap=function(arg){return{__await:arg}},defineIteratorMethods(AsyncIterator.prototype),AsyncIterator.prototype[asyncIteratorSymbol]=function(){return this},runtime.AsyncIterator=AsyncIterator,runtime.async=function(innerFn,outerFn,self,tryLocsList){var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList));return runtime.isGeneratorFunction(outerFn)?iter:iter.next().then(function(result){return result.done?result.value:iter.next()})},defineIteratorMethods(Gp),Gp[toStringTagSymbol]="Generator",Gp[iteratorSymbol]=function(){return this},Gp.toString=function(){return"[object Generator]"},runtime.keys=function(object){var keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},runtime.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=void 0)},stop:function stop(){this.done=!0;var rootEntry=this.tryEntries[0],rootRecord=rootEntry.completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function dispatchException(exception){function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=void 0),!!caught}if(this.done)throw exception;for(var context=this,i=this.tryEntries.length-1;0<=i;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);}else if(!hasFinally)throw new Error("try statement without catch or finally");else if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1,entry;0<=i;--i)if(entry=this.tryEntries[i],entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record)},complete:function complete(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1,entry;0<=i;--i)if(entry=this.tryEntries[i],entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel},catch:function _catch(tryLoc){for(var i=this.tryEntries.length-1,entry;0<=i;--i)if(entry=this.tryEntries[i],entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}throw new Error("illegal catch attempt")},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=void 0),ContinueSentinel}}}(function(){return this||"object"===("undefined"==typeof self?"undefined":_typeof(self))&&self}()||Function("return this")());var disableBlocks={debug:["megapi_mbuild_camera.megapi_camera_switch_color_mode","megapi_mbuild_camera.megapi_camera_recognize_color","megapi_mbuild_camera.megapi_camera_center_saturation","megapi_mbuild_camera.megapi_camera_get_color","megapi_mbuild_camera.megapi_camera_color_in_center","megapi_mbuild_camera.megapi_camera_color_coordinate","megapi_mbuild_camera.megapi_camera_turn_on_light","megapi_mbuild_camera.megapi_camera_set_white_balance","megapi_mbuild_camera.megapi_camera_switch_line_qrcode_mode","megapi_mbuild_camera.megapi_camera_get_qrcode_move","megapi_mbuild_camera.megapi_camera_get_qrcode_coordinate","megapi_mbuild_camera.megapi_camera_line_start_coordinate","megapi_mbuild_camera.megapi_camera_get_cross","megapi_mbuild_camera.megapi_camera_corss_coordinate","megapi_mbuild_camera.megapi_camera_get_branch_num","megapi_mbuild_camera.megapi_camera_get_branch_angle","megapi_mbuild_camera.megapi_camera_set_line_mode","megapi_mbuild_camera.megapi_camera_1566200454757","megapi_mbuild_camera.megapi_camera_1566200474887","megapi_mbuild_camera.megapi_camera_set_kp","megapi_mbuild_camera.megapi_camera_follow_color","megapi_mbuild_camera.megapi_camera_follow_qrcode","megapi_mbuild_camera.megapi_camera_get_diff_speed","megapi_mbuild_camera.megapi_camera_lock_color","megapi_mbuild_camera.megapi_camera_lock_qrcode"],upload:[]},mustLoginBlocks=[],triggerBlocksStatus=function(){var _ref=_asyncToGenerator(regeneratorRuntime.mark(function _callee(mode,app){var _app$workspace,_app$workspace2,_app$workspace3,_app$workspace4,_app$workspace5,_app$workspace6,service,isLogin,_app$workspace7;return regeneratorRuntime.wrap(function(_context){for(;;)switch(_context.prev=_context.next){case 0:if(_context.prev=0,!(app&&app.workspace)){_context.next=8;break}return"debug"===mode?((_app$workspace=app.workspace).enableBlocks.apply(_app$workspace,_toConsumableArray(disableBlocks.upload)),(_app$workspace2=app.workspace).disableBlocks.apply(_app$workspace2,_toConsumableArray(disableBlocks.debug))):"upload"===mode?((_app$workspace3=app.workspace).enableBlocks.apply(_app$workspace3,_toConsumableArray(disableBlocks.debug)),(_app$workspace4=app.workspace).disableBlocks.apply(_app$workspace4,_toConsumableArray(disableBlocks.upload))):((_app$workspace5=app.workspace).enableBlocks.apply(_app$workspace5,_toConsumableArray(disableBlocks.upload)),(_app$workspace6=app.workspace).enableBlocks.apply(_app$workspace6,_toConsumableArray(disableBlocks.debug))),service=app.getService("account"),_context.next=6,service.isLogin();case 6:isLogin=_context.sent,isLogin||(_app$workspace7=app.workspace).disableBlocks.apply(_app$workspace7,mustLoginBlocks);case 8:_context.next=13;break;case 10:_context.prev=10,_context.t0=_context["catch"](0);case 13:case"end":return _context.stop();}},_callee,null,[[0,10]])}));return function(){return _ref.apply(this,arguments)}}(),extTranslationMap={zh:{megapi_mbuild_camera:"\u89C6\u89C9\u6A21\u5757",extensionName:"\u89C6\u89C9\u6A21\u5757",extensionDescription:"megapi\u7684\u89C6\u89C9\u6A21\u5757\u6269\u5C55",megapi_1566200222835:"\u67E5\u770B\u6444\u50CF\u5934\u753B\u9762",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"\u63A5\u53E36",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"\u63A5\u53E37",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"\u63A5\u53E38",megapi_camera_switch_color_mode:"\u89C6\u89C9\u6A21\u5757 [PORT]  \u5207\u6362\u5230\u8272\u5757\u8BC6\u522B\u6A21\u5F0F ",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"\u89C6\u89C9\u6A21\u5757 [PORT] \u5F00\u59CB\u5B66\u4E60\u8272\u5757 [SIG] \u76F4\u5230\u5B66\u4E60\u6309\u94AE\u6309\u4E0B",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"\u4E2D\u5FC3",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"\u5E73\u5747",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"\u9971\u548C\u5EA6",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R\u503C",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G\u503C",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B\u503C",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"\u7070\u5EA6",megapi_camera_center_saturation:"\u89C6\u89C9\u6A21\u5757 [fieldMenu_1]   \u753B\u9762 [fieldMenu_2] \u7684 [fieldMenu_1] ",megapi_camera_get_color:"\u89C6\u89C9\u6A21\u5757 [PORT]  \u8BC6\u522B\u5230\u8272\u5757 [SIG] \uFF1F",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"\u4E2D\u592E",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"\u4E0A\u65B9",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"\u4E0B\u65B9",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"\u5DE6\u8FB9",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"\u53F3\u8FB9",megapi_camera_color_in_center:"\u89C6\u89C9\u6A21\u5757 [PORT]   \u8BC6\u522B\u5230\u8272\u5757 [SIG] \u4F4D\u4E8E\u753B\u9762 [LOCATION] \uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x \u5750\u6807",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y \u5750\u6807",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"\u5BBD\u5EA6",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"\u9AD8\u5EA6",megapi_camera_color_coordinate:"\u89C6\u89C9\u6A21\u5757 [PORT]  \u8BC6\u522B\u5230\u8272\u5757 [SIG] \u7684 [CCCINFO] ",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"\u6253\u5F00",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"\u5173\u95ED",megapi_camera_turn_on_light:"\u89C6\u89C9\u6A21\u5757 [PORT]   [STATE] \u8865\u5149\u706F",megapi_camera_set_white_balance:"\u89C6\u89C9\u6A21\u5757 [PORT] \u91CD\u7F6E\u767D\u5E73\u8861",cate_6aae53c0:"\u89C6\u89C9\u6A21\u5757\u8272\u5757\u8BC6\u522B",megapi_camera_1566200222835:"\u67E5\u770B\u6444\u50CF\u5934\u753B\u9762",megapi_camera_switch_line_qrcode_mode:"\u89C6\u89C9\u6A21\u5757 [PORT] \u5207\u6362\u5230 \u7EBF/\u6761\u7801 \u8FFD\u8E2A\u6A21\u5F0F",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) \u524D\u8FDB",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) \u540E\u9000",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) \u5DE6\u8F6C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) \u53F3\u8F6C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) \u505C\u6B62",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) \u52A0\u53F7",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) \u51CF\u53F7",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) \u95EE\u53F7",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) \u7EA2\u5FC3",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"\u89C6\u89C9\u6A21\u5757 [PORT]\u68C0\u6D4B\u5230\u6761\u7801 [BARCODE] \uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"\u89C6\u89C9\u6A21\u5757 [PORT] \u68C0\u6D4B\u5230\u6761\u7801 [BARCODE] \u7684 [BARCODEINFO] \u5750\u6807",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"\u8D77\u59CB x \u5750\u6807",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"\u8D77\u59CB y \u5750\u6807",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"\u7EC8\u70B9 x \u5750\u6807",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"\u7EC8\u70B9 y \u5750\u6807",megapi_camera_line_start_coordinate:"\u89C6\u89C9\u6A21\u5757 [PORT] \u5F53\u524D\u6240\u5728\u7EBF\u6BB5\u7684 [LINEINFO] ",megapi_camera_get_cross:"\u89C6\u89C9\u6A21\u5757 [PORT] \u68C0\u6D4B\u5230\u4EA4\u53C9\u70B9\uFF1F",megapi_camera_corss_coordinate:"\u89C6\u89C9\u6A21\u5757 [PORT] \u68C0\u6D4B\u5230\u4EA4\u53C9\u70B9\u7684 [COORDINATES] \u5750\u6807",megapi_camera_get_branch_num:"\u89C6\u89C9\u6A21\u5757 [PORT] \u68C0\u6D4B\u5230\u5C94\u8DEF\u7684\u6570\u91CF",megapi_camera_get_branch_angle:"\u89C6\u89C9\u6A21\u5757 [PORT] \u68C0\u6D4B\u5230\u7B2C [NUMBER] \u4E2A\u5C94\u8DEF\u7684\u89D2\u5EA6",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"\u6D45\u5E95\u6DF1\u7EBF",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"\u6DF1\u5E95\u6D45\u7EBF",megapi_camera_set_line_mode:"\u89C6\u89C9\u6A21\u5757 [PORT] \u8BBE\u7F6E\u7EBF\u8FFD\u8E2A\u6A21\u5F0F\u4E3A [LINEMODE] ",megapi_camera_1566200454757:"\u89C6\u89C9\u6A21\u5757 [PORT] \u8BBE\u7F6E\u504F\u597D\u89D2\u5EA6\u4E3A [ANGLE] ",megapi_camera_1566200474887:"\u89C6\u89C9\u6A21\u5757 [PORT] \u5F53\u524D\u504F\u597D\u89D2\u5EA6 (\xB0)",cate_aff8824d:"\u89C6\u89C9\u6A21\u5757\u7EBF/\u6761\u7801\u8FFD\u8E2A",megapi_camera_set_kp:"\u89C6\u89C9\u6A21\u5757 [PORT] \u8BBE\u7F6E\u7535\u673A\u5DEE\u901F\u8BA1\u7B97\u7CFB\u6570 Kp \u4E3A [KP] ",megapi_camera_follow_color:"\u89C6\u89C9\u6A21\u5757 [PORT] \u8BA1\u7B97\u7535\u673A\u5DEE\u901F\u503C (\u81EA\u52A8\u8DDF\u968F\u8272\u5757 [SIG]\u81F3 [LOCATION] \u8F74 [NUMBER] \uFF09",megapi_camera_follow_qrcode:"\u89C6\u89C9\u6A21\u5757 [PORT] \u8BA1\u7B97\u7535\u673A\u5DEE\u901F\u503C (\u81EA\u52A8\u8DDF\u968F\u6761\u5F62\u7801 [BARCODE] \u81F3 [LOCATION] \u8F74 [NUMBER] \uFF09",megapi_camera_get_diff_speed:"\u89C6\u89C9\u6A21\u5757 [PORT] \u8BA1\u7B97\u7535\u673A\u5DEE\u901F\u503C (\u5BF9\u51C6\u5DE1\u7EBF\u7EBF\u6BB5\uFF09",megapi_camera_lock_color:"\u89C6\u89C9\u6A21\u5757 [PORT] \u9501\u5B9A\u8272\u5757 [SIG] \u5230 [LOCATION] \u8F74 [NUMBER]  \u9644\u8FD1?",megapi_camera_lock_qrcode:"\u89C6\u89C9\u6A21\u5757 [PORT] \u9501\u5B9A\u6761\u5F62\u7801  [BARCODE] \u5230 [LOCATION] \u8F74 [NUMBER] \u9644\u8FD1?",cate_41d9cfb5:"\u89C6\u89C9\u6A21\u5757\u8D5B\u4E8B\u4E13\u7528",BLOCK_1566199596519:"\u89C6\u89C9\u6A21\u5757 [PORT]  \u5207\u6362\u5230\u8272\u5757\u8BC6\u522B\u6A21\u5F0F",BLOCK_1566200061809:"\u89C6\u89C9\u6A21\u5757 [PORT] \u5F00\u59CB\u5B66\u4E60\u8272\u5757 [SIG] \u76F4\u5230\u5B66\u4E60\u6309\u94AE\u6309\u4E0B",BLOCK_1566200149400:"\u89C6\u89C9\u6A21\u5757 [PORT]  \u8BC6\u522B\u5230\u8272\u5757 [SIG] \u7684 [CCCINFO]",BLOCK_1566200281367_BARCODE_0:"(1) \u524D\u8FDB",BLOCK_1566200281367_BARCODE_1:"(2) \u540E\u9000",BLOCK_1566200281367_BARCODE_2:"(3) \u5DE6\u8F6C",BLOCK_1566200281367_BARCODE_3:"(4) \u53F3\u8F6C",BLOCK_1566200281367_BARCODE_4:"(5) \u505C\u6B62",BLOCK_1566200281367_BARCODE_5:"(6) \u52A0\u53F7",BLOCK_1566200281367_BARCODE_6:"(7) \u51CF\u53F7",BLOCK_1566200281367_BARCODE_7:"(8) \u95EE\u53F7",BLOCK_1566200281367_BARCODE_8:"(9) \u7EA2\u5FC3",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"\u89C6\u89C9\u6A21\u5757 [PORT]\u68C0\u6D4B\u5230\u6761\u7801 [BARCODE] \uFF1F",BLOCK_1566200305130:"\u89C6\u89C9\u6A21\u5757 [PORT] \u68C0\u6D4B\u5230\u6761\u7801 [BARCODE] \u7684 [BARCODEINFO] \u5750\u6807",BLOCK_1566200324089:"\u89C6\u89C9\u6A21\u5757 [PORT] \u5F53\u524D\u6240\u5728\u7EBF\u6BB5\u7684 [LINEINFO]",BLOCK_1566200343169:"\u89C6\u89C9\u6A21\u5757 [PORT] \u68C0\u6D4B\u5230\u4EA4\u53C9\u70B9\uFF1F",BLOCK_1566200380110:"\u89C6\u89C9\u6A21\u5757 [PORT] \u68C0\u6D4B\u5230\u4EA4\u53C9\u70B9\u7684 [COORDINATES] \u5750\u6807",BLOCK_1566200411758:"\u89C6\u89C9\u6A21\u5757 [PORT] \u68C0\u6D4B\u5230\u7B2C [NUMBER] \u4E2A\u5C94\u8DEF\u7684\u89D2\u5EA6",BLOCK_1566200440316:"\u89C6\u89C9\u6A21\u5757 [PORT] \u8BBE\u7F6E\u7EBF\u8FFD\u8E2A\u6A21\u5F0F\u4E3A [LINEMODE]",BLOCK_1567596489390:"\u89C6\u89C9\u6A21\u5757 [PORT] \u8BA1\u7B97\u7535\u673A\u5DEE\u901F\u503C (\u81EA\u52A8\u8DDF\u968F\u8272\u5757 [SIG]\u81F3 [LOCATION] \u8F74 [NUMBER] \uFF09",BLOCK_1567596489391:"\u89C6\u89C9\u6A21\u5757 [PORT] \u8BA1\u7B97\u7535\u673A\u5DEE\u901F\u503C (\u81EA\u52A8\u8DDF\u968F\u6761\u5F62\u7801 [BARCODE] \u81F3 [LOCATION] \u8F74 [NUMBER] \uFF09",BLOCK_1567596489392:"\u89C6\u89C9\u6A21\u5757 [PORT] \u9501\u5B9A\u8272\u5757 [SIG] \u5230 [LOCATION] \u8F74 [NUMBER]  \u9644\u8FD1?",BLOCK_1567596489393:"\u89C6\u89C9\u6A21\u5757 [PORT] \u9501\u5B9A\u6761\u5F62\u7801  [BARCODE] \u5230 [LOCATION] \u8F74 [NUMBER] \u9644\u8FD1?"},en:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?",mbot_mbuild_camera:"Smart Camera",BLOCK_1566200222835:"check camera image",BLOCK_1566199596519_PORT_0:"port1",BLOCK_1566199596519_PORT_1:"port2",BLOCK_1566199596519_PORT_2:"port3",BLOCK_1566199596519_PORT_3:"port4",BLOCK_1566200061809_SIG_0:"1",BLOCK_1566200061809_SIG_1:"2",BLOCK_1566200061809_SIG_2:"3",BLOCK_1566200061809_SIG_3:"4",BLOCK_1566200061809_SIG_4:"5",BLOCK_1566200061809_SIG_5:"6",BLOCK_1566200061809_SIG_6:"7",BLOCK_1566200086536_FIELDMENU_1_0:"saturation",BLOCK_1566200086536_FIELDMENU_1_1:"R value",BLOCK_1566200086536_FIELDMENU_1_2:"G value",BLOCK_1566200086536_FIELDMENU_1_3:"B value",BLOCK_1566200086536_FIELDMENU_2_0:"center",BLOCK_1566200086536_FIELDMENU_2_1:"average",BLOCK_1566200086536_FIELDMENU_1_4:"grayscale",BLOCK_1566200086536:"smart camera [fieldMenu_1]  image [fieldMenu_2] 's [fieldMenu_1]",BLOCK_1566200107336:"smart camera [PORT]detected color block[SIG]?",BLOCK_1566200125249_LOCATION_0:"center",BLOCK_1566200125249_LOCATION_1:"upper",BLOCK_1566200125249_LOCATION_2:"bottom",BLOCK_1566200125249_LOCATION_3:"left",BLOCK_1566200125249_LOCATION_4:"right",BLOCK_1566200125249:"smart camera [PORT]  detected color block [SIG] at[LOCATION] of the image\uFF1F",BLOCK_1566200149400_CCCINFO_0:"x-coordinate",BLOCK_1566200149400_CCCINFO_1:"y-coordinate",BLOCK_1566200149400_CCCINFO_2:"width",BLOCK_1566200149400_CCCINFO_3:"height",BLOCK_1566200169775_STATE_0:"open",BLOCK_1566200169775_STATE_1:"close",BLOCK_1566200169775:"smart camera [PORT] [STATE] fill light",BLOCK_1566200199500:"smart camera [PORT] resets white balance",BLOCK_1566200260586:"smart camera[PORT] switch to line/label tracking mode",BLOCK_1566200305130_BARCODEINFO_0:"x",BLOCK_1566200305130_BARCODEINFO_1:"y",BLOCK_1566200324089_LINEINFO_0:"start's x coordinate",BLOCK_1566200324089_LINEINFO_1:"start's y coordinate",BLOCK_1566200324089_LINEINFO_2:"end's x coordinate",BLOCK_1566200324089_LINEINFO_3:"end's y coordinate",BLOCK_1566200395762:"smart camera [PORT]number of branch roads detected",BLOCK_1566200440316_LINEMODE_0:"dark line on light background",BLOCK_1566200440316_LINEMODE_1:"light line on dark background",BLOCK_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",BLOCK_1566200474887:"smart camera [PORT] current preferred angle(\xB0)",BLOCK_1567596489377:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",BLOCK_1567596489379:"smart camera [PORT] calculates motor differential speed(targets the line-following section)"},de:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},es:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},fr:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},id:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},ja:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},"ja-jph":{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},ko:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},pl:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},uk:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},"zh-hant":{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},nl:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},it:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},hr:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},ru:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},pt:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},fi:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},tr:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},tk:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},ar:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},ca:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},cs:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},fa:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},km:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},he:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"},vi:{megapi_mbuild_camera:"Smart Camera",extensionName:"Smart Camera",extensionDescription:"Smart camera extension for MegaPi",megapi_1566200222835:"check camera image",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0:"port6",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1:"port7",MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2:"port8",megapi_camera_switch_color_mode:"smart camera [PORT] switch to color block detection mode",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0:"1",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1:"2",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2:"3",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3:"4",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4:"5",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5:"6",MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6:"7",megapi_camera_recognize_color:"smart camera [PORT] starts learning color block [SIG] until button pressed",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0:"center",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1:"average",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0:"saturation",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1:"R value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2:"G value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3:"B value",MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4:"grayscale",megapi_camera_center_saturation:"smart camera [fieldMenu_1] image [fieldMenu_2]'s [fieldMenu_1]",megapi_camera_get_color:"smart camera [PORT] detected color block [SIG]?",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0:"center",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1:"upper",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2:"bottom",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3:"left",MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4:"right",megapi_camera_color_in_center:"smart camera [PORT] detected color block [SIG] at [LOCATION] of the image\uFF1F",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0:"x-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1:"y-coordinate",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2:"width",MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3:"height",megapi_camera_color_coordinate:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0:"turn on",MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1:"turn off",megapi_camera_turn_on_light:"smart camera [PORT]   [STATE] fill light",megapi_camera_set_white_balance:"smart camera [PORT] resets white balance",cate_6aae53c0:"Color Block Detect",megapi_camera_1566200222835:"check camera image",megapi_camera_switch_line_qrcode_mode:"smart camera [PORT] switch to line/label tracking mode",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0:"(1) forward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1:"(2) backward",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2:"(3) turn left",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3:"(4) turn right",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4:"(5) stop",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5:"(6) plus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6:"(7) minus sign",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7:"(8) question mark",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8:"(9) red heart",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9:"(10) A",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10:"(11) B",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11:"(12) C",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12:"(13) \u2460",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13:"(14) \u2461",MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14:"(15) \u2462",megapi_camera_get_qrcode_move:"smart camera [PORT] detected label [BARCODE]\uFF1F",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0:"x",MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1:"y",megapi_camera_get_qrcode_coordinate:"label [BARCODE]'s [BARCODEINFO] coordinate returned by smart camera [PORT]",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0:"start's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1:"start's y coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2:"end's x coordinate",MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3:"end's y coordinate",megapi_camera_line_start_coordinate:"smart camera [PORT] current line's [LINEINFO]",megapi_camera_get_cross:"smart camera [PORT] detected cross-point?",megapi_camera_corss_coordinate:" cross point's [COORDINATES] coordinate returned by smart camera [PORT]",megapi_camera_get_branch_num:"number of cross-points returned by smart camera [PORT]",megapi_camera_get_branch_angle:"angle of number [NUMBER] cross-point returned by smart camera [PORT]",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0:"dark line on light background",MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1:"light line on dark background",megapi_camera_set_line_mode:"smart camera[PORT]sets line tracking mode to [LINEMODE]",megapi_camera_1566200454757:"smart camera [PORT] sets preferred angle to [ANGLE]",megapi_camera_1566200474887:"smart camera [PORT] current preferred angle (\xB0)",cate_aff8824d:"Line/label Tracking",megapi_camera_set_kp:"smart camera [PORT] sets Kp in motor differential speed calculation to [KP]",megapi_camera_follow_color:"smart camera [PORT] calculates motor differential speed (auto follows color block [SIG] to [LOCATION] axis [NUMBER])",megapi_camera_follow_qrcode:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",megapi_camera_get_diff_speed:"smart camera [PORT] calculates motor differential speed (targets the line-following section)",megapi_camera_lock_color:"smart camera [PORT] targets area near color block [SIG] to [LOCATION] axis [NUMBER]?",megapi_camera_lock_qrcode:"smart camera [PORT] targets area near label [BARCODE] to [LOCATION] axis [NUMBER]?",cate_41d9cfb5:"Event-specific Smart Camera",BLOCK_1566199596519:"smart camera [PORT]switch to color block detection mode",BLOCK_1566200061809:"smart camera [PORT] starts learning color block [SIG] until button pressed",BLOCK_1566200149400:"smart camera [PORT] detected [CCCINFO] of color block [SIG]",BLOCK_1566200281367_BARCODE_0:"(1) forward",BLOCK_1566200281367_BARCODE_1:"(2) backward",BLOCK_1566200281367_BARCODE_2:"(3) turn left",BLOCK_1566200281367_BARCODE_3:"(4) turn right",BLOCK_1566200281367_BARCODE_4:"(5) stop",BLOCK_1566200281367_BARCODE_5:"(6) plus sign",BLOCK_1566200281367_BARCODE_6:"(7) minus sign",BLOCK_1566200281367_BARCODE_7:"(8) question mark",BLOCK_1566200281367_BARCODE_8:"(9) red heart",BLOCK_1566200281367_BARCODE_9:"(10) A",BLOCK_1566200281367_BARCODE_10:"(11) B",BLOCK_1566200281367_BARCODE_11:"(12) C",BLOCK_1566200281367_BARCODE_12:"(13) \u2460",BLOCK_1566200281367_BARCODE_13:"(14) \u2461",BLOCK_1566200281367_BARCODE_14:"(15) \u2462",BLOCK_1566200281367:"smart camera [PORT]detected label [BARCODE]\uFF1F",BLOCK_1566200305130:"smart camera [PORT] detected label [BARCODE]'s [BARCODEINFO] coordinate",BLOCK_1566200324089:"smart camera[PORT] current line's [LINEINFO]",BLOCK_1566200343169:"smart camera[PORT]detected cross-point\uFF1F",BLOCK_1566200380110:"smart camera[PORT]detected cross point's [COORDINATES] coordinate",BLOCK_1566200411758:"smart camera [PORT]  [NUMBER]-numbered branch road's angle",BLOCK_1566200440316:"smart camera[PORT] sets line tracking mode to[LINEMODE]",BLOCK_1567596489390:"smart camera [PORT] calculates motor differential speed (auto follows color block[SIG] to [LOCATION] axis [NUMBER] )",BLOCK_1567596489391:"smart camera [PORT] calculates motor differential speed (auto follows label [BARCODE] to [LOCATION] axis [NUMBER])",BLOCK_1567596489392:"smart camera[PORT]targets area near color block [SIG] to[LOCATION] axis [NUMBER] ?",BLOCK_1567596489393:"smart camera[PORT] targets area near label[BARCODE] to [LOCATION] axis [NUMBER] ?"}},codeSnippets={arduinoc:{}},extGenerators=[{lang:"arduinoc",template:"// generated by mBlock5 for <your product>\n// codes make you happy\n\n//( include //)\n#include <Arduino.h>\n//( lib //)\n\n//({\n    this.$ALL_VARIABLES.length==0?'':this.$ALL_VARIABLES.map(v=>\"float \"+v+\" = 0;\").join('\\n')\n}//)\n\n//( declare //)\n\n\nvoid _delay(float seconds) {\n  long endTime = millis() + seconds * 1000;\n  while(millis() < endTime) _loop();\n}\n\n//(\nvoid setup() {\n  //( setup //)\n  //( code //)\n}\n//)\n\nvoid _loop() {\n  //( _loop //)\n}\n\nvoid loop() {\n  //( loop //)\n  _loop();\n}",splitor:{frame:{left:"//(",right:"//)"},expression:{left:"/*{",right:"}*/"}},reducers:[{name:"include",reduce:function reduce(codes){var codes1=[],_iterator=_createForOfIteratorHelper(codes),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var code=_step.value,codeStr="";"string"==typeof code?codeStr=code:"function"==typeof code&&(codeStr=code()),-1===codes1.indexOf(codeStr)&&codes1.push(codeStr)}}catch(err){_iterator.e(err)}finally{_iterator.f()}return 0===codes1.length?void 0:codes1.map(function(code){return"#include "+code}).join("\n")+"\n"}}]}],extSources={arduino:[{filename:"src/MeCamera.cpp",code:"/**\n * \\par Copyright (C), 2012-2016, MakeBlock\n * \\class   MeCamera\n * \\brief   Driver for MeCamera module.\n * @file    MeCamera.cpp\n * @author  MakeBlock\n * @version V1.0.0\n * @date    2017/09/26\n * @brief   Driver for MeCamera module.\n *\n * \\par Copyright\n * This software is Copyright (C), 2012-2016, MakeBlock. Use is subject to license \\n\n * conditions. The main licensing options available are GPL V2 or Commercial: \\n\n *\n * \\par Open Source Licensing GPL V2\n * This is the appropriate option if you want to share the source code of your \\n\n * application with everyone you distribute it to, and you also want to give them \\n\n * the right to share who uses it. If you wish to use this software under Open \\n\n * Source Licensing, you must contribute all your source code to the open source \\n\n * community in accordance with the GPL Version 2 when your application is \\n\n * distributed. See http://www.gnu.org/copyleft/gpl.html\n *\n * \\par Description\n * This file is a drive for MeCamera module, It supports MeCamera V1.0 device provided\n * by MakeBlock.\n *\n * \\par Method List:\n *\n *    1.void MeCamera::setpin(uint8_t AD0, uint8_t INT)\n *    2.void MeCamera::begin(void)\n *\n * \\par History:\n * <pre>\n * \"<Author>\"         \"<Time>\"        \"<Version>\"        \"<Descr>\"\n *  Payton            2017/09/26        1.0.0         rebuild the old lib.\n * </pre>\n *\n * @example CameraTest.ino\n */\n\n/* Includes ------------------------------------------------------------------*/\n#include \"MeCamera.h\"\n\n#include <Arduino.h>\n\n/* Private functions ---------------------------------------------------------*/\n#ifdef ME_PORT_DEFINED\n/**\n * Alternate Constructor which can call your own function to map the MeCamera to arduino port\n * no pins are used or initialized here, but PWM frequency set to 976 Hz\n * \\param[in]\n *   port - RJ25 port from PORT_1 to PORT_4\n */\nMeCamera::MeCamera(uint8_t port) : MePort(port)\n{\n  //address0-11, address1-10, address2-01, address3-00\n  pinMode(s1, OUTPUT);\n  pinMode(s2, OUTPUT);\n  if(port == PORT_1)\n  {\n    digitalWrite(s1,LOW);\n    digitalWrite(s2,LOW);\n    Device_Address = CAMERA_DEFAULT_ADDRESS + 0;\n  }\n  else if(port == PORT_2)\n  {\n    digitalWrite(s1,HIGH);\n    digitalWrite(s2,LOW);\n    Device_Address = CAMERA_DEFAULT_ADDRESS + 1;\n  }\n  else if(port == PORT_3)\n  {\n    digitalWrite(s1,LOW);\n    digitalWrite(s2,HIGH);\n    Device_Address = CAMERA_DEFAULT_ADDRESS + 2;\n  }\n  else if(port == PORT_4)\n  {\n    digitalWrite(s1,HIGH);\n    digitalWrite(s2,HIGH);\n    Device_Address = CAMERA_DEFAULT_ADDRESS + 3;\n  }\n  else\n  { \n    digitalWrite(s1,LOW);\n    digitalWrite(s2,LOW);\n    Device_Address = CAMERA_DEFAULT_ADDRESS + 0;\n  }\n}\n#else  // ME_PORT_DEFINED\n/**\n * Alternate Constructor which can call your own function to map the AD0 and INT to arduino port,\n * no pins are used or initialized here\n * \\param[in]\n *   AD0 - arduino gpio number\n * \\param[in]\n *   INT - arduino gpio number\n */\nMeCamera::MeCamera(uint8_t AD0, uint8_t INT)\n{\n  pinMode(AD0,OUTPUT);\n  pinMode(INT,OUTPUT);\n\n  digitalWrite(AD0,LOW);\n  digitalWrite(INT,LOW);\n  Device_Address = CAMERA_DEFAULT_ADDRESS + 0;\n}\n\n#endif // ME_PORT_DEFINED\n\n/**\n * \\par Function\n *   setpin\n * \\par Description\n *   Set the PIN of the button module.\n * \\param[in]\n *   AD0 - pin mapping for arduino\n * \\param[in]\n *   INT - pin mapping for arduino\n * \\par Output\n *   None\n * \\return\n *   None.\n * \\par Others\n *   Set global variable AD0, INT, s1 and s2\n */\nvoid MeCamera::setpin(uint8_t AD0, uint8_t INT)\n{\n  pinMode(AD0,OUTPUT);\n  pinMode(INT,OUTPUT);\n\n#ifdef ME_PORT_DEFINED\n  s1 = AD0;\n  s2 = INT;\n#endif // ME_PORT_DEFINED\n}\n\n/**\n * \\par Function\n *   begin\n * \\par Description\n *   Initialize the MeCamera.\n * \\param[in]\n *   None\n * \\par Output\n *   None\n * \\return\n *   None\n * \\par Others\n *   \n */\nvoid MeCamera::begin(void)\n{\n  motor_diff_speed = 0;\n  kp = 0.5;\n  pixy_work_mode = IDLE_MODE;\n  led_change_flag = 1;\n  \n  Wire.begin();\n  delay(50);\n}\n\n/**\n * \\par Function\n *   setCameraMode\n * \\par Description\n *   Set pixy2 work in mode: IDLE_MODE / CCC_MODE / LINE_MODE / VIDEO_MODE\n *   Setting mode delay time 500ms ~ 1500ms.\n * \\param[in]\n *   mode: IDLE_MODE / CCC_MODE / LINE_MODE / VIDEO_MODE\n * \\par Output\n *   None\n * \\return\n *   0: set mode sucess\n *   -1:set mode fail\n * \\par Others\n */\nint8_t MeCamera::setCameraMode(uint8_t mode)\n{\n  int8_t return_value = 0;\n  int8_t count = 3;\n\n  if(mode != pixy_work_mode)\n  {\n    led_change_flag = 1;\n  }\n\n  while(count--)\n  {\n    //Serial.println(\"SET_PIXY_MODE\");\n    writeData(SET_PIXY_MODE, &mode, 1);\n    delay(500);\n\n    return_value = readData(SET_PIXY_MODE, &i2cData[0], 1);\n    if((i2cData[0] == mode) && (return_value == I2C_OK))\n    {\n      pixy_work_mode = mode;\n      motor_diff_speed = 0;\n      return 0;\n    }\n  }\n  return -1;\n}\n\n/**\n * \\par Function\n *   setLineMode\n * \\par Description\n *   Set line follow mode\n * \\param[in]\n *   mode: \n *   0 - find dark lines on a light background (black lines)\n  *  1 - find light lines on a dark background (white lines)\n * \\par Output\n *   None\n * \\return\n *   0: set mode sucess\n *   -1:set mode fail\n * \\par Others\n */\nint8_t MeCamera::setLineMode(uint8_t mode)\n{\n  int8_t return_value = 0;\n  int8_t count = 3;\n\n  while(count--)\n  {\n    return_value = writeData(SET_LINE_FOLLOW_MODE, &mode, 1);\n    delay(2);\n    if(return_value == I2C_OK)\n    {\n      readData(SET_LINE_FOLLOW_MODE, &i2cData[0], 1);\n      if(i2cData[0] == mode)\n      {\n        return 0;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * \\par Function\n *   setLED\n * \\par Description\n *   Set Supplementary lamp status\n * \\param[in]\n *   onOff: \n *   0 - Turn off the supplementary light\n  *  1 - Turn on the supplementary light\n * \\par Output\n *   None\n * \\return\n *   0: set sucess\n *   -1:set fail\n * \\par Others\n */\nint8_t MeCamera::setLED(uint8_t onOff)\n{\n  int8_t return_value = 0;\n  int8_t count = 3;\n  uint8_t data = 1;\n\n  if(led_change_flag == 1)\n  {\n    return_value = writeData(SET_LED, &data, 1);\n    led_change_flag = 0;\n  }\n  while(count--)\n  {\n    return_value = writeData(SET_LED, &onOff, 1);\n    delay(2);\n    if(return_value == I2C_OK)\n    {\n      readData(SET_LED, &i2cData[0], 1);\n      if(i2cData[0] == onOff)\n      {\n        return 0;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * \\par Function\n *   startStudyCCC\n * \\par Description\n *   Start enter study CCC\n * \\param[in]\n *    sig - color signatures, numbered 1-7\n *    times - study timeout ,unit 1s\n * \\par Output\n *   None\n * \\return\n *   0: study sucess\n *   -1:study fail\n * \\par Others\n */\nint8_t MeCamera::startStudyCCC(uint8_t sig, uint8_t times)\n{\n  int8_t return_value = 0;\n  uint8_t buff[2];\n\n  buff[0] = sig - 1;\n  buff[1] = times;\n\n  return_value = writeData(SET_START_STUDY, &buff[0], 2);\n  delay(100);\n\n  while(1)\n  {\n    return_value = readData(GET_STUDY_STATE_ADDR, &i2cData[0], 1);\n    if(return_value == I2C_OK)\n    {\n      if(i2cData[0] == 0)\n      {\n        //Serial.println(\"startStudyCCC\");\n        delay(2000);\n        return 0;\n      }\n    }\n    else\n    {\n      break;\n    }\n    delay(100);\n  }\n  return -1;\n}\n\n/**\n * \\par Function\n *   getCCCValue\n * \\par Description\n *   get CCC value\n * \\param[in]\n *   sig - color signatures, numbered 1-7\n *   type - data type, CCC_X/CCC_Y/CCC_W/CCC_H\n * \\par Output\n *   None\n * \\return\n *   Return the value of CCC:\n *    - x-axis value ranges between 0 and 319\n *    - y-axis value ranges between 0 and 239\n *    - width value ranges between 0 and 320\n *    - height value ranges between 0 and 240\n * \\par Others\n */\nuint16_t MeCamera::getCCCValue(uint8_t sig, uint8_t type)\n{\n  int8_t return_value;\n  uint32_t data = 0;\n\n  if(type == CCC_NUM)\n  {\n    return_value = readPixy2Data(CCC_NUM_ADDR, &i2cData[0], 1);\n  }\n  else\n  {\n    return_value = readPixy2Data(CCC1_X_LOW_ADDR + (sig-1)*12 + type*2, &i2cData[0], 2);\n  }\n\n  if(return_value == I2C_OK)\n  {\n    data = *(uint16_t*)&i2cData[0];\n  }\n\n  if(type == CCC_X || type == CCC_W)\n  {\n    data = data * 320 / 316;\n  }\n  else if(type == CCC_Y || type == CCC_H)\n  {\n    data = data * 240 / 208;\n  }\n  return (uint16_t)data;\n}\n\n/**\n * \\par Function\n *   getVectorValue\n * \\par Description\n *   get the value of the Vector or line\n * \\param[in]\n *   type - data type, VECTOR_X0/VECTOR_Y0/VECTOR_X1/VECTOR_Y1\n * \\par Output\n *   None\n * \\return\n *   Return the value of the vector:\n *   - x0 value ranges between 0 and 319\n *   - y0 value ranges between 0 and 239\n *   - x1 value ranges between 0 and 319\n *   - y1 value ranges between 0 and 239\n * \\par Others\n */\nuint16_t MeCamera::getVectorValue(uint8_t type)\n{\n  int8_t return_value;\n  uint32_t data = 0;\n  \n  return_value = readPixy2Data(LINE_X0_ADDR + type, &i2cData[0], 1);\n  if(return_value == I2C_OK)\n  {\n    data = *(uint8_t*)&i2cData[0];\n  }\n\n  if(type == VECTOR_X0 || type == VECTOR_X1)\n  {\n    data = data * 320 / 78;\n  }\n  else if(type == VECTOR_Y0 || type == VECTOR_Y1)\n  {\n    data = data * 240 / 52;\n  }\n  return (uint16_t)data;\n}\n\n/**\n * \\par Function\n *   getIntersectionValue\n * \\par Description\n *   get the value of the intersection\n * \\param[in]\n *   type - data type, INTERSECTION_X/INTERSECTION_Y/INTERSECTION_NUM\n * \\par Output\n *   None\n * \\return\n *   Return the value of the intersection:\n *   - x-axis value ranges between 0 and 319\n *   - y-axis value ranges between 0 and 239\n *   - num the number of lines (branches), ranges between 0 and 6\n * \\par Others\n */\nuint16_t MeCamera::getIntersectionValue(uint8_t type)\n{\n  int8_t return_value;\n  uint32_t data = 0;\n  \n  return_value = readPixy2Data(INTERSECTION_X_ADDR + type, &i2cData[0], 1);\n  if(return_value == I2C_OK)\n  {\n    data = *(uint8_t*)&i2cData[0];\n  }\n\n  if(type == INTERSECTION_X)\n  {\n    data = data * 320 / 78;\n  }\n  else if(type == INTERSECTION_Y)\n  {\n    data = data * 240 / 52;\n  }\n  return (uint16_t)data;\n}\n\n/**\n * \\par Function\n *   getIntersectionAngle\n * \\par Description\n *   get the angle in degrees of the line\n * \\param[in]\n *   index: the tracking index of the line, 1 ~ 6\n * \\par Output\n *   None\n * \\return\n *   Return the angle in degrees of the line, The value ranges between -180 and 180\n * \\par Others\n */\nint16_t MeCamera::getIntersectionAngle(uint8_t index)\n{\n  int8_t return_value;\n  int16_t data = 0;\n\n  if(index < 1 || index > 6)\n  {\n    return 0;\n  }\n  \n  return_value = readPixy2Data(INTERSECTION_LINE1_ANGLE_LOW_ADDR + (index-1)*2  , &i2cData[0], 2);\n  if(return_value == I2C_OK)\n  {\n    data = *(int16_t*)&i2cData[0];\n  }\n  return data;\n}\n\n/**\n * \\par Function\n *   getBarCodeValue\n * \\par Description\n *   get the value location of the barcode.\n * \\param[in]\n *   code - value of the code, The value ranges between 0 and 15\n *   type - data type, BARCODE_X/BARCODE_Y\n * \\par Output\n *   None\n * \\return\n *   the value of the barcode:\n *   - x-axis value ranges between 0 and 319\n *   - y-axis value ranges between 0 and 239\n * \\par Others\n */\nuint16_t MeCamera::getBarCodeValue(uint8_t code, uint8_t type)\n{\n  int8_t return_value;\n  uint32_t data = 0;\n\n  if(type == BARCODE_NUM)\n  {\n    return_value = readPixy2Data(BARCODE_NUM_ADDR, &i2cData[0], 1);\n  }\n  else\n  {\n    return_value = readPixy2Data(BARCODE0_X_ADDR + code*2 + type, &i2cData[0], 1);\n  }\n\n  if(return_value == I2C_OK)\n  {\n    data = *(uint8_t*)&i2cData[0];\n  }\n\n  if(type == BARCODE_X)\n  {\n    data = data * 320 / 78;\n  }\n  else if(type == BARCODE_Y)\n  {\n    data = data * 240 / 52;\n  }\n  return (uint16_t)data;\n}\n\n/**\n * \\par Function\n *   setMotorDiffSpeedKp\n * \\par Description\n *   Set left/right Motor differential speed sensitivity\n * \\param[in]\n *   kp: 0 ~ 1\n * \\par Output\n *   None\n * \\return\n *   None\n * \\par Others\n */\nvoid MeCamera::setMotorDiffSpeedKp(float _kp)\n{\n  if(_kp < 0)\n  {\n    kp = 0;\n  }\n  else  if(_kp > 1)\n  {\n    kp = 1;\n  }\n  else\n  {\n    kp = _kp;\n  }\n}\n\n/**\n * \\par Function\n *   getFollowColorValue\n * \\par Description\n *   When automatically following the color block: Get left/right Motor differential speed value\n * \\param[in]\n *    sig - color signatures, numbered 1-7\n *   x - x axis location in the image, 0 ~ 319, -1 invalid\n *   y - y axis location in the image, 0 ~ 239, -1 invalid\n * \\par Output\n *   None\n * \\return\n *   Motor differential speed value: -100 ~ 100\n * \\par Others\n */\nint16_t MeCamera::getFollowColorValue(uint8_t sig, int16_t x, int16_t y)\n{\n  int8_t return_value = 0;\n  int32_t cur_x = 0, cur_y = 0;\n  int16_t error = 0;\n\n  if(pixy_work_mode != CCC_MODE)\n  {\n    return 0;\n  }\n\n  return_value = readPixy2Data(CCC1_X_LOW_ADDR + (sig-1)*12, &i2cData[0], 4);\n  cur_x = *(int16_t*)&i2cData[0];\n  cur_y = *(int16_t*)&i2cData[2];\n  if(return_value != I2C_OK)\n  {\n    return 0;\n  }\n  if(cur_x == 0)\n  {\n    return 0;\n  }\n\n  cur_x = cur_x * 320 / 316;\n  cur_y = cur_y * 240 / 208;\n  if(x == -1)\n  {\n    error = (int16_t)(y - cur_y) * 2;\n  }\n  else if(y == -1)\n  {\n    error = (int16_t)(cur_x - x) * 1;\n  }\n  else\n  {\n    return 0;\n  }\n\n  error = constrain(error, -100, 100);\n  error = error * kp;\n  //LIMIT(error, 20);\n\n  motor_diff_speed = error;\n  return motor_diff_speed;\n}\n\n/**\n * \\par Function\n *   getFollowBarcodeValue\n * \\par Description\n *   When automatically following the barcode: Get left/right Motor differential speed value\n * \\param[in]\n *   code - value of the barcode, The value ranges between 0 and 15\n *   x - x axis location in the image, 0 ~ 319, -1 invalid\n *   y - y axis location in the image, 0 ~ 239, -1 invalid\n * \\par Output\n *   None\n * \\return\n *   Motor differential speed value: -100 ~ 100\n * \\par Others\n */\nint16_t MeCamera::getFollowBarcodeValue(uint8_t code, int16_t x, int16_t y)\n{\n  int8_t return_value = 0;\n  int32_t cur_x = 0, cur_y = 0;\n  int16_t error = 0;\n\n  if(pixy_work_mode != LINE_MODE)\n  {\n    return 0;\n  }\n\n  return_value = readPixy2Data(BARCODE0_X_ADDR + code*2, &i2cData[0], 2);\n  cur_x = *(uint8_t*)&i2cData[0];\n  cur_y = *(uint8_t*)&i2cData[1];\n  if(return_value != I2C_OK)\n  {\n    return 0;\n  }\n  if(cur_x == 0)\n  {\n    return 0;\n  }\n\n  cur_x = cur_x * 320 / 78;\n  cur_y = cur_y * 240 / 52;\n  if(x == -1)\n  {\n    error = (int16_t)(y - cur_y) * 2;\n  }\n  else if(y == -1)\n  {\n    error = (int16_t)(cur_x - x) * 1;\n  }\n  else\n  {\n    return 0;\n  }\n\n  error = constrain(error, -100, 100);\n  error = error * kp;\n  //LIMIT(error, 20);\n\n  motor_diff_speed = error;\n  return motor_diff_speed;\n}\n\n/**\n * \\par Function\n *   getFollowVectorValue\n * \\par Description\n *   When automatically following the vector: Get left/right Motor differential speed value\n * \\param[in]\n *   None\n * \\par Output\n *   None\n * \\return\n *   Motor differential speed value: -100 ~ 100\n * \\par Others\n */\nint16_t MeCamera::getFollowVectorValue(void)\n{\n  int8_t return_value = 0;\n  int32_t x0, y0, x1, y1;\n  int16_t error = 0;\n\n  if(pixy_work_mode != LINE_MODE)\n  {\n    return 0;\n  }\n\n  return_value = readPixy2Data(LINE_X0_ADDR + VECTOR_X0, &i2cData[0], 4);\n  x0 = *(uint8_t*)&i2cData[0];\n  y0 = *(uint8_t*)&i2cData[1];\n  x1 = *(uint8_t*)&i2cData[2];\n  y1 = *(uint8_t*)&i2cData[3];\n  if(return_value != I2C_OK)\n  {\n    return 0;\n  }\n  if(x0 == 0 && x1 == 0)\n  {\n    return 0;\n  }\n\n  x0 = x0 * 320 / 78;\n  y0 = y0 * 240 / 52;\n  x1 = x1 * 320 / 78;\n  y1 = y1 * 240 / 52;\n\n  error = (int16_t)(x0 - 160)*0.7 + (int16_t)(x1 - 160)*0.3;\n  error = constrain(error, -100, 100);\n  error = error * kp;\n  //LIMIT(error, 20);\n\n  motor_diff_speed = error;\n  return motor_diff_speed;\n}\n\n/**\n * \\par Function\n *   isLockedCCC\n * \\par Description\n *   is locked the color block?\n * \\param[in]\n *   sig - color signatures, numbered 1-7\n *   x - x axis location in the image, 0 ~ 319, -1 invalid\n *   y - y axis location in the image, 0 ~ 239, -1 invalid\n * \\par Output\n *   None\n * \\return\n *   true - Lock the target position\n *   false - No Lock the target position\n * \\par Others\n */\nbool MeCamera::isLockedCCC(uint8_t sig, int16_t x, int16_t y)\n{\n  int8_t return_value = 0;\n  int32_t cur_x = 0, cur_y = 0;\n\n  if(pixy_work_mode != CCC_MODE)\n  {\n    return false;\n  }\n\n  return_value = readPixy2Data(CCC1_X_LOW_ADDR + (sig-1)*12, &i2cData[0], 4);\n  cur_x = *(int16_t*)&i2cData[0];\n  cur_y = *(int16_t*)&i2cData[2];\n  if((return_value != I2C_OK) || (cur_x == 0))\n  {\n    return false;\n  }\n\n  cur_x = cur_x * 320 / 316;\n  cur_y = cur_y * 240 / 208;\n  if(x == -1)\n  {\n    if(abs(cur_y - y) < 20)\n    {\n      return true;\n    }\n  }\n  else if(y == -1)\n  {\n    if(abs(cur_x - x) < 20)\n    {\n      return true;\n    }\n  }\n  else\n  {\n    if((abs(cur_y - y) < 20) && (abs(cur_x - x) < 20))\n    {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * \\par Function\n *   isLockedBarcode\n * \\par Description\n *   is locked the Barcode?\n * \\param[in]\n *   code - value of the barcode, The value ranges between 0 and 15\n *   x - x axis location in the image, 0 ~ 319, -1 invalid\n *   y - y axis location in the image, 0 ~ 239, -1 invalid\n * \\par Output\n *   None\n * \\return\n *   true - Lock the target position\n *   false - No Lock the target position\n * \\par Others\n */\nbool MeCamera::isLockedBarcode(uint8_t code, int16_t x, int16_t y)\n{\n  int8_t return_value = 0;\n  int32_t cur_x = 0, cur_y = 0;\n\n  if(pixy_work_mode != LINE_MODE)\n  {\n    return false;\n  }\n\n  return_value = readPixy2Data(BARCODE0_X_ADDR + code*2, &i2cData[0], 2);\n  cur_x = *(uint8_t*)&i2cData[0];\n  cur_y = *(uint8_t*)&i2cData[1];\n  if((return_value != I2C_OK) || (cur_x == 0))\n  {\n    return false;\n  }\n\n  cur_x = cur_x * 320 / 78;\n  cur_y = cur_y * 240 / 52;\n  if(x == -1)\n  {\n    if(abs(cur_y - y) < 20)\n    {\n      return true;\n    }\n  }\n  else if(y == -1)\n  {\n    if(abs(cur_x - x) < 20)\n    {\n      return true;\n    }\n  }\n  else\n  {\n    if((abs(cur_y - y) < 20) && (abs(cur_x - x) < 20))\n    {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * \\par Function\n *   writeReg\n * \\par Description\n *   Write the registor of i2c device.\n * \\param[in]\n *   reg - the address of registor.\n * \\param[in]\n *   data - the data that will be written to the registor.\n * \\par Output\n *   None\n * \\return\n *   Return the error code.\n *   the definition of the value of variable return_value:\n *   0:success\n *   1:BUFFER_LENGTH is shorter than size\n *   2:address send, nack received\n *   3:data send, nack received\n *   4:other twi error\n *   refer to the arduino official library twi.c\n * \\par Others\n *   To set the registor for initializing.\n */\nint8_t MeCamera::writeReg(uint8_t reg, uint8_t data)\n{\n  int8_t return_value = 0;\n  return_value = writeData(reg, &data, 1);\n  return(return_value);\n}\n\n/**\n * \\par Function\n *   readData\n * \\par Description\n *   Write the data to i2c device.\n * \\param[in]\n *   start - the address which will write the data to.\n * \\param[in]\n *   pData - the head address of data array.\n * \\param[in]\n *   size - set the number of data will be written to the devide.\n * \\par Output\n *   None\n * \\return\n *   Return the error code.\n *   the definition of the value of variable return_value:\n *   0:success\n *   1:BUFFER_LENGTH is shorter than size\n *   2:address send, nack received\n *   3:data send, nack received\n *   4:other twi error\n *   refer to the arduino official library twi.c\n * \\par Others\n *   Calling the official i2c library to read data.\n */\nint8_t MeCamera::readData(uint8_t start, uint8_t *buffer, uint8_t size)\n{\n  int16_t i = 0;\n  int8_t return_value = 0;\n\n  Wire.beginTransmission(Device_Address);\n  return_value = Wire.write(start);\n  if(return_value != 1)\n  {\n    return(I2C_ERROR);\n  }\n  return_value = Wire.endTransmission(false);\n  if(return_value != 0)\n  {\n    return(return_value);\n  }\n  delayMicroseconds(1);\n  /* Third parameter is true: relase I2C-bus after data is read. */\n  Wire.requestFrom(Device_Address, size, (uint8_t)true);\n  while(Wire.available() && i < size)\n  {\n    buffer[i++] = Wire.read();\n  }\n  return_value = Wire.endTransmission(true);\n  delayMicroseconds(1);\n  if(i != size)\n  {\n    return(I2C_ERROR);\n  }\n  return(0); //return: no error \n}\n\n/**\n * \\par Function\n *   readPixy2Data\n * \\par Description\n *   Write the data to i2c device.\n * \\param[in]\n *   start - the address which will write the data to.\n * \\param[in]\n *   pData - the head address of data array.\n * \\param[in]\n *   size - set the number of data will be written to the devide.\n * \\par Output\n *   None\n * \\return\n *   Return the error code.\n *   the definition of the value of variable return_value:\n *   0:success\n *   1:BUFFER_LENGTH is shorter than size\n *   2:address send, nack received\n *   3:data send, nack received\n *   4:other twi error\n *   refer to the arduino official library twi.c\n * \\par Others\n *   Calling the official i2c library to read data.\n */\nint8_t MeCamera::readPixy2Data(uint8_t start, uint8_t *buffer, uint8_t size)\n{\n  int8_t return_value;\n\n  return_value = writeReg(start, 0x00);\n  if(return_value == I2C_OK)\n  {\n    delay(2);\n    return_value = readData(start, &buffer[0], size);\n    if(return_value == I2C_OK)\n    {\n      return return_value;\n    }\n  }\n  return(I2C_ERROR);\n}\n\n/**\n * \\par Function\n *   writeData\n * \\par Description\n *   Write the data to i2c device.\n * \\param[in]\n *   start - the address which will write the data to.\n * \\param[in]\n *   pData - the head address of data array.\n * \\param[in]\n *   size - set the number of data will be written to the devide.\n * \\par Output\n *   None\n * \\return\n *   Return the error code.\n *   the definition of the value of variable return_value:\n *   0:success\n *   1:BUFFER_LENGTH is shorter than size\n *   2:address send, nack received\n *   3:data send, nack received\n *   4:other twi error\n *   refer to the arduino official library twi.c\n * \\par Others\n *   Calling the official i2c library to write data.\n */\nint8_t MeCamera::writeData(uint8_t start, const uint8_t *pData, uint8_t size)\n{\n  int8_t return_value = 0;\n  Wire.beginTransmission(Device_Address);\n  return_value = Wire.write(start);\n  if(return_value != 1)\n  {\n    return(I2C_ERROR);\n  }\n  Wire.write(pData, size);\n  return_value = Wire.endTransmission(true);\n  return(return_value); //return: no error                     \n}"},{filename:"src/MeCamera.h",code:"/**\n * \\par Copyright (C), 2012-2016, MakeBlock\n * \\class   MeCamera\n * \\brief   Driver for MeCamera module.\n * @file   MeCamera.h\n * @author  MakeBlock\n * @version V1.0.0\n * @date    2017/09/26\n * @brief   Header for MeCamera.cpp module.\n *\n * \\par Copyright\n * This software is Copyright (C), 2012-2016, MakeBlock. Use is subject to license \\n\n * conditions. The main licensing options available are GPL V2 or Commercial: \\n\n *\n * \\par Open Source Licensing GPL V2\n * This is the appropriate option if you want to share the source code of your \\n\n * application with everyone you distribute it to, and you also want to give them \\n\n * the right to share who uses it. If you wish to use this software under Open \\n\n * Source Licensing, you must contribute all your source code to the open source \\n\n * community in accordance with the GPL Version 2 when your application is \\n\n * distributed. See http://www.gnu.org/copyleft/gpl.html\n *\n * \\par Description\n * This file is a drive for MeCamera module, It supports MeCamera V1.0 device provided\n * by MakeBlock.\n *\n * \\par Method List:\n *\n *    1.void MeCamera::setpin(uint8_t AD0, uint8_t INT)\n *    2.void MeCamera::begin(void)\n *\n * \\par History:\n * <pre>\n * \"<Author>\"         \"<Time>\"        \"<Version>\"        \"<Descr>\"\n *  Payton            2017/09/26          1.0.0         rebuild the old lib.\n * </pre>\n *\n */\n\n/* Define to prevent recursive inclusion -------------------------------------*/\n#ifndef MeCamera_H\n#define MeCamera_H\n\n/* Includes ------------------------------------------------------------------*/\n#include <stdint.h>\n#include <stdbool.h>\n#include <Arduino.h>\n#include \"MeConfig.h\"\n#ifdef ME_PORT_DEFINED\n#include \"MePort.h\"\n#endif // ME_PORT_DEFINED\n\n/* Exported macro ------------------------------------------------------------*/\n#define I2C_ERROR                  \t\t\t\t\t\t(-1)\n#define I2C_OK                    \t\t\t\t\t\t(0)\n#define CAMERA_DEFAULT_ADDRESS        (0x25)\n#define CAMERA_DEVICE_ID\t\t\t\t\t\t\t(0xC1)\n\n#define CAMERA_NONE_DATA              (0x1F)\n#define CAMERA_NONE_BIG_DATA          (0x1F1F)\n\n// pixy work mode\n#define IDLE_MODE  0\n#define CCC_MODE    1\n#define LINE_MODE   2\n#define VIDEO_MODE  3\n\n// SIG INDEX\n#define SIG1    1\n#define SIG2    2\n#define SIG3    3\n#define SIG4    4\n#define SIG5    5\n#define SIG6    6\n#define SIG7    7\n\n//CCC value type\n#define  CCC_X   0\n#define  CCC_Y   1\n#define  CCC_W   2\n#define  CCC_H   3\n#define  CCC_NUM   4\n\n//Vector value type\n#define  VECTOR_X0   0\n#define  VECTOR_Y0   1\n#define  VECTOR_X1   2\n#define  VECTOR_Y1   3\n\n//intersection value type\n#define  INTERSECTION_X       0\n#define  INTERSECTION_Y       1\n#define  INTERSECTION_NUM     2\n\n//barcode value type\n#define  BARCODE_X         0\n#define  BARCODE_Y         1\n#define  BARCODE_NUM       2\n\n//video value type\n#define  VIDEO_R         0\n#define  VIDEO_G         1\n#define  VIDEO_B         2\n\n\n#define LIMIT(x, a) if( (((x) >= 0) && ((x) < (a))) ) (x) = a;\\\n                    else if( (((x) < 0) && ((x) >= -(a))) ) (x) = -a;\n\n\n//Camera IIC Register Address\n#define CAMERA_DEVICE_ID_ADDR   (0x01)\n#define  CCC1_X_LOW_ADDR        0X01\n#define  CCC1_X_HIGH_ADDR       0X02\n#define  CCC1_Y_LOW_ADDR        0X03\n#define  CCC1_Y_HIGH_ADDR       0X04\n#define  CCC1_W_LOW_ADDR        0X05\n#define  CCC1_W_HIGH_ADDR       0X06\n#define  CCC1_H_LOW_ADDR        0X07\n#define  CCC1_H_HIGH_ADDR       0X08\n#define  CCC1_ANGLE_LOW_ADDR    0X09\n#define  CCC1_ANGLE_HIGH_ADDR   0X0A\n#define  CCC1_INDEX_LOW_ADDR    0X0B\n#define  CCC1_INDEX_HIGH_ADDR   0X0C\n#define  CCC2_X_LOW_ADDR        0X0D\n#define  CCC2_X_HIGH_ADDR       0X0E\n#define  CCC2_Y_LOW_ADDR        0X0F\n#define  CCC2_Y_HIGH_ADDR       0X10\n#define  CCC2_W_LOW_ADDR        0X11\n#define  CCC2_W_HIGH_ADDR       0X12\n#define  CCC2_H_LOW_ADDR        0X13\n#define  CCC2_H_HIGH_ADDR       0X14\n#define  CCC2_ANGLE_LOW_ADDR    0X15\n#define  CCC2_ANGLE_HIGH_ADDR   0X16\n#define  CCC2_INDEX_LOW_ADDR    0X17\n#define  CCC2_INDEX_HIGH_ADDR   0X18\n#define  CCC3_X_LOW_ADDR        0X19\n#define  CCC3_X_HIGH_ADDR       0X1A\n#define  CCC3_Y_LOW_ADDR        0X1B\n#define  CCC3_Y_HIGH_ADDR       0X1C\n#define  CCC3_W_LOW_ADDR        0X1D\n#define  CCC3_W_HIGH_ADDR       0X1E\n#define  CCC3_H_LOW_ADDR        0X1F\n#define  CCC3_H_HIGH_ADDR       0X20\n#define  CCC3_ANGLE_LOW_ADDR    0X21\n#define  CCC3_ANGLE_HIGH_ADDR   0X22\n#define  CCC3_INDEX_LOW_ADDR    0X23\n#define  CCC3_INDEX_HIGH_ADDR   0X24\n#define  CCC4_X_LOW_ADDR        0X25\n#define  CCC4_X_HIGH_ADDR       0X26\n#define  CCC4_Y_LOW_ADDR        0X27\n#define  CCC4_Y_HIGH_ADDR       0X28\n#define  CCC4_W_LOW_ADDR        0X29\n#define  CCC4_W_HIGH_ADDR       0X2A\n#define  CCC4_H_LOW_ADDR        0X2B\n#define  CCC4_H_HIGH_ADDR       0X2C\n#define  CCC4_ANGLE_LOW_ADDR    0X2D\n#define  CCC4_ANGLE_HIGH_ADDR   0X2E\n#define  CCC4_INDEX_LOW_ADDR    0X2F\n#define  CCC4_INDEX_HIGH_ADDR   0X30\n#define  CCC5_X_LOW_ADDR        0X31\n#define  CCC5_X_HIGH_ADDR       0X32\n#define  CCC5_Y_LOW_ADDR        0X33\n#define  CCC5_Y_HIGH_ADDR       0X34\n#define  CCC5_W_LOW_ADDR        0X35\n#define  CCC5_W_HIGH_ADDR       0X36\n#define  CCC5_H_LOW_ADDR        0X37\n#define  CCC5_H_HIGH_ADDR       0X38\n#define  CCC5_ANGLE_LOW_ADDR    0X39\n#define  CCC5_ANGLE_HIGH_ADDR   0X3A\n#define  CCC5_INDEX_LOW_ADDR    0X3B\n#define  CCC5_INDEX_HIGH_ADDR   0X3C\n#define  CCC6_X_LOW_ADDR        0X3D\n#define  CCC6_X_HIGH_ADDR       0X3E\n#define  CCC6_Y_LOW_ADDR        0X3F\n#define  CCC6_Y_HIGH_ADDR       0X40\n#define  CCC6_W_LOW_ADDR        0X41\n#define  CCC6_W_HIGH_ADDR       0X42\n#define  CCC6_H_LOW_ADDR        0X43\n#define  CCC6_H_HIGH_ADDR       0X44\n#define  CCC6_ANGLE_LOW_ADDR    0X45\n#define  CCC6_ANGLE_HIGH_ADDR   0X46\n#define  CCC6_INDEX_LOW_ADDR    0X47\n#define  CCC6_INDEX_HIGH_ADDR   0X48\n#define  CCC7_X_LOW_ADDR        0X49\n#define  CCC7_X_HIGH_ADDR       0X4A\n#define  CCC7_Y_LOW_ADDR        0X4B\n#define  CCC7_Y_HIGH_ADDR       0X4C\n#define  CCC7_W_LOW_ADDR        0X4D\n#define  CCC7_W_HIGH_ADDR       0X4E\n#define  CCC7_H_LOW_ADDR        0X4F\n#define  CCC7_H_HIGH_ADDR       0X50\n#define  CCC7_ANGLE_LOW_ADDR    0X51\n#define  CCC7_ANGLE_HIGH_ADDR   0X52\n#define  CCC7_INDEX_LOW_ADDR    0X53\n#define  CCC7_INDEX_HIGH_ADDR   0X54\n#define  CCC_NUM_ADDR           0X55\n\n#define LINE_X0_ADDR            0X56\n#define LINE_Y0_ADDR            0X57\n#define LINE_X1_ADDR            0X58\n#define LINE_Y1_ADDR            0X59\n\n#define INTERSECTION_X_ADDR     0X5A\n#define INTERSECTION_Y_ADDR     0X5B\n#define INTERSECTION_NUM_ADDR   0X5C\n#define INTERSECTION_LINE1_ANGLE_LOW_ADDR   0X5D\n#define INTERSECTION_LINE1_ANGLE_HIGH_ADDR  0X5E\n#define INTERSECTION_LINE2_ANGLE_LOW_ADDR   0X5F\n#define INTERSECTION_LINE2_ANGLE_HIGH_ADDR  0X60\n#define INTERSECTION_LINE3_ANGLE_LOW_ADDR   0X61\n#define INTERSECTION_LINE3_ANGLE_HIGH_ADDR  0X62\n#define INTERSECTION_LINE4_ANGLE_LOW_ADDR   0X63\n#define INTERSECTION_LINE4_ANGLE_HIGH_ADDR  0X64\n#define INTERSECTION_LINE5_ANGLE_LOW_ADDR   0X65\n#define INTERSECTION_LINE5_ANGLE_HIGH_ADDR  0X66\n#define INTERSECTION_LINE6_ANGLE_LOW_ADDR   0X67\n#define INTERSECTION_LINE6_ANGLE_HIGH_ADDR  0X68\n#define INTERSECTION_INDEX_LOW_ADDR   0X69\n#define INTERSECTION_INDEX_HIGH_ADDR  0X6A\n\n#define BARCODE_NUM_ADDR        0X6F\n#define BARCODE0_X_ADDR         0X70\n#define BARCODE0_Y_ADDR         0X71\n#define BARCODE1_X_ADDR         0X72\n#define BARCODE1_Y_ADDR         0X73\n#define BARCODE2_X_ADDR         0X74\n#define BARCODE2_Y_ADDR         0X75\n#define BARCODE3_X_ADDR         0X76\n#define BARCODE3_Y_ADDR         0X77\n#define BARCODE4_X_ADDR         0X78\n#define BARCODE4_Y_ADDR         0X79\n#define BARCODE5_X_ADDR         0X7A\n#define BARCODE5_Y_ADDR         0X7B\n#define BARCODE6_X_ADDR         0X7C\n#define BARCODE6_Y_ADDR         0X7D\n#define BARCODE7_X_ADDR         0X7E\n#define BARCODE7_Y_ADDR         0X7F\n#define BARCODE8_X_ADDR         0X80\n#define BARCODE8_Y_ADDR         0X81\n#define BARCODE9_X_ADDR         0X82\n#define BARCODE9_Y_ADDR         0X83\n#define BARCODE10_X_ADDR        0X84\n#define BARCODE10_Y_ADDR        0X85\n#define BARCODE11_X_ADDR        0X86\n#define BARCODE11_Y_ADDR        0X87\n#define BARCODE12_X_ADDR        0X88\n#define BARCODE12_Y_ADDR        0X89\n#define BARCODE13_X_ADDR        0X8A\n#define BARCODE13_Y_ADDR        0X8B\n#define BARCODE14_X_ADDR        0X8C\n#define BARCODE14_Y_ADDR        0X8D\n#define BARCODE15_X_ADDR        0X8E\n#define BARCODE15_Y_ADDR        0X8F\n\n#define RGB_R_ADDR              0X90\n#define RGB_G_ADDR              0X91\n#define RGB_B_ADDR              0X92\n#define RGB_SATURATION_ADDR     0X93\n#define RGB_GRAY_ADDR           0X94\n#define RGB_X_ADDR              0X95\n#define RGB_Y_ADDR              0X97\n\n#define GET_KEY_STATE_ADDR      0X9A\n#define GET_STUDY_STATE_ADDR    0X9B\n\n#define SET_LINE_FOLLOW_MODE    0XA0\n#define SET_VECTOR_MODE         0XA1\n#define SET_DEFAULT_TURN_ANGLE  0XA2\n#define SET_NEXT_TURN_ANGLE     0XA4\n#define SET_CAMERA_BRIGHNESS    0XA6\n#define SET_RGB                 0XA7\n#define SET_LED                 0XAA\n#define SET_PIXY_MODE           0XAB\n#define SET_START_STUDY         0XAC\n#define SET_STUDY_TIME          0XAD\n\n/**\n * Class: MeCamera\n * \\par Description\n * Declaration of Class MeCamera\n */\n#ifndef ME_PORT_DEFINED\nclass MeCamera\n#else // !ME_PORT_DEFINED\nclass MeCamera : public MePort\n#endif // !ME_PORT_DEFINED\n{\npublic:\n#ifdef ME_PORT_DEFINED\n\n/**\n * Alternate Constructor which can call your own function to map the MeCompass to arduino port\n * no pins are used or initialized here, but PWM frequency set to 976 Hz\n * \\param[in]\n *   port - RJ25 port from PORT_1 to PORT_4\n */\n  MeCamera(uint8_t port);\n#else\n/**\n * Alternate Constructor which can call your own function to map the AD0 and INT to arduino port,\n * no pins are used or initialized here\n * \\param[in]\n *   AD0 - arduino gpio number\n * \\param[in]\n *   INT - arduino gpio number\n */\n MeCamera(uint8_t AD0, uint8_t INT);\n\n#endif  //  ME_PORT_DEFINED\n/**\n * \\par Function\n *   setpin\n * \\par Description\n *   Set the PIN of the button module.\n * \\param[in]\n *   AD0 - pin mapping for arduino\n * \\param[in]\n *   INT - pin mapping for arduino\n * \\par Output\n *   None\n * \\return\n *   None.\n * \\par Others\n *   Set global variable _AD0, _INT, s1 and s2\n */\n  void setpin(uint8_t AD0, uint8_t INT);\n\n/**\n * \\par Function\n *   begin\n * \\par Description\n *   Initialize the MeCamera.\n * \\param[in]\n *   None\n * \\par Output\n *   None\n * \\return\n *   None\n * \\par Others\n *   None\n */\n  void begin();\n\n/**\n * \\par Function\n *   setCameraMode\n * \\par Description\n *   Set camera in mode: IDLE_MODE / CCC_MODE / LINE_MODE / VIDEO_MODE\n *   Setting mode delay time 500ms ~ 1500ms.\n *   mode: IDLE_MODE / CCC_MODE / LINE_MODE / VIDEO_MODE\n * \\par Output\n *   None\n * \\return\n *   0:  set sucess\n *   -1: set fail\n * \\par Others\n */\n  int8_t setCameraMode(uint8_t mode);\n\n/**\n * \\par Function\n *   setLineMode\n * \\par Description\n *   Set line follow mode\n * \\param[in]\n *   mode: \n *   0 - find dark lines on a light background (black lines)\n  *  1 - find light lines on a dark background (white lines)\n * \\par Output\n *   None\n * \\return\n *   0: set sucess\n *   -1:set fail\n * \\par Others\n */\n  int8_t setLineMode(uint8_t mode);\n\n/**\n * \\par Function\n *   setLED\n * \\par Description\n *   Set Supplementary lamp status\n * \\param[in]\n *   onOff: \n *   0 - Turn off the supplementary light\n  *  1 - Turn on the supplementary light\n * \\par Output\n *   None\n * \\return\n *   0: set sucess\n *   -1:set fail\n * \\par Others\n */\n  int8_t setLED(uint8_t onOff);\n\n/**\n * \\par Function\n *   startStudyCCC\n * \\par Description\n *   Start enter study CCC\n * \\param[in]\n *    sig - color signatures, numbered 1-7\n *    times - study timeout ,unit 1s\n * \\par Output\n *   None\n * \\return\n *   0: study  sucess\n *   -1:study  fail\n * \\par Others\n */\n  int8_t startStudyCCC(uint8_t sig, uint8_t times);\n\n/**\n * \\par Function\n *   getCCCValue\n * \\par Description\n *   get CCC value\n * \\param[in]\n *   sig - color signatures, numbered 1-7\n *   type - data type, CCC_X/CCC_Y/CCC_W/CCC_H\n * \\par Output\n *   None\n * \\return\n *   Return the value of CCC:\n *    - x-axis value ranges between 0 and 319\n *    - y-axis value ranges between 0 and 239\n *    - width value ranges between 0 and 320\n *    - height value ranges between 0 and 240\n * \\par Others\n */\n  uint16_t getCCCValue(uint8_t sig, uint8_t type);\n\n/**\n * \\par Function\n *   getVectorValue\n * \\par Description\n *   get the value of the Vector or line\n * \\param[in]\n *   type - data type, VECTOR_X0/VECTOR_Y0/VECTOR_X1/VECTOR_Y1\n * \\par Output\n *   None\n * \\return\n *   Return the value of the vector:\n *   - x0 value ranges between 0 and 319\n *   - y0 value ranges between 0 and 239\n *   - x1 value ranges between 0 and 319\n *   - y1 value ranges between 0 and 239\n * \\par Others\n */\n  uint16_t getVectorValue(uint8_t type);\n\n/**\n * \\par Function\n *   getIntersectionValue\n * \\par Description\n *   get the value of the intersection\n * \\param[in]\n *   type - data type, INTERSECTION_X/INTERSECTION_Y/INTERSECTION_NUM\n * \\par Output\n *   None\n * \\return\n *   Return the value of the intersection:\n *   - x-axis value ranges between 0 and 319\n *   - y-axis value ranges between 0 and 239\n *   - num the number of lines (branches), ranges between 0 and 6\n * \\par Others\n */\n  uint16_t getIntersectionValue(uint8_t type);\n\n/**\n * \\par Function\n *   getIntersectionAngle\n * \\par Description\n *   get the angle in degrees of the line\n * \\param[in]\n *   index: the tracking index of the line, 1 ~ 6\n * \\par Output\n *   None\n * \\return\n *   Return the angle in degrees of the line, The value ranges between -180 and 180\n * \\par Others\n */\n  int16_t getIntersectionAngle(uint8_t index);\n\n/**\n * \\par Function\n *   getBarCodeValue\n * \\par Description\n *   get the value location of the barcode.\n * \\param[in]\n *   code - value of the code, The value ranges between 0 and 15\n *   type - data type, BARCODE_X/BARCODE_Y\n * \\par Output\n *   None\n * \\return\n *   the value of the barcode:\n *   - x-axis value ranges between 0 and 319\n *   - y-axis value ranges between 0 and 239\n * \\par Others\n */\n  uint16_t getBarCodeValue(uint8_t code, uint8_t type);\n\n/**\n * \\par Function\n *   setMotorDiffSpeedKp\n * \\par Description\n *   Set left/right Motor differential speed sensitivity\n * \\param[in]\n *   kp: 0 ~ 1\n * \\par Output\n *   None\n * \\return\n *   None\n * \\par Others\n */\n  void setMotorDiffSpeedKp(float _kp);\n\n/**\n * \\par Function\n *   getFollowColorValue\n * \\par Description\n *   When automatically following the color block: Get left/right Motor differential speed value\n * \\param[in]\n *    sig - color signatures, numbered 1-7\n *   x - x axis location in the image, 0 ~ 319, -1 invalid\n *   y - y axis location in the image, 0 ~ 239, -1 invalid\n * \\par Output\n *   None\n * \\return\n *   Motor differential speed value: -100 ~ 100\n * \\par Others\n */\n  int16_t getFollowColorValue(uint8_t sig, int16_t x, int16_t y);\n\n/**\n * \\par Function\n *   getFollowBarcodeValue\n * \\par Description\n *   When automatically following the barcode: Get left/right Motor differential speed value\n * \\param[in]\n *   code - value of the barcode, The value ranges between 0 and 15\n *   x - x axis location in the image, 0 ~ 319, -1 invalid\n *   y - y axis location in the image, 0 ~ 239, -1 invalid\n * \\par Output\n *   None\n * \\return\n *   Motor differential speed value: -100 ~ 100\n * \\par Others\n */\n  int16_t getFollowBarcodeValue(uint8_t code, int16_t x, int16_t y);\n\n/**\n * \\par Function\n *   getFollowVectorValue\n * \\par Description\n *   When automatically following the vector: Get left/right Motor differential speed value\n * \\param[in]\n *   None\n * \\par Output\n *   None\n * \\return\n *   Motor differential speed value: -100 ~ 100\n * \\par Others\n */\n  int16_t getFollowVectorValue(void);\n\n/**\n * \\par Function\n *   isLockedCCC\n * \\par Description\n *   is locked the color block?\n * \\param[in]\n *   sig - color signatures, numbered 1-7\n *   x - x axis location in the image, 0 ~ 319, -1 invalid\n *   y - y axis location in the image, 0 ~ 239, -1 invalid\n * \\par Output\n *   None\n * \\return\n *   true - Lock the target position\n *   false - No Lock the target position\n * \\par Others\n */\n  bool isLockedCCC(uint8_t sig, int16_t x, int16_t y);\n\n/**\n * \\par Function\n *   isLockedBarcode\n * \\par Description\n *   is locked the Barcode?\n * \\param[in]\n *   code - value of the barcode, The value ranges between 0 and 15\n *   x - x axis location in the image, 0 ~ 319, -1 invalid\n *   y - y axis location in the image, 0 ~ 239, -1 invalid\n * \\par Output\n *   None\n * \\return\n *   true - Lock the target position\n *   false - No Lock the target position\n * \\par Others\n */\n  bool isLockedBarcode(uint8_t code, int16_t x, int16_t y);\n\nprivate:\n  uint8_t i2cData[8];\n  uint8_t Device_Address;\n  uint8_t pixy_work_mode;\n  int16_t motor_diff_speed;\n  uint8_t led_change_flag;\n  float kp;\n  \n/**\n * \\par Function\n *   writeReg\n * \\par Description\n *   Write the registor of i2c device.\n * \\param[in]\n *   reg - the address of registor.\n * \\param[in]\n *   data - the data that will be written to the registor.\n * \\par Output\n *   None\n * \\return\n *   Return the error code.\n *   the definition of the value of variable return_value:\n *   0:success\n *   1:BUFFER_LENGTH is shorter than size\n *   2:address send, nack received\n *   3:data send, nack received\n *   4:other twi error\n *   refer to the arduino official library twi.c\n * \\par Others\n *   To set the registor for initializing.\n */\n  int8_t writeReg(uint8_t reg, uint8_t data);\n\n/**\n * \\par Function\n *   readData\n * \\par Description\n *   Write the data to i2c device.\n * \\param[in]\n *   start - the address which will write the data to.\n * \\param[in]\n *   pData - the head address of data array.\n * \\param[in]\n *   size - set the number of data will be written to the devide.\n * \\par Output\n *   None\n * \\return\n *   Return the error code.\n *   the definition of the value of variable return_value:\n *   0:success\n *   1:BUFFER_LENGTH is shorter than size\n *   2:address send, nack received\n *   3:data send, nack received\n *   4:other twi error\n *   refer to the arduino official library twi.c\n * \\par Others\n *   Calling the official i2c library to read data.\n */\n  int8_t readData(uint8_t start, uint8_t *buffer, uint8_t size);\n\n/**\n * \\par Function\n *   readPixy2Data\n * \\par Description\n *   Write the data to i2c device.\n * \\param[in]\n *   start - the address which will write the data to.\n * \\param[in]\n *   pData - the head address of data array.\n * \\param[in]\n *   size - set the number of data will be written to the devide.\n * \\par Output\n *   None\n * \\return\n *   Return the error code.\n *   the definition of the value of variable return_value:\n *   0:success\n *   1:BUFFER_LENGTH is shorter than size\n *   2:address send, nack received\n *   3:data send, nack received\n *   4:other twi error\n *   refer to the arduino official library twi.c\n * \\par Others\n *   Calling the official i2c library to read data.\n */\n  int8_t readPixy2Data(uint8_t start, uint8_t *buffer, uint8_t size);\n\n\n/**\n * \\par Function\n *   writeData\n * \\par Description\n *   Write the data to i2c device.\n * \\param[in]\n *   start - the address which will write the data to.\n * \\param[in]\n *   pData - the head address of data array.\n * \\param[in]\n *   size - set the number of data will be written to the devide.\n * \\par Output\n *   None\n * \\return\n *   Return the error code.\n *   the definition of the value of variable return_value:\n *   0:success\n *   1:BUFFER_LENGTH is shorter than size\n *   2:address send, nack received\n *   3:data send, nack received\n *   4:other twi error\n *   refer to the arduino official library twi.c\n * \\par Others\n *   Calling the official i2c library to write data.\n */\n  int8_t writeData(uint8_t start, const uint8_t *pData, uint8_t size);\n};\n#endif //  MeCamera_H\n"}]},ExtHandler={onLoad:function onLoad(app,target){return _asyncToGenerator(regeneratorRuntime.mark(function _callee2(){var account,isLogin,_app$workspace8;return regeneratorRuntime.wrap(function(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:if(account=app.getService("account"),!account){_context2.next=8;break}return _context2.next=4,account.isLogin();case 4:isLogin=_context2.sent,isLogin||(_app$workspace8=app.workspace).disableBlocks.apply(_app$workspace8,mustLoginBlocks),account.onLogin(function(){var _app$workspace9;(_app$workspace9=app.workspace).enableBlocks.apply(_app$workspace9,mustLoginBlocks)}),account.onLogout(function(){var _app$workspace10;(_app$workspace10=app.workspace).disableBlocks.apply(_app$workspace10,mustLoginBlocks)});case 8:target&&"function"==typeof target.isUploadMode&&triggerBlocksStatus(target.isUploadMode()?"upload":"debug",app);case 9:case"end":return _context2.stop();}},_callee2)}))()},onUnload:function onUnload(){},onConnect:function onConnect(){},onDisconnect:function onDisconnect(){},onStopAll:function onStopAll(){},beforeChangeUploadMode:function beforeChangeUploadMode(){return _asyncToGenerator(regeneratorRuntime.mark(function _callee3(){return regeneratorRuntime.wrap(function(_context3){for(;;)switch(_context3.prev=_context3.next){case 0:return _context3.abrupt("return",!0);case 1:case"end":return _context3.stop();}},_callee3)}))()},beforeChangeDebugMode:function beforeChangeDebugMode(){return _asyncToGenerator(regeneratorRuntime.mark(function _callee4(){return regeneratorRuntime.wrap(function(_context4){for(;;)switch(_context4.prev=_context4.next){case 0:return _context4.abrupt("return",!0);case 1:case"end":return _context4.stop();}},_callee4)}))()},afterChangeUploadMode:function afterChangeUploadMode(app,device){return triggerBlocksStatus("upload",app,device),!0},afterChangeDebugMode:function afterChangeDebugMode(app,device){return triggerBlocksStatus("debug",app,device),!0},onSelect:function onSelect(app,device){setTimeout(function(){triggerBlocksStatus(device.isUploadMode()?"upload":"debug",app,device)},0)},onUnselect:function onUnselect(app,device){triggerBlocksStatus("",app,device)},beforeCodeUpload:function beforeCodeUpload(){},afterCodeUpload:function afterCodeUpload(){},onRead:function onRead(){}},ExtMegapiMbuildCamera=function(){function ExtMegapiMbuildCamera(){_classCallCheck(this,ExtMegapiMbuildCamera),this.checkFirmwareInForce="undefined"!=typeof checkFirmwareInForce&&checkFirmwareInForce,this.funcs={megapi_1566200222835:{onRun:function onRun(){}},megapiCameraSwitchColorModeCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraSwitchColorModeCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapi_camera_switch_color_mode:{onRun:function onRun(){}},megapiCameraRecognizeColorCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraRecognizeColorCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapi_camera_recognize_color:{onRun:function onRun(){}},megapi_camera_center_saturation:{onRun:function onRun(){}},megapiCameraGetColorCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraGetColorCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapiCameraGetColorCodesCode:["MeCamera_/*{PORT}*/.getCCCValue(/*{SIG}*/, 0)"],megapi_camera_get_color:{onRun:function onRun(){}},megapiCameraColorInCenterCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraColorInCenterCodesDeclare:["uint8_t getCCC_location(uint8_t sig, uint8_t location, uint16_t x, uint16_t y){\n    int a,b,c,d;\n    switch(location)\n    {\n        \n        case 1:\n        if((130 < x) && (x < 190) && (100 < y) && (y < 140))\n         return true;\n        else\n          return false;\n\n        case 2:\n         a = (0-320)*(y);\n         b = (130 -  0)*(y) - 100*(x);\n         c = (190 - 130)*(y - 100);\n         d = (320 - 190)*(y - 100) - (0 - 100)*(x - 190);\n        if(a < 0 && b < 0 && c < 0 && d < 0)\n        {\n            return true;\n        }\n        else{\n            return false;\n        }\n\n        case 3:\n         a = (190 - 130)*(y - 140);\n         b = (320 -  190)*(y - 140) - 100*(x - 190);\n         c = (0 - 320)*(y - 240);\n         d = (130 - 0)*(y - 240) - (140 - 240)*(x);\n        if(a > 0 && b > 0 && c > 0 && d > 0)\n        {\n            return true;\n        }\n        else{\n            return false;\n        }\n\n        case 4:\n         a = -(40)*(x - 130);\n         b = (0 -  130)*(y-140) - (240-140)*(x - 130);\n         c = -(0 - 240)*(x);\n         d = (130 - 0)*(y) - (100)*(x);\n        if(a > 0 && b > 0 && c > 0 && d > 0)\n        {\n            return true;\n        }\n        else{\n            return false;\n        }\n\n        case 5:\n         a = (190 - 320)*(y)-(100)*(x - 320);\n         b = -(140-100)*(x - 190);\n         c = (320 - 190)*(y - 140)-(240 - 140)*(x - 190);\n         d = -(0 - 240)*(x - 320);\n        if(a < 0 && b < 0 && c < 0 && d < 0)\n        {\n            return true;\n        }\n        else{\n            return false;\n        }\n\n        default: return false;\n    }\n}"],megapiCameraColorInCenterCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapi_camera_color_in_center:{onRun:function onRun(){}},megapiCameraColorCoordinateCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraColorCoordinateCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapi_camera_color_coordinate:{onRun:function onRun(){}},megapiCameraTurnOnLightCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraTurnOnLightCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapi_camera_turn_on_light:{onRun:function onRun(){}},megapiCameraSetWhiteBalanceCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraSetWhiteBalanceCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapi_camera_set_white_balance:{onRun:function onRun(){}},megapi_camera_1566200222835:{onRun:function onRun(){}},megapiCameraSwitchLineQrcodeModeCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraSwitchLineQrcodeModeCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapi_camera_switch_line_qrcode_mode:{onRun:function onRun(){}},megapiCameraGetQrcodeMoveCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraGetQrcodeMoveCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapiCameraGetQrcodeMoveCodesCode:["MeCamera_/*{PORT}*/.getBarCodeValue(/*{BARCODE}*/, 0)"],megapi_camera_get_qrcode_move:{onRun:function onRun(){}},megapiCameraGetQrcodeCoordinateCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraGetQrcodeCoordinateCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapi_camera_get_qrcode_coordinate:{onRun:function onRun(){}},megapiCameraLineStartCoordinateCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraLineStartCoordinateCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapi_camera_line_start_coordinate:{onRun:function onRun(){}},megapiCameraGetCrossCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraGetCrossCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapiCameraGetCrossCodesCode:["MeCamera_/*{PORT}*/.getIntersectionValue(2)"],megapi_camera_get_cross:{onRun:function onRun(){}},megapiCameraCorssCoordinateCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraCorssCoordinateCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapi_camera_corss_coordinate:{onRun:function onRun(){}},megapiCameraGetBranchNumCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraGetBranchNumCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapi_camera_get_branch_num:{onRun:function onRun(){}},megapiCameraGetBranchAngleCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraGetBranchAngleCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapiCameraGetBranchAngleCodesCode:function megapiCameraGetBranchAngleCodesCode(args){return(""==args.NUMBER||null==args.NUMBER||"None"==args.NUMBER)&&(args.NUMBER=0),"MeCamera_".concat(args.PORT,".getIntersectionAngle(").concat(args.NUMBER,")")},megapi_camera_get_branch_angle:{onRun:function onRun(){}},megapiCameraSetLineModeCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraSetLineModeCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapi_camera_set_line_mode:{onRun:function onRun(){}},megapiCamera1566200454757CodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCamera1566200454757CodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapi_camera_1566200454757:{onRun:function onRun(){}},megapiCamera1566200474887CodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCamera1566200474887CodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapi_camera_1566200474887:{onRun:function onRun(){}},megapiCameraSetKpCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraSetKpCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapiCameraSetKpCodesCode:function megapiCameraSetKpCodesCode(args){return(""==args.KP||null==args.KP||"None"==args.KP)&&(args.KP=0),"\nMeCamera_".concat(args.PORT,".setMotorDiffSpeedKp(").concat(args.KP,");")},megapi_camera_set_kp:{onRun:function onRun(){}},megapiCameraFollowColorCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraFollowColorCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapiCameraFollowColorCodesCode:function megapiCameraFollowColorCodesCode(args){return((""==args.NUMBER||null==args.NUMBER||"None"==args.NUMBER)&&(args.NUMBER=0),"0"==args.LOCATION)?"MeCamera_".concat(args.PORT,".getFollowColorValue(").concat(args.SIG,", ").concat(args.NUMBER,", -1)"):"1"==args.LOCATION?"MeCamera_".concat(args.PORT,".getFollowColorValue(").concat(args.SIG,", -1, ").concat(args.NUMBER,")"):void 0},megapi_camera_follow_color:{onRun:function onRun(){}},megapiCameraFollowQrcodeCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraFollowQrcodeCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapiCameraFollowQrcodeCodesCode:function megapiCameraFollowQrcodeCodesCode(args){return(""==args.NUMBER||null==args.NUMBER||"None"==args.NUMBER)&&(args.NUMBER=0),"0"==args.LOCATION?"MeCamera_".concat(args.PORT,".getFollowBarcodeValue(").concat(args.BARCODE,", ").concat(args.NUMBER,", -1)"):"MeCamera_".concat(args.PORT,".getFollowBarcodeValue(").concat(args.BARCODE,", -1, ").concat(args.NUMBER,")")},megapi_camera_follow_qrcode:{onRun:function onRun(){}},megapiCameraGetDiffSpeedCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraGetDiffSpeedCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapi_camera_get_diff_speed:{onRun:function onRun(){}},megapiCameraLockColorCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraLockColorCodesSetup:["MeCamera_/*{PORT}*/.begin();"],megapiCameraLockColorCodesCode:function megapiCameraLockColorCodesCode(args){return(""==args.NUMBER||null==args.NUMBER||"None"==args.NUMBER)&&(args.NUMBER=0),"0"==args.LOCATION?"MeCamera_".concat(args.PORT,".isLockedCCC(").concat(args.SIG,", ").concat(args.NUMBER,", -1)"):"MeCamera_".concat(args.PORT,".isLockedCCC(").concat(args.SIG,", -1, ").concat(args.NUMBER,")")},megapi_camera_lock_color:{onRun:function onRun(){}},megapiCameraLockQrcodeCodesLib:["MeCamera MeCamera_/*{PORT}*/(/*{PORT}*/);"],megapiCameraLockQrcodeCodesCode:function megapiCameraLockQrcodeCodesCode(args){return(""==args.NUMBER||null==args.NUMBER||"None"==args.NUMBER)&&(args.NUMBER=0),"0"==args.LOCATION?"MeCamera_".concat(args.PORT,".isLockedBarcode(").concat(args.BARCODE,", ").concat(args.NUMBER,", -1)"):"MeCamera_".concat(args.PORT,".isLockedBarcode(").concat(args.BARCODE,", -1, ").concat(args.NUMBER,")")},megapi_camera_lock_qrcode:{onRun:function onRun(){}}}}return _createClass(ExtMegapiMbuildCamera,[{key:"getInfo",value:function getInfo(){return{id:"megapi_mbuild_camera",targets:[{name:"megapi",options:{upload:{middlewares:[{name:"arduino",params:{sources:extSources.arduino}}]}}}],codeTypes:["arduinoc"],version:"0.0.1",platform:["mblockpc","mblockweb"],categories:[{name:"cate_6aae53c0",colors:["#0AAD80","#099C73","#088A66"],menuIconURI:window.MbApi.getExtResPath("megapi_mbuild_camera/imgs/59307c129b144b738a9bc5fe0aec818b.svg","megapi_mbuild_camera"),blockIcon:{type:"image",width:28,height:26,src:window.MbApi.getExtResPath("megapi_mbuild_camera/imgs/1f257e93b9b64ca6bc0798e54c83935d.svg","megapi_mbuild_camera")},blocks:[{opcode:"megapi_1566200222835",blockType:"button",checkboxInFlyout:!1,hidden:!0,gap:36,arguments:{},branchCount:0,platform:["mblockpc","mblockweb"],handler:this.funcs.megapi_1566200222835},{opcode:"megapi_camera_switch_color_mode",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:36,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"MeCamera_/*{PORT}*/.setCameraMode(CCC_MODE);",sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraSwitchColorModeCodesLib,setup:this.funcs.megapiCameraSwitchColorModeCodesSetup}}},handler:this.funcs.megapi_camera_switch_color_mode},{opcode:"megapi_camera_recognize_color",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},SIG:{type:"fieldMenu",defaultValue:"1",menu:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"MeCamera_/*{PORT}*/.startStudyCCC(/*{SIG}*/, 0);",sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraRecognizeColorCodesLib,setup:this.funcs.megapiCameraRecognizeColorCodesSetup}}},handler:this.funcs.megapi_camera_recognize_color},{opcode:"megapi_camera_center_saturation",blockType:"number",checkboxInFlyout:!0,hidden:!0,gap:12,arguments:{fieldMenu_1:{type:"fieldMenu",defaultValue:"\u9971\u548C\u5EA6",menu:"MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1"},fieldMenu_2:{type:"fieldMenu",defaultValue:"\u4E2D\u5FC3",menu:"MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],handler:this.funcs.megapi_camera_center_saturation},{opcode:"megapi_camera_get_color",blockType:"boolean",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},SIG:{type:"fieldMenu",defaultValue:"1",menu:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:this.funcs.megapiCameraGetColorCodesCode,sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraGetColorCodesLib,setup:this.funcs.megapiCameraGetColorCodesSetup}}},handler:this.funcs.megapi_camera_get_color},{opcode:"megapi_camera_color_in_center",blockType:"boolean",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},SIG:{type:"fieldMenu",defaultValue:"1",menu:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG"},LOCATION:{type:"fieldMenu",defaultValue:"1",menu:"MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"getCCC_location(/*{SIG}*/, /*{LOCATION}*/, MeCamera_/*{PORT}*/.getCCCValue(/*{SIG}*/, 0), MeCamera_/*{PORT}*/.getCCCValue(/*{SIG}*/, 1))",sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraColorInCenterCodesLib,declare:this.funcs.megapiCameraColorInCenterCodesDeclare,setup:this.funcs.megapiCameraColorInCenterCodesSetup}}},handler:this.funcs.megapi_camera_color_in_center},{opcode:"megapi_camera_color_coordinate",blockType:"number",checkboxInFlyout:!1,hidden:!1,gap:36,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},SIG:{type:"fieldMenu",defaultValue:"1",menu:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG"},CCCINFO:{type:"fieldMenu",defaultValue:"0",menu:"MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"MeCamera_/*{PORT}*/.getCCCValue(/*{SIG}*/, /*{CCCINFO}*/)",sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraColorCoordinateCodesLib,setup:this.funcs.megapiCameraColorCoordinateCodesSetup}}},handler:this.funcs.megapi_camera_color_coordinate},{opcode:"megapi_camera_turn_on_light",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},STATE:{type:"fieldMenu",defaultValue:"1",menu:"MEGAPI_CAMERA_TURN_ON_LIGHT_STATE"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"MeCamera_/*{PORT}*/.setLED(/*{STATE}*/);",sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraTurnOnLightCodesLib,setup:this.funcs.megapiCameraTurnOnLightCodesSetup}}},handler:this.funcs.megapi_camera_turn_on_light},{opcode:"megapi_camera_set_white_balance",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:36,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"MeCamera_/*{PORT}*/.startStudyCCC(8, 5);",sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraSetWhiteBalanceCodesLib,setup:this.funcs.megapiCameraSetWhiteBalanceCodesSetup}}},handler:this.funcs.megapi_camera_set_white_balance}],menus:{MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT:[{text:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0",value:"6"},{text:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1",value:"7"},{text:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2",value:"8"}],MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG:[{text:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0",value:"1"},{text:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1",value:"2"},{text:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2",value:"3"},{text:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3",value:"4"},{text:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4",value:"5"},{text:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5",value:"6"},{text:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6",value:"7"}],MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2:[{text:"MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_0",value:"\u4E2D\u5FC3"},{text:"MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_2_1",value:"\u5E73\u5747"}],MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1:[{text:"MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_0",value:"\u9971\u548C\u5EA6"},{text:"MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_1",value:"R\u503C"},{text:"MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_2",value:"G\u503C"},{text:"MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_3",value:"B\u503C"},{text:"MEGAPI_CAMERA_CENTER_SATURATION_FIELDMENU_1_4",value:"\u7070\u5EA6"}],MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION:[{text:"MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_0",value:"1"},{text:"MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_1",value:"2"},{text:"MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_2",value:"3"},{text:"MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_3",value:"4"},{text:"MEGAPI_CAMERA_COLOR_IN_CENTER_LOCATION_4",value:"5"}],MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO:[{text:"MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_0",value:"0"},{text:"MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_1",value:"1"},{text:"MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_2",value:"2"},{text:"MEGAPI_CAMERA_COLOR_COORDINATE_CCCINFO_3",value:"3"}],MEGAPI_CAMERA_TURN_ON_LIGHT_STATE:[{text:"MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_0",value:"1"},{text:"MEGAPI_CAMERA_TURN_ON_LIGHT_STATE_1",value:"0"}]}},{name:"cate_aff8824d",colors:["#0AAD80","#099C73","#088A66"],menuIconURI:window.MbApi.getExtResPath("megapi_mbuild_camera/imgs/a812fdd043874453ac1b0c38030a1454.svg","megapi_mbuild_camera"),blockIcon:{type:"image",width:28,height:26,src:window.MbApi.getExtResPath("megapi_mbuild_camera/imgs/5b7c3e3a66cb4029a9dbf61a4838a06c.svg","megapi_mbuild_camera")},blocks:[{opcode:"megapi_camera_1566200222835",blockType:"button",checkboxInFlyout:!1,hidden:!0,gap:36,arguments:{},branchCount:0,platform:["mblockpc","mblockweb"],handler:this.funcs.megapi_camera_1566200222835},{opcode:"megapi_camera_switch_line_qrcode_mode",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:36,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"MeCamera_/*{PORT}*/.setCameraMode(LINE_MODE);",sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraSwitchLineQrcodeModeCodesLib,setup:this.funcs.megapiCameraSwitchLineQrcodeModeCodesSetup}}},handler:this.funcs.megapi_camera_switch_line_qrcode_mode},{opcode:"megapi_camera_get_qrcode_move",blockType:"boolean",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},BARCODE:{type:"fieldMenu",defaultValue:"1",menu:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:this.funcs.megapiCameraGetQrcodeMoveCodesCode,sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraGetQrcodeMoveCodesLib,setup:this.funcs.megapiCameraGetQrcodeMoveCodesSetup}}},handler:this.funcs.megapi_camera_get_qrcode_move},{opcode:"megapi_camera_get_qrcode_coordinate",blockType:"number",checkboxInFlyout:!1,hidden:!1,gap:36,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},BARCODE:{type:"fieldMenu",defaultValue:"1",menu:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE"},BARCODEINFO:{type:"fieldMenu",defaultValue:"0",menu:"MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"MeCamera_/*{PORT}*/.getBarCodeValue(/*{BARCODE}*/, /*{BARCODEINFO}*/)",sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraGetQrcodeCoordinateCodesLib,setup:this.funcs.megapiCameraGetQrcodeCoordinateCodesSetup}}},handler:this.funcs.megapi_camera_get_qrcode_coordinate},{opcode:"megapi_camera_line_start_coordinate",blockType:"number",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},LINEINFO:{type:"fieldMenu",defaultValue:"0",menu:"MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO"}},branchCount:0,platform:["mblockpc","mblockapp","mblockweb"],codes:{arduinoc:{code:"MeCamera_/*{PORT}*/.getVectorValue(/*{LINEINFO}*/)",sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraLineStartCoordinateCodesLib,setup:this.funcs.megapiCameraLineStartCoordinateCodesSetup}}},handler:this.funcs.megapi_camera_line_start_coordinate},{opcode:"megapi_camera_get_cross",blockType:"boolean",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:this.funcs.megapiCameraGetCrossCodesCode,sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraGetCrossCodesLib,setup:this.funcs.megapiCameraGetCrossCodesSetup}}},handler:this.funcs.megapi_camera_get_cross},{opcode:"megapi_camera_corss_coordinate",blockType:"number",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},COORDINATES:{type:"fieldMenu",defaultValue:"0",menu:"MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"MeCamera_/*{PORT}*/.getIntersectionValue(/*{COORDINATES}*/)",sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraCorssCoordinateCodesLib,setup:this.funcs.megapiCameraCorssCoordinateCodesSetup}}},handler:this.funcs.megapi_camera_corss_coordinate},{opcode:"megapi_camera_get_branch_num",blockType:"number",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"MeCamera_/*{PORT}*/.getIntersectionValue(2)",sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraGetBranchNumCodesLib,setup:this.funcs.megapiCameraGetBranchNumCodesSetup}}},handler:this.funcs.megapi_camera_get_branch_num},{opcode:"megapi_camera_get_branch_angle",blockType:"number",checkboxInFlyout:!1,hidden:!1,gap:36,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},NUMBER:{type:"number",defaultValue:1}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:this.funcs.megapiCameraGetBranchAngleCodesCode,sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraGetBranchAngleCodesLib,setup:this.funcs.megapiCameraGetBranchAngleCodesSetup}}},handler:this.funcs.megapi_camera_get_branch_angle},{opcode:"megapi_camera_set_line_mode",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},LINEMODE:{type:"fieldMenu",defaultValue:"0",menu:"MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"MeCamera_/*{PORT}*/.setLineMode(/*{LINEMODE}*/);",sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraSetLineModeCodesLib,setup:this.funcs.megapiCameraSetLineModeCodesSetup}}},handler:this.funcs.megapi_camera_set_line_mode},{opcode:"megapi_camera_1566200454757",blockType:"command",checkboxInFlyout:!1,hidden:!0,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},ANGLE:{type:"number",defaultValue:0}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"MeCamera_/*{PORT}*/.setNextTurnAngle(/*{ANGLE}*/);",sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCamera1566200454757CodesLib,setup:this.funcs.megapiCamera1566200454757CodesSetup}}},handler:this.funcs.megapi_camera_1566200454757},{opcode:"megapi_camera_1566200474887",blockType:"number",checkboxInFlyout:!1,hidden:!0,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"MeCamera_/*{PORT}*/.getNextTurnAngle()",sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCamera1566200474887CodesLib,setup:this.funcs.megapiCamera1566200474887CodesSetup}}},handler:this.funcs.megapi_camera_1566200474887}],menus:{MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT:[{text:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0",value:"6"},{text:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1",value:"7"},{text:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2",value:"8"}],MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE:[{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0",value:"1"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1",value:"2"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2",value:"3"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3",value:"4"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4",value:"5"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5",value:"6"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6",value:"7"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7",value:"8"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8",value:"9"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9",value:"10"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10",value:"11"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11",value:"12"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12",value:"13"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13",value:"14"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14",value:"15"}],MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO:[{text:"MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0",value:"0"},{text:"MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1",value:"1"}],MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO:[{text:"MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_0",value:"0"},{text:"MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_1",value:"1"},{text:"MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_2",value:"2"},{text:"MEGAPI_CAMERA_LINE_START_COORDINATE_LINEINFO_3",value:"3"}],MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE:[{text:"MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_0",value:"0"},{text:"MEGAPI_CAMERA_SET_LINE_MODE_LINEMODE_1",value:"1"}]}},{name:"cate_41d9cfb5",colors:["#0AAD80","#099C73","#088A66"],menuIconURI:window.MbApi.getExtResPath("megapi_mbuild_camera/imgs/a7b5f3844eda406ea1677af13f00ad43.svg","megapi_mbuild_camera"),blockIcon:{type:"image",width:28,height:26,src:window.MbApi.getExtResPath("megapi_mbuild_camera/imgs/e8c7b2025a614373ad3c3c363900dd84.svg","megapi_mbuild_camera")},blocks:[{opcode:"megapi_camera_set_kp",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},KP:{type:"number",defaultValue:.5}},branchCount:0,platform:["mblockpc","mblockweb"],codes:{arduinoc:{code:this.funcs.megapiCameraSetKpCodesCode,sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraSetKpCodesLib,setup:this.funcs.megapiCameraSetKpCodesSetup}}},handler:this.funcs.megapi_camera_set_kp},{opcode:"megapi_camera_follow_color",blockType:"number",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},SIG:{type:"fieldMenu",defaultValue:"1",menu:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG"},LOCATION:{type:"fieldMenu",defaultValue:"0",menu:"MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO"},NUMBER:{type:"number",defaultValue:150}},branchCount:0,platform:["mblockpc","mblockweb"],codes:{arduinoc:{code:this.funcs.megapiCameraFollowColorCodesCode,sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraFollowColorCodesLib,setup:this.funcs.megapiCameraFollowColorCodesSetup}}},handler:this.funcs.megapi_camera_follow_color},{opcode:"megapi_camera_follow_qrcode",blockType:"number",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},BARCODE:{type:"fieldMenu",defaultValue:"1",menu:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE"},LOCATION:{type:"fieldMenu",defaultValue:"0",menu:"MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO"},NUMBER:{type:"number",defaultValue:150}},branchCount:0,platform:["mblockpc","mblockweb"],codes:{arduinoc:{code:this.funcs.megapiCameraFollowQrcodeCodesCode,sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraFollowQrcodeCodesLib,setup:this.funcs.megapiCameraFollowQrcodeCodesSetup}}},handler:this.funcs.megapi_camera_follow_qrcode},{opcode:"megapi_camera_get_diff_speed",blockType:"number",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"}},branchCount:0,platform:["mblockpc","mblockweb"],codes:{arduinoc:{code:"MeCamera_/*{PORT}*/.getFollowVectorValue()",sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraGetDiffSpeedCodesLib,setup:this.funcs.megapiCameraGetDiffSpeedCodesSetup}}},handler:this.funcs.megapi_camera_get_diff_speed},{opcode:"megapi_camera_lock_color",blockType:"boolean",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},SIG:{type:"fieldMenu",defaultValue:"1",menu:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG"},LOCATION:{type:"fieldMenu",defaultValue:"0",menu:"MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO"},NUMBER:{type:"number",defaultValue:150}},branchCount:0,platform:["mblockpc","mblockweb"],codes:{arduinoc:{code:this.funcs.megapiCameraLockColorCodesCode,sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraLockColorCodesLib,setup:this.funcs.megapiCameraLockColorCodesSetup}}},handler:this.funcs.megapi_camera_lock_color},{opcode:"megapi_camera_lock_qrcode",blockType:"boolean",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"6",menu:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT"},BARCODE:{type:"fieldMenu",defaultValue:"1",menu:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE"},LOCATION:{type:"fieldMenu",defaultValue:"0",menu:"MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO"},NUMBER:{type:"number",defaultValue:150}},branchCount:0,platform:["mblockpc","mblockweb"],codes:{arduinoc:{code:this.funcs.megapiCameraLockQrcodeCodesCode,sections:{include:["\"src/MeCamera.h\""],lib:this.funcs.megapiCameraLockQrcodeCodesLib,setup:"MeCamera_/*{PORT}*/.begin();"}}},handler:this.funcs.megapi_camera_lock_qrcode}],menus:{MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT:[{text:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_0",value:"6"},{text:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_1",value:"7"},{text:"MEGAPI_CAMERA_SWITCH_COLOR_MODE_PORT_2",value:"8"}],MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG:[{text:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_0",value:"1"},{text:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_1",value:"2"},{text:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_2",value:"3"},{text:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_3",value:"4"},{text:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_4",value:"5"},{text:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_5",value:"6"},{text:"MEGAPI_CAMERA_RECOGNIZE_COLOR_SIG_6",value:"7"}],MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO:[{text:"MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_0",value:"0"},{text:"MEGAPI_CAMERA_GET_QRCODE_COORDINATE_BARCODEINFO_1",value:"1"}],MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE:[{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_0",value:"1"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_1",value:"2"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_2",value:"3"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_3",value:"4"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_4",value:"5"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_5",value:"6"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_6",value:"7"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_7",value:"8"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_8",value:"9"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_9",value:"10"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_10",value:"11"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_11",value:"12"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_12",value:"13"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_13",value:"14"},{text:"MEGAPI_CAMERA_GET_QRCODE_MOVE_BARCODE_14",value:"15"}]}}],generators:extGenerators,translationMap:extTranslationMap,snippets:codeSnippets,generatorStartBlocks:[],feature:[],mustLoginBlocks:[],disabledOffline:[],disabledOnline:["megapi_mbuild_camera.megapi_camera_switch_color_mode","megapi_mbuild_camera.megapi_camera_recognize_color","megapi_mbuild_camera.megapi_camera_center_saturation","megapi_mbuild_camera.megapi_camera_get_color","megapi_mbuild_camera.megapi_camera_color_in_center","megapi_mbuild_camera.megapi_camera_color_coordinate","megapi_mbuild_camera.megapi_camera_turn_on_light","megapi_mbuild_camera.megapi_camera_set_white_balance","megapi_mbuild_camera.megapi_camera_switch_line_qrcode_mode","megapi_mbuild_camera.megapi_camera_get_qrcode_move","megapi_mbuild_camera.megapi_camera_get_qrcode_coordinate","megapi_mbuild_camera.megapi_camera_line_start_coordinate","megapi_mbuild_camera.megapi_camera_get_cross","megapi_mbuild_camera.megapi_camera_corss_coordinate","megapi_mbuild_camera.megapi_camera_get_branch_num","megapi_mbuild_camera.megapi_camera_get_branch_angle","megapi_mbuild_camera.megapi_camera_set_line_mode","megapi_mbuild_camera.megapi_camera_1566200454757","megapi_mbuild_camera.megapi_camera_1566200474887","megapi_mbuild_camera.megapi_camera_set_kp","megapi_mbuild_camera.megapi_camera_follow_color","megapi_mbuild_camera.megapi_camera_follow_qrcode","megapi_mbuild_camera.megapi_camera_get_diff_speed","megapi_mbuild_camera.megapi_camera_lock_color","megapi_mbuild_camera.megapi_camera_lock_qrcode"]}}},{key:"getHandler",value:function getHandler(){return"object"===_typeof(ExtHandler)?ExtHandler:"function"==typeof ExtHandler?new ExtHandler:void 0}}]),ExtMegapiMbuildCamera}();_exports.default=ExtMegapiMbuildCamera});