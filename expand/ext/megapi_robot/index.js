(function(global,factory){if("function"==typeof define&&define.amd)define(["exports","exts/common/sensorium"],factory);else if("undefined"!=typeof exports)factory(exports,require("exts/common/sensorium"));else{var mod={exports:{}};factory(mod.exports,global.sensorium),global.unknown=mod.exports}})(this,function(_exports,_sensorium){"use strict";function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(iter){if(Symbol.iterator in Object(iter)||"[object Arguments]"===Object.prototype.toString.call(iter))return Array.from(iter)}function _arrayWithoutHoles(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++)arr2[i]=arr[i];return arr2}}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(arr,i){if(Symbol.iterator in Object(arr)||"[object Arguments]"===Object.prototype.toString.call(arr)){var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!(i&&_arr.length===i));_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i["return"]||_i["return"]()}finally{if(_d)throw _e}}return _arr}}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}var gen=fn.apply(self,args);_next(void 0)})}}function _classCallCheck(instance,Constructor){if(!_instanceof(instance,Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0,descriptor;i<props.length;i++)descriptor=props[i],descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}function _instanceof(left,right){return null!=right&&"undefined"!=typeof Symbol&&right[Symbol.hasInstance]?!!right[Symbol.hasInstance](left):left instanceof right}function _typeof(obj){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_sensorium=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(_sensorium),!function(global){function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&_instanceof(outerFn.prototype,Generator)?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return generator._invoke=makeInvokeMethod(innerFn,self,context),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}function defineIteratorMethods(prototype){["next","throw","return"].forEach(function(method){prototype[method]=function(arg){return this._invoke(method,arg)}})}function AsyncIterator(generator){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"===record.type)reject(record.arg);else{var result=record.arg,value=result.value;return value&&"object"===_typeof(value)&&hasOwn.call(value,"__await")?Promise.resolve(value.__await).then(function(value){invoke("next",value,resolve,reject)},function(err){invoke("throw",err,resolve,reject)}):Promise.resolve(value).then(function(unwrapped){result.value=unwrapped,resolve(result)},function(error){return invoke("throw",error,resolve,reject)})}}function enqueue(method,arg){function callInvokeWithMethodAndArg(){return new Promise(function(resolve,reject){invoke(method,arg,resolve,reject)})}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}var previousPromise;this._invoke=enqueue}function makeInvokeMethod(innerFn,self,context){var state="suspendedStart";return function(method,arg){if(state==="executing")throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult()}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg)}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done}}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg)}}}function maybeInvokeDelegate(delegate,context){var method=delegate.iterator[context.method];if(void 0===method){if(context.delegate=null,"throw"===context.method){if(delegate.iterator.return&&(context.method="return",context.arg=void 0,maybeInvokeDelegate(delegate,context),"throw"===context.method))return ContinueSentinel;context.method="throw",context.arg=new TypeError("The iterator does not provide a 'throw' method")}return ContinueSentinel}var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;if(!info)return context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel;if(info.done)context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=void 0);else return info;return context.delegate=null,ContinueSentinel}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=void 0,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:void 0,done:!0}}var Op=Object.prototype,hasOwn=Op.hasOwnProperty,$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag",inModule="object"===("undefined"==typeof module?"undefined":_typeof(module)),runtime=global.regeneratorRuntime;if(runtime)return void(inModule&&(module.exports=runtime));runtime=global.regeneratorRuntime=inModule?module.exports||{}:{},runtime.wrap=wrap;var ContinueSentinel={},IteratorPrototype={};IteratorPrototype[iteratorSymbol]=function(){return this};var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);GeneratorFunction.prototype=Gp.constructor=GeneratorFunctionPrototype,GeneratorFunctionPrototype.constructor=GeneratorFunction,GeneratorFunctionPrototype[toStringTagSymbol]=GeneratorFunction.displayName="GeneratorFunction",runtime.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name))},runtime.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,!(toStringTagSymbol in genFun)&&(genFun[toStringTagSymbol]="GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun},runtime.awrap=function(arg){return{__await:arg}},defineIteratorMethods(AsyncIterator.prototype),AsyncIterator.prototype[asyncIteratorSymbol]=function(){return this},runtime.AsyncIterator=AsyncIterator,runtime.async=function(innerFn,outerFn,self,tryLocsList){var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList));return runtime.isGeneratorFunction(outerFn)?iter:iter.next().then(function(result){return result.done?result.value:iter.next()})},defineIteratorMethods(Gp),Gp[toStringTagSymbol]="Generator",Gp[iteratorSymbol]=function(){return this},Gp.toString=function(){return"[object Generator]"},runtime.keys=function(object){var keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},runtime.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=void 0)},stop:function stop(){this.done=!0;var rootEntry=this.tryEntries[0],rootRecord=rootEntry.completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function dispatchException(exception){function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=void 0),!!caught}if(this.done)throw exception;for(var context=this,i=this.tryEntries.length-1;0<=i;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);}else if(!hasFinally)throw new Error("try statement without catch or finally");else if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1,entry;0<=i;--i)if(entry=this.tryEntries[i],entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record)},complete:function complete(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1,entry;0<=i;--i)if(entry=this.tryEntries[i],entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel},catch:function _catch(tryLoc){for(var i=this.tryEntries.length-1,entry;0<=i;--i)if(entry=this.tryEntries[i],entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}throw new Error("illegal catch attempt")},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=void 0),ContinueSentinel}}}(function(){return this||"object"===("undefined"==typeof self?"undefined":_typeof(self))&&self}()||Function("return this")());var sensorium=new _sensorium.default;window.megaPiEngine||(window.megaPiEngine=sensorium.createMegaPi());var engine=window.megaPiEngine,lastTime=new Date().getTime(),OnlineUtil=function(){function OnlineUtil(){_classCallCheck(this,OnlineUtil)}return _createClass(OnlineUtil,null,[{key:"delay",value:function(){var _delay=_asyncToGenerator(regeneratorRuntime.mark(function _callee(n){return regeneratorRuntime.wrap(function(_context){for(;;)switch(_context.prev=_context.next){case 0:return _context.abrupt("return",new Promise(function(res){return setTimeout(function(){return res()},1e3*n)}));case 1:case"end":return _context.stop();}},_callee)}));return function delay(){return _delay.apply(this,arguments)}}()}]),OnlineUtil}(),formatColorData=function(code){if(!isString(code))return code;var reg=/\"?#[0-9A-f]+\"?/g;return code.replace(reg,function(item){item=item.replace(/"/g,""),item=item.replace("#","0x");var r=+item>>16,g=255&+item>>8,b=255&+item;return[r,g,b].join(",")})},isString=function(value){return"string"==typeof value||_instanceof(value,String)},megapiProtocol={show_external_led:function show_external_led(index,port,postion,_ref){var _ref2=_slicedToArray(_ref,3),r=_ref2[0],g=_ref2[1],b=_ref2[2],slot=4<arguments.length&&arguments[4]!==void 0?arguments[4]:0;return[["byte",index],"0208",["byte",port],["byte",slot],["byte",postion],["byte",r],["byte",g],["byte",b]]},show_ledstrip:function show_ledstrip(index,port,slot,postion,_ref3){var _ref4=_slicedToArray(_ref3,3),r=_ref4[0],g=_ref4[1],b=_ref4[2];return[["byte",index],"0244",["byte",port],["byte",slot],["byte",postion],["byte",r],["byte",g],["byte",b]]},show_7segments:function show_7segments(index,port,number){return[["byte",index],"0209",["byte",port],["float",number]]},run_shutter:function run_shutter(index,port,action){return[["byte",index],"0214",["byte",port],["byte",action]]},run_motor:function run_motor(index,port,power){return[["byte",index],"020a",["byte",port],["short",power]]},run_car:function run_car(index,port,vxpower,vypower,vwpower){return[["byte",index],"0264",["byte",port],["short",vxpower],["short",vypower],["short",vwpower]]},run_encoder_motor:function run_encoder_motor(index,port,power){return[["byte",index],"023e03",["byte",port],["short",power]]},encoder_motor_move_to:function encoder_motor_move_to(index,port,angle,speed){return[["byte",index],"023e01",["byte",port],["long",angle],["short",speed]]},encoder_motor_set_speed:function encoder_motor_set_speed(index,port,speed){return[["byte",index],"023e02",["byte",port],["short",speed]]},encoder_motor_set_zero:function encoder_motor_set_zero(index,port){return[["byte",index],"023e04",["byte",port]]},encoder_motor_get_pos:function encoder_motor_get_pos(index,port){return[["byte",index],"013d00",["byte",port],"01"]},encoder_motor_get_speed:function encoder_motor_get_speed(index,port){return[["byte",index],"013d00",["byte",port],"02"]},run_step_motor:function run_step_motor(index,port,step,speed){return[["byte",index],"024c01",["byte",port],["long",step],["short",speed]]},show_led:function show_led(index,postion,_ref5){var _ref6=_slicedToArray(_ref5,3),r=_ref6[0],g=_ref6[1],b=_ref6[2],port=3<arguments.length&&arguments[3]!==void 0?arguments[3]:7,slot=4<arguments.length&&arguments[4]!==void 0?arguments[4]:2;return[["byte",index],"0208",["byte",port],["byte",slot],["byte",postion],["byte",r],["byte",g],["byte",b]]},show_face:function show_face(index,port,face){var x=3<arguments.length&&arguments[3]!==void 0?arguments[3]:0,y=4<arguments.length&&arguments[4]!==void 0?arguments[4]:0;return[["byte",index],"0229",["byte",port],"02",["byte",x],["byte",y],["array16",face]]},show_number:function show_number(index,port,number){return[["byte",index],"0229",["byte",port],"04",["float",number]]},show_time:function show_time(index,port,hour,minute){return[["byte",index],"0229",["byte",port],"03","01",["byte",hour],["byte",minute]]},show_text:function show_text(index,port,str){var x=3<arguments.length&&arguments[3]!==void 0?arguments[3]:0,y=4<arguments.length&&arguments[4]!==void 0?arguments[4]:0;return[["byte",index],"0229",["byte",port],"01",["byte",x],["byte",+y+7],["string",str]]}},queue=Array(256).fill(!1);queue[128]=!0;var getIndex=function(){return new Promise(function(res){function getIdx(){-1==index||queue[index]?index=queue.indexOf(!1):(queue[index]=!0,clearInterval(id),res(index))}var index=-1,id=setInterval(getIdx,32)})},resetIndex=function(index){queue[index]=!1},color2RGB=function(color){color=color.replace("#","0x");var r=+color>>16,g=255&+color>>8,b=255&+color;return[r,g,b]},byte2Hex=function(num){var byte=num.toString(16);return byte="0"+byte,byte.slice(-2)},disableBlocks={debug:["megapi_robot.megapi_main"],upload:["event_whenflagclicked","event_whenkeypressed","event_whenbroadcastreceived","event_broadcast","event_broadcastandwait","control_stop"]},mustLoginBlocks=[],triggerBlocksStatus=function(){var _ref7=_asyncToGenerator(regeneratorRuntime.mark(function _callee2(mode,app){var _app$workspace,_app$workspace2,_app$workspace3,_app$workspace4,_app$workspace5,_app$workspace6,service,isLogin,_app$workspace7;return regeneratorRuntime.wrap(function(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:if(_context2.prev=0,!(app&&app.workspace)){_context2.next=8;break}return"debug"===mode?((_app$workspace=app.workspace).enableBlocks.apply(_app$workspace,_toConsumableArray(disableBlocks.upload)),(_app$workspace2=app.workspace).disableBlocks.apply(_app$workspace2,_toConsumableArray(disableBlocks.debug))):"upload"===mode?((_app$workspace3=app.workspace).enableBlocks.apply(_app$workspace3,_toConsumableArray(disableBlocks.debug)),(_app$workspace4=app.workspace).disableBlocks.apply(_app$workspace4,_toConsumableArray(disableBlocks.upload))):((_app$workspace5=app.workspace).enableBlocks.apply(_app$workspace5,_toConsumableArray(disableBlocks.upload)),(_app$workspace6=app.workspace).enableBlocks.apply(_app$workspace6,_toConsumableArray(disableBlocks.debug))),service=app.getService("account"),_context2.next=6,service.isLogin();case 6:isLogin=_context2.sent,isLogin||(_app$workspace7=app.workspace).disableBlocks.apply(_app$workspace7,mustLoginBlocks);case 8:_context2.next=13;break;case 10:_context2.prev=10,_context2.t0=_context2["catch"](0);case 13:case"end":return _context2.stop();}},_callee2,null,[[0,10]])}));return function(){return _ref7.apply(this,arguments)}}(),extTranslationMap={zh:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo \u6D4B\u8BD5",firmwares_version_e0a3fed5:"\u5728\u7EBF\u56FA\u4EF6",firmwares_version_625bba0b:"\u51FA\u5382\u56FA\u4EF6",UPDATE_FIRMWARE:"\u56FA\u4EF6\u66F4\u65B0",connect_fail_e3b8aead:"\u8BF7\u786E\u4FDDUSB\u7EBF\u5DF2\u6B63\u786E\u8FDE\u63A5\u5F53\u524D\u8BBE\u5907",connect_fail_0a8e963b:"\u8BF7\u786E\u4FDD\u5F53\u524D\u5F85\u8FDE\u63A5\u8BBE\u5907\u5904\u4E8E\u5F00\u673A\u72B6\u6001",connect_fail_c6b30a1c:"\u76EE\u524D\u6167\u7F16\u7A0B\u53EA\u652F\u6301\u8FDE\u63A5\u4E00\u53F0\u8BBE\u5907\uFF0C\u8FDE\u63A5\u5F53\u524D\u8BBE\u5907\u53E6\u4E00\u53F0\u5DF2\u8FDE\u63A5\u8BBE\u5907\u4F1A\u81EA\u52A8\u65AD\u5F00",connect_fail_9a8a4feb:"\u84DD\u72594.0\u8FDE\u63A5\u6A21\u5F0F\u4E0B\uFF0C\u4E0D\u652F\u6301\u4E0A\u4F20\u6A21\u5F0F\uFF0C\u8BF7\u5148\u901A\u8FC7USB\u8FDE\u63A5\u66F4\u65B0\u6700\u65B0\u56FA\u4EF6",connect_fail_671017f3:"\u8BF7\u786E\u4FDD\u60A8\u7684\u7535\u8111\u8BBE\u5907\u5177\u5907\u84DD\u72594.0\u8FDE\u63A5\u80FD\u529B\uFF0C\u4E14\u84DD\u72594.0\u529F\u80FD\u5DF2\u7ECF\u6253\u5F00",connect_fail_aad5f15d:"\u8BF7\u786E\u4FDD\u5F53\u524D\u5F85\u8FDE\u63A5\u8BBE\u5907\u5904\u4E8E\u5F00\u673A\u72B6\u6001",connect_fail_2df5ee83:"\u76EE\u524D\u6167\u7F16\u7A0B\u53EA\u652F\u6301\u8FDE\u63A5\u4E00\u53F0\u8BBE\u5907\uFF0C\u8FDE\u63A5\u5F53\u524D\u8BBE\u5907\u53E6\u4E00\u53F0\u5DF2\u8FDE\u63A5\u8BBE\u5907\u4F1A\u81EA\u52A8\u65AD\u5F00",upload_fail_c9f06d49:"\u8BF7\u68C0\u67E5\u8BE5\u8BBE\u5907\u7684\u79EF\u6728\u6216\u4EE3\u7801\u7684\u6570\u636E\u7C7B\u578B\u3001\u53C2\u6570\u7C7B\u578B\u3001\u7F16\u7A0B\u903B\u8F91\u662F\u5426\u7B26\u5408\u7A0B\u5E8F\u89C4\u8303",upload_fail_3bd7dbc4:"\u8BF7\u68C0\u67E5\u60A8\u662F\u5426\u6B63\u786E\u8FDE\u63A5\u8BBE\u5907\uFF0C\u53EF\u4EE5\u5C1D\u8BD5\u91CD\u542F\u8BBE\u5907\u540E\u518D\u91CD\u65B0\u8FDE\u63A5\u8BBE\u5907",firmware_success_5a28c266:"\u4E3A\u4E86\u4FDD\u8BC1\u66F4\u597D\u7684\u4F53\u9A8C\uFF0C\u60A8\u53EF\u4EE5\u91CD\u542F\u8BBE\u5907\u540E\u91CD\u65B0\u8FDE\u63A5\u8BBE\u5907",firmware_fail_e4b56cf5:"\u8BF7\u68C0\u67E5\u60A8\u662F\u5426\u6B63\u786E\u8FDE\u63A5\u8BBE\u5907\uFF0C\u53EF\u4EE5\u5C1D\u8BD5\u91CD\u542F\u8BBE\u5907\u540E\u91CD\u65B0\u8FDE\u63A5\u8BBE\u5907\uFF0C\u518D\u5C1D\u8BD5\u66F4\u65B0",BLOCK_1616555651965_PORT_0:"\u5F15\u811AA13",BLOCK_1616555651965_PORT_1:"\u5F15\u811AA14",BLOCK_1616555651965:"RGB \u706F [PORT] \u4EAE\u8D77 [FACE_PANEL] ",BLOCK_1617797266050:"RGB \u706F [PORT] \u4EAE\u8D77 [POS]  \u706F,\u8BBE\u7F6E\u989C\u8272\u4E3A [COLOR] ",BLOCK_1617797266243:"RGB \u706F [PORT] \u4EAE\u8D77  [POS]   \u706F,\u8BBE\u7F6E\u989C\u8272\u4E3A R [R] G [G] B [B] ",BLOCK_1617797266441:"RGB \u706F [PORT]  \u7684 [POS]    \u706F\u7184\u706D ",BLOCK_1617797266298:"RGB \u706F [PORT]  \u8BBE\u7F6E\u5168\u90E8\u706F,\u989C\u8272\u4E3A [COLOR] ",BLOCK_1617797266352:"RGB \u706F [PORT]   \u8BBE\u7F6E\u5168\u90E8\u706F,\u989C\u8272\u4E3A R [R]  G [G]  B [B]  ",display:"\u663E\u793A",BLOCK_1616555750567_PORT_0:"\u63A5\u53E31A",BLOCK_1616555750567_PORT_1:"\u63A5\u53E31B",BLOCK_1616555750567_PORT_2:"\u63A5\u53E32A",BLOCK_1616555750567_PORT_3:"\u63A5\u53E32B",BLOCK_1616555750567_PORT_4:"\u63A5\u53E33A",BLOCK_1616555750567_PORT_5:"\u63A5\u53E33B",BLOCK_1616555750567_PORT_6:"\u63A5\u53E34A",BLOCK_1616555750567_PORT_7:"\u63A5\u53E34B",BLOCK_1616555750567:"\u76F4\u6D41\u7535\u673A [PORT] \u4EE5\u52A8\u529B [POWER] %\u8F6C\u52A8",BLOCK_1616555750670:"\u76F4\u6D41\u7535\u673A [PORT1]  \u4E0E [PORT2] \u4EE5\u52A8\u529B [POWER] %\u8F6C\u52A8",BLOCK_1616555750741:"\u6240\u6709\u76F4\u6D41\u7535\u673A\u4EE5\u52A8\u529B [POWER] %\u8F6C\u52A8",BLOCK_1617082946013:"\u6240\u6709\u7535\u673A\u505C\u6B62\u8FD0\u52A8",BLOCK_1616747767054_MOVE_DIRECTION_0:"\u524D\u8FDB",BLOCK_1616747767054_MOVE_DIRECTION_1:"\u540E\u9000",BLOCK_1616747767054_MOVE_DIRECTION_2:"\u5DE6\u79FB",BLOCK_1616747767054_MOVE_DIRECTION_3:"\u53F3\u79FB",BLOCK_1616747767054:"\u6574\u8F66\u63A7\u5236[MOVE_DIRECTION] \u4EE5\u52A8\u529B [POWER] %",BLOCK_1616748288206:"\u6574\u8F66\u63A7\u5236  vX: [vx] vY: [vy] vW: [vw] ",power:"\u8FD0\u52A8",BLOCK_1616555666950_PORT_0:"\u5F15\u811AA6",BLOCK_1616555666950_PORT_1:"\u5F15\u811AA7",BLOCK_1616555666950_PORT_2:"\u5F15\u811AA8",BLOCK_1616555666950:"\u907F\u969C\u4F20\u611F\u5668 [PORT] \u68C0\u6D4B\u5230\u969C\u788D \uFF1F",BLOCK_1616555667136_PORT_0:"\u5F15\u811AA9",BLOCK_1616555667136_PORT_1:"\u5F15\u811AA10",BLOCK_1616555667136_COLOR_0:"\u9ED1\u8272",BLOCK_1616555667136_COLOR_1:"\u767D\u8272",BLOCK_1616555667136:"\u5DE1\u7EBF\u4F20\u611F\u5668 [PORT] \u68C0\u6D4B\u5230 [COLOR] \uFF1F",BLOCK_1616555667069_PORT_0:"\u5F15\u811AA11",BLOCK_1616555667069_PORT_1:"\u5F15\u811AA12",BLOCK_1616555667069:"\u78B0\u649E\u4F20\u611F\u5668 [PORT] \u88AB\u6309\u4E0B \uFF1F",detect_timer:"\u8BA1\u65F6\u5668",reset_timer:" \u8BA1\u65F6\u5668\u5F52\u96F6",sensing:"\u611F\u77E5",megapi_main:"\u5F53 mBot Mega\uFF08MegaPi\uFF09 \u542F\u52A8",SET_SMART_ZERO_TITLE:"\u8BBE\u7F6E\u667A\u80FD\u8235\u673A\u96F6\u70B9",SET_SMART_ZERO_BTN:"\u8BBE\u7F6E\u5F53\u524D\u4F4D\u7F6E\u4E3A\u8235\u673A\u96F6\u70B9",SET_SMART_ZERO_NO:"\u9009\u62E9\u7F16\u53F7",SET_SMART_ZERO_BTN_LOADING:"\u6B63\u5728\u8BBE\u7F6E\u96F6\u70B9",SET_SMART_ZERO_SUCCESS:"\u8BBE\u7F6E\u6210\u529F",SET_SMART_ZERO_FAIL:"\u8BBE\u7F6E\u5931\u8D25",megapi:"Ultimate 2.0",mcore_show_face_time:" \u8868\u60C5\u9762\u677F [PORT] \u663E\u793A\u56FE\u6848 [FACE_PANEL] \u6301\u7EED [TIME] \u79D2",mcore_show_face:"\u8868\u60C5\u9762\u677F [PORT] \u663E\u793A\u56FE\u6848 [FACE_PANEL]",mcore_show_face_position:"\u8868\u60C5\u9762\u677F [PORT] \u663E\u793A\u56FE\u6848 [FACE_PANEL] \u5728x: [X] y: [Y]",mcore_show_text:"\u8868\u60C5\u9762\u677F [PORT] \u663E\u793A\u5B57\u7B26 [TEXT]",mcore_show_text_position:"\u8868\u60C5\u9762\u677F [PORT] \u663E\u793A\u5B57\u7B26 [TEXT] \u5728x: [X] y: [Y]",mcore_show_number:"\u8868\u60C5\u9762\u677F [PORT] \u663E\u793A\u6570\u5B57 [NUMBER]",mcore_show_time:"\u8868\u60C5\u9762\u677F [PORT] \u663E\u793A\u65F6\u95F4 [NUMBER1]: [NUMBER2]",mcore_show_face_off:"\u8868\u60C5\u9762\u677F [PORT] \u7184\u706D\u9762\u677F",ultimate_forward_time:"[ICON] \u524D\u8FDB\u4EE5\u52A8\u529B [POWER] %\uFF0C\u6301\u7EED [TIME] \u79D2",ultimate_backward_time:"[ICON] \u540E\u9000\u4EE5\u52A8\u529B [POWER] %\uFF0C\u6301\u7EED [TIME] \u79D2",ultimate_turnleft_time:"[ICON] \u5DE6\u8F6C\u4EE5\u52A8\u529B [POWER] %\uFF0C\u6301\u7EED [TIME] \u79D2",ultimate_turnright_time:"[ICON] \u53F3\u8F6C\u4EE5\u52A8\u529B [POWER] %\uFF0C\u6301\u7EED [TIME] \u79D2",ultimate_move:"[ICON] [MOVE_DIRECTION] \u4EE5\u52A8\u529B [POWER] %",ultimate_move_wheel_speed:"[ICON] \u5DE6\u8F6E\u8F6C\u52A8\u4EE5\u52A8\u529B [POWER_LEFT] %\uFF0C\u53F3\u8F6E\u8F6C\u52A8\u4EE5\u52A8\u529B [POWER_RIGHT] %",ultimate_move_stop:"[ICON] \u505C\u6B62\u8FD0\u52A8",DCmotor_power_1:"\u76F4\u6D41\u7535\u673A [PORT] \u4EE5\u52A8\u529B [POWER] %\u8F6C\u52A8",encoder_motor_power:"\u7F16\u7801\u7535\u673A [PORT] \u4EE5\u52A8\u529B [POWER] % \u8F6C\u52A8",encoder_motor_speed:"\u7F16\u7801\u7535\u673A [PORT]  \u4EE5\u901F\u5EA6 [SPEED] \u8F6C\u6BCF\u5206\u949F \u8F6C\u52A8",encoder_motor_pos:"\u7F16\u7801\u7535\u673A [PORT] \u8F6C\u52A8 [DEG] \u5EA6\uFF0C\u4EE5\u901F\u5EA6 [SPEED] \u8F6C\u6BCF\u5206\u949F",ultrasonic_dis:"\u8D85\u58F0\u6CE2\u4F20\u611F\u5668 [PORT] \u8DDD\u79BB cm",linefollower_status:"\u5DE1\u7EBF\u4F20\u611F\u5668 [PORT] \u8BFB\u6570",linefollower_external:"\u5DE1\u7EBF\u4F20\u611F\u5668 [PORT] \u68C0\u6D4B\u5230 [LINEFOLLOW_STATE] \u4E3A [BLACK_WHITE] \uFF1F",gyro_sesor_read:"\u9640\u87BA\u4EEA\uFF08\u4F4D\u4E8E\u4EFB\u4E00\u767D\u8272\u63A5\u53E3\uFF09 [AXIS] \u89D2\u5EA6",shutter_set_fun:"\u76F8\u673A\u5FEB\u95E8\u6A21\u5757 [PORT] \u529F\u80FD\u4E3A [SHUTTER_ACTION]",encoder_motor_get_speed:"\u7F16\u7801\u7535\u673A [PORT] \u8F6C\u901F\uFF08\u8F6C\u6BCF\u5206\u949F\uFF09",encoder_motor_get_pos:"\u7F16\u7801\u7535\u673A [PORT] \u89D2\u5EA6\u4F4D\u7F6E\uFF08\u5EA6\uFF09",run_stepper_motor_pos:"\u6B65\u8FDB\u7535\u673A [PORT] \u8F6C\u52A8\uFF0C\u8DDD\u79BB [STEP] \u6B65\uFF0C\u901F\u5EA6 [SPEED] \u6B65\u6BCF\u5206\u949F"},en:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min",MCORE_SHOW_FACE_TIME_PORT_0:"port6",MCORE_SHOW_FACE_TIME_PORT_1:"port7",MCORE_SHOW_FACE_TIME_PORT_2:"port8",ULTIMATE_MOVE_MOVE_DIRECTION_0:"move forward",ULTIMATE_MOVE_MOVE_DIRECTION_1:"move backward",ULTIMATE_MOVE_MOVE_DIRECTION_2:"turn left",ULTIMATE_MOVE_MOVE_DIRECTION_3:"turn right",DCMOTOR_POWER_1_PORT_0:"port1A",DCMOTOR_POWER_1_PORT_1:"port1B",DCMOTOR_POWER_1_PORT_2:"port2A",DCMOTOR_POWER_1_PORT_3:"port2B",DCMOTOR_POWER_1_PORT_4:"port3A",DCMOTOR_POWER_1_PORT_5:"port3B",DCMOTOR_POWER_1_PORT_6:"port4A",DCMOTOR_POWER_1_PORT_7:"port4B",ENCODER_MOTOR_POWER_PORT_0:"port1",ENCODER_MOTOR_POWER_PORT_1:"port2",ENCODER_MOTOR_POWER_PORT_2:"port3",ENCODER_MOTOR_POWER_PORT_3:"port4",LINEFOLLOWER_EXTERNAL_LINEFOLLOW_STATE_0:"left",LINEFOLLOWER_EXTERNAL_LINEFOLLOW_STATE_1:"right",LINEFOLLOWER_EXTERNAL_LINEFOLLOW_STATE_2:"all",LINEFOLLOWER_EXTERNAL_LINEFOLLOW_STATE_3:"none",LINEFOLLOWER_EXTERNAL_BLACK_WHITE_0:"black",LINEFOLLOWER_EXTERNAL_BLACK_WHITE_1:"white",GYRO_SESOR_READ_AXIS_0:"x-axis",GYRO_SESOR_READ_AXIS_1:"y-axis",GYRO_SESOR_READ_AXIS_2:"z-axis",SHUTTER_SET_FUN_SHUTTER_ACTION_0:"press shutter",SHUTTER_SET_FUN_SHUTTER_ACTION_1:"release shutter",SHUTTER_SET_FUN_SHUTTER_ACTION_2:"start focusing",SHUTTER_SET_FUN_SHUTTER_ACTION_3:"stop focusing"},de:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},es:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},fr:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},id:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},ja:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},"ja-jph":{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},ko:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},pl:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},uk:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},"zh-hant":{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},nl:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},it:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},hr:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},ru:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},pt:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},fi:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},tr:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},tk:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},ar:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},ca:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},cs:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},fa:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},km:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},he:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"},vi:{megapi_robot:"mBot Mega",extensionName:"mBot Mega",extensionDescription:"MegaPi Pro demo",firmwares_version_e0a3fed5:"Online Firmware",firmwares_version_625bba0b:"Factory firmware",UPDATE_FIRMWARE:"Firmware Update",connect_fail_e3b8aead:"Please ensure the USB cable is properly connected to the device.",connect_fail_0a8e963b:"Please ensure the device to be connected is powered on.",connect_fail_c6b30a1c:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",connect_fail_9a8a4feb:"Upload Mode is not available when the device is connected via Bluetooth4.0. Please use a USB cable to connect your device to mBlock before updating firmware.",connect_fail_671017f3:"Please ensure your computer supports Bluetooth4.0 and Bluetooth4.0 is already enabled.",connect_fail_aad5f15d:"Please ensure the device to be connected is powered on.",connect_fail_2df5ee83:"Only one device can be connected at a time in mBlock. So connecting this device will lead to the disconnection of the previous one.",upload_fail_c9f06d49:"Please ensure you align the data type, parameter type and logic of blocks or code for the device to standards.",upload_fail_3bd7dbc4:"Please check if the device is properly connected. Try restarting the device and reconnect it.",firmware_success_5a28c266:"For better experience, we recommend that you reconnect the device after restarting it.",firmware_fail_e4b56cf5:"Please check if the device is properly connected. Try restarting the device and reconnect it to mBlock. Then update the firmware again.",BLOCK_1616555651965_PORT_0:"pin A13",BLOCK_1616555651965_PORT_1:"pin A14",BLOCK_1616555651965:"RGB LED [PORT] turns on [FACE_PANEL]",BLOCK_1617797266050:"RGB LED [PORT] turns on bead [POS], color [COLOR]",BLOCK_1617797266243:"RGB light [PORT] turns on bead [POS], color R [R] G [G] B [B]",BLOCK_1617797266441:"RGB LED [PORT] turns off bead [POS]",BLOCK_1617797266298:"RGB LED [PORT] sets all light color to  [COLOR]",BLOCK_1617797266352:"RGB LED [PORT] sets all light color to R [R]  G [G]  B [B]",display:"Looks",BLOCK_1616555750567_PORT_0:"port1A",BLOCK_1616555750567_PORT_1:"port1B",BLOCK_1616555750567_PORT_2:"port2A",BLOCK_1616555750567_PORT_3:"port2B",BLOCK_1616555750567_PORT_4:"port3A",BLOCK_1616555750567_PORT_5:"port3B",BLOCK_1616555750567_PORT_6:"port4A",BLOCK_1616555750567_PORT_7:"port4B",BLOCK_1616555750567:"DC motor [PORT] rotates at power [POWER] %",BLOCK_1616555750670:"DC motor  [PORT1] and [PORT2] rotate at power [POWER] %",BLOCK_1616555750741:"all DC motors rotate at power [POWER] %",BLOCK_1617082946013:"all motors stop",BLOCK_1616747767054_MOVE_DIRECTION_0:"move forward",BLOCK_1616747767054_MOVE_DIRECTION_1:"move backward",BLOCK_1616747767054_MOVE_DIRECTION_2:"turn left",BLOCK_1616747767054_MOVE_DIRECTION_3:"turn right",BLOCK_1616747767054:"control car to [MOVE_DIRECTION] at power  [POWER] %",BLOCK_1616748288206:"car control  vX: [vx] vY: [vy] vW: [vw]",power:"Motion",BLOCK_1616555666950_PORT_0:"pinA6",BLOCK_1616555666950_PORT_1:"pinA7",BLOCK_1616555666950_PORT_2:"pinA8",BLOCK_1616555666950:"obstacle avoidance sensor [PORT] detected obstacle?",BLOCK_1616555667136_PORT_0:"pinA9",BLOCK_1616555667136_PORT_1:"pinA10",BLOCK_1616555667136_COLOR_0:"black",BLOCK_1616555667136_COLOR_1:"white",BLOCK_1616555667136:"line-following sensor [PORT] detected [COLOR]?",BLOCK_1616555667069_PORT_0:"pinA11",BLOCK_1616555667069_PORT_1:"pinA12",BLOCK_1616555667069:"crash sensor [PORT] pressed?",detect_timer:"timer",reset_timer:"reset timer",sensing:"Sensing",megapi_main:"when mBot Mega (MegaPi) starts up",SET_SMART_ZERO_TITLE:"set smart servo zero position",SET_SMART_ZERO_BTN:"set current position as zero position",SET_SMART_ZERO_NO:"select serial number",SET_SMART_ZERO_BTN_LOADING:"setting zero position...",SET_SMART_ZERO_SUCCESS:"Successful!",SET_SMART_ZERO_FAIL:"Failed.",megapi:"Ultimate 2.0",mcore_show_face_time:"LED panel [PORT] displays image [FACE_PANEL] for [TIME]secs",mcore_show_face:"LED panel [PORT] displays image [FACE_PANEL]",mcore_show_face_position:"LED panel [PORT] displays image[FACE_PANEL] at x: [X] y: [Y]",mcore_show_text:"LED panel [PORT] displays text[TEXT]",mcore_show_text_position:"LED panel [PORT] displays text[TEXT] at x: [X] y: [Y]",mcore_show_number:"LED panel[PORT]displays number [NUMBER]",mcore_show_time:"LED panel [PORT] displays time [NUMBER1]: [NUMBER2]",mcore_show_face_off:"LED panel [PORT] lights off",ultimate_forward_time:"[ICON] move forward at power [POWER] % for [TIME]secs",ultimate_backward_time:"[ICON] move backward at power [POWER] % for [TIME]secs",ultimate_turnleft_time:"[ICON]turn left at power[POWER] % for [TIME]secs",ultimate_turnright_time:"[ICON]turn right at power [POWER] % for [TIME]secs",ultimate_move:"[ICON] [MOVE_DIRECTION]at power [POWER] %",ultimate_move_wheel_speed:"[ICON]left wheel turns at power [POWER_LEFT] %\uFF0Cright wheel turns at power[POWER_RIGHT] %",ultimate_move_stop:"[ICON]stop moving",DCmotor_power_1:"DC motor[PORT]turns at power [POWER]%",encoder_motor_power:"encoder motor [PORT]rotates at power [POWER] %",encoder_motor_speed:"encoder motor [PORT]rotates at speed of [SPEED]r/min",encoder_motor_pos:"encoder motor[PORT]rotates by[DEG]degrees at speed of [SPEED]r/min",ultrasonic_dis:"ultrasonic sensor [PORT] distance(cm)",linefollower_status:"line-following sensor [PORT] value",linefollower_external:"line-following sensor [PORT]detected[LINEFOLLOW_STATE] to be [BLACK_WHITE] \uFF1F",gyro_sesor_read:"gyroscope (one any white port) [AXIS] angle",shutter_set_fun:"set camera shutter[PORT] to [SHUTTER_ACTION]",encoder_motor_get_speed:"encoder motor[PORT] rotational speed (r/min)",encoder_motor_get_pos:"encoder motor[PORT] angle(\xB0)",run_stepper_motor_pos:"stepper motor [PORT] rotates by [STEP] steps at speed of  [SPEED] stp/min"}},codeSnippets={arduinoc:{MeRGBLed:{prefix:"MeRGBLed",body:"MeRGBLed",kind:5},MeRGBLed_Board:{prefix:"MeRGBLed_Board",body:"MeRGBLed rgbled_0(0, 12);",description:"Alternate Constructor which can call your own function to map the MeRGBLed to arduino port,it will assigned the LED display buffer and initialization the GPIO of LED lights. The slot2 will be used here, and the default number of light strips is 32.",kind:25},MeRGBLed_Strip:{prefix:"MeRGBLed_Strip",body:"MeRGBLed rgbled_${1|6,7,8,9,10|}_${2|1,2|}(${1|6,7,8,9,10|}, ${2|1,2|}, ${3:led_num});",description:"Alternate Constructor which can call your own function to map the MeRGBLed to arduino port,it will assigned the LED display buffer and initialization the GPIO of LED lights.You can set any slot for the LED data PIN, and reset the LED number by this constructor.",kind:25},"MeRGBLed::setpin":{prefix:"MeRGBLed::setpin",body:"setpin(${1:44})",description:"Reset the LED available data PIN by its arduino port.",kind:1},"MeRGBLed::setColorWithHex":{prefix:"MeRGBLed::setColorWithHex",body:"setColor(${1:Led_Number}, ${2:value})",description:"Set the LED color for any LED.",kind:1},"MeRGBLed::setColorWithRGB":{prefix:"MeRGBLed::setColorWithRGB",body:"setColor(${1:Led_Number}, ${2:red}, ${3:green}, ${4:blue})",description:"Set the LED color for any LED.",kind:1},"MeRGBLed::show":{prefix:"MeRGBLed::show",body:"show()",description:"Transmission the data to WS2812.",kind:1},MeBuzzer:{prefix:"MeBuzzer",body:"MeBuzzer",kind:5},MeBuzzer_Constructor:{prefix:"MeBuzzer",body:"MeBuzzer buzzer;",description:"Alternate Constructor which can call your own function to map the Buzzer to arduino port,Buzzer pins are used and initialized here.",kind:25},"MeBuzzer::setpin":{prefix:"MeBuzzer::setpin",body:"setpin(${1:45})",description:"Reset the buzzer available pin by its arduino port.",kind:1},"MeBuzzer::tone":{prefix:"MeBuzzer::tone",body:"tone(${1:frequency}, ${2:duration})",description:"Playing the tones.",kind:1},MeEncoderOnBoard:{prefix:"MeEncoderOnBoard",body:"MeEncoderOnBoard",kind:5},MeEncoderOnBoard_Constructor:{prefix:"MeEncoderOnBoard",body:"MeEncoderOnBoard Encoder_${1|1,2|}(SLOT${1|1,2|});",description:"Alternate Constructor which can call your own function to map the Encoder motor to arduino port.",kind:25},"MeEncoderOnBoard::getIntNum":{prefix:"MeEncoderOnBoard::getIntNum",body:"getIntNum()",description:"This function used to get the Auriga/MegaPi Interrupt number of current objects.",kind:1},"MeEncoderOnBoard::getPortB":{prefix:"MeEncoderOnBoard::getPortB",body:"getPortB()",description:"This function used to get the GPIO number of current objects's dir port B.",kind:1},"MeEncoderOnBoard::pulsePosPlus":{prefix:"MeEncoderOnBoard::pulsePosPlus",body:"pulsePosPlus()",description:"This function used to increase the current pos value(pulse counter).",kind:1},"MeEncoderOnBoard::pulsePosMinus":{prefix:"MeEncoderOnBoard::pulsePosMinus",body:"pulsePosMinus()",description:"This function used to reduction the current pos value(pulse counter).",kind:1},"MeEncoderOnBoard::setTarPWM":{prefix:"MeEncoderOnBoard::setTarPWM",body:"setTarPWM(${1:speed})",description:"This function used for set the target pwm value.",kind:1},"MeEncoderOnBoard::loop":{prefix:"MeEncoderOnBoard::loop",body:"loop()",description:"This function should be called without Blocked.",kind:1},MeLightSensor:{prefix:"MeLightSensor",body:"MeLightSensor",kind:5},MeLightSensor_Board:{prefix:"MeLightSensor_Board",body:"MeLightSensor lightsensor_${1|11,12|}(${1|11,12|});",description:"Alternate Constructor which can call your own function to map the light sensor to arduino port.",kind:25},MeLightSensor_Port:{prefix:"MeLightSensor_Port",body:"MeLightSensor lightsensor_${1|6,7,8,9,10|}(${1|6,7,8,9,10|});",description:"Alternate Constructor which can call your own function to map the light sensor to arduino port.",kind:25},"MeLightSensor::read":{prefix:"MeLightSensor::read",body:"read()",description:"Read analog value of light sensor.",kind:1},MeOnBoardTemp:{prefix:"MeOnBoardTemp",body:"MeOnBoardTemp",kind:5},MeOnBoardTemp_Constructor:{prefix:"MeOnBoardTemp",body:"MeOnBoardTemp temperature_onboard(PORT_13);",description:"Alternate Constructor which can call your own function to map the On Board Temperature to arduino port.",kind:25},"MeOnBoardTemp::readValue":{prefix:"MeOnBoardTemp::readValue",body:"readValue()",description:"Read the value of On Board Temperature.",kind:1},MeSoundSensor:{prefix:"MeSoundSensor",body:"MeSoundSensor",kind:5},MeSoundSensor_Board:{prefix:"MeSoundSensor_Board",body:"MeSoundSensor soundsensor_${1:14}(${1:14});",description:"Alternate Constructor which can call your own function to map the Sound Sensor to arduino port",kind:25},MeSoundSensor_Port:{prefix:"MeSoundSensor_Port",body:"MeSoundSensor soundsensor_${1|6,7,8,9,10|}(${1|6,7,8,9,10|});",description:"Alternate Constructor which can call your own function to map the Sound Sensor to arduino port",kind:25},"MeSoundSensor::strength":{prefix:"MeSoundSensor::strength",body:"strength()",description:"Read and return the sensor value.",kind:1},MeGyro:{prefix:"MeGyro",body:"MeGyro",kind:5},MeGyro_Board:{prefix:"MeGyro_Board",body:"MeGyro gyro_0(0, 0x69);",description:"Alternate Constructor which can call your own function to map the _AD0 and _INT to arduino port,no pins are used or initialized here",kind:25},"MeGyro::begin":{prefix:"MeGyro::begin",body:"begin()",description:"Initialize the MeGyro.",kind:1},"MeGyro::update":{prefix:"MeGyro::update",body:"update()",description:"Update some calculated angle values to the variable.",kind:1},"MeGyro::getAngle":{prefix:"MeGyro::getAngle_axis",body:"getAngle(${1|1,2,3|})",description:"Get the angle value of setting axis.Axis settings(1:X-axis, 2:Y-axis, 3:Z-axis)",kind:1},MeUltrasonicSensor:{prefix:"MeUltrasonicSensor",body:"MeUltrasonicSensor",kind:5},MeUltrasonicSensor_Port:{prefix:"MeUltrasonicSensor_Port",body:"MeUltrasonicSensor ultrasonic_${1|6,7,8,9,10|}(${1|6,7,8,9,10|});",description:"Alternate Constructor which can call your own function to map the ultrasonic Sensor to arduino port.",kind:25},"MeUltrasonicSensor::distanceCm":{prefix:"MeUltrasonicSensor::distanceCm",body:"distanceCm()",description:"Centimeters return the distance.",kind:1},MeLineFollower:{prefix:"MeLineFollower",body:"MeLineFollower",kind:5},MeLineFollower_Port:{prefix:"MeLineFollower_Port",body:"MeLineFollower linefollower_${1|6,7,8,9,10|}(${1|6,7,8,9,10|});",description:"Alternate Constructor which can call your own function to map the line follwer device to arduino port.",kind:25},"MeLineFollower::readSensors":{prefix:"MeLineFollower::readSensors",body:"readSensors()",description:"Get the sensors state.",kind:1},include_MeAuriga:{prefix:"include_MeAuriga",body:"#include <MeAuriga.h>",description:"The driver for MeAuriga board by MakeBlock.",kind:25},"MeSerial::begin":{prefix:"MeSerial::begin",body:"begin(115200)",description:"Sets the speed (baud rate) for the serial communication.",kind:1},MePort:{prefix:"MePort",body:"MePort",kind:5},MePort_Constructor:{prefix:"MePort",body:"MePort port_${1|6,7,8,9,10|}(${1|6,7,8,9,10|});",description:"Alternate Constructor which can call your own function to map the MePort to arduino port,no pins are used or initialized here, but PWM frequency set to 976 Hz.",kind:25},"MePort::pin":{prefix:"MePort::pin_Slot",body:"pin${1|1,2|}()",description:"Return the arduino pin number of current RJ25 object's slot1 or slot2",kind:1},MeTemperature:{prefix:"MeTemperature",body:"MeTemperature",kind:5},MeTemperature_Port_Slot:{prefix:"MeTemperature_Port_Slot",body:"MeTemperature temperature_${1|6,7,8,9,10|}_${2|1,2|}(${1|6,7,8,9,10|}, ${2|1,2|});",description:"Alternate Constructor which can call your own function to map the temperature sensor to arduino port.",kind:25},"MeTemperature::temperature":{prefix:"MeTemperature::temperature",body:"temperature()",description:"Get the celsius of temperature",kind:1},MePotentiometer:{prefix:"MePotentiometer",body:"MePotentiometer",kind:5},MePotentiometer_Port:{prefix:"MePotentiometer_Port",body:"MePotentiometer potentiometer_${1|6,7,8,9,10|}(${1|6,7,8,9,10|});",description:"Alternate Constructor which can call your own function to map the Me potentiometer device to arduino port.",kind:25},"MePotentiometer::read":{prefix:"MePotentiometer::read",body:"read()",description:"Read DAC value of Me potentiometer module.",kind:1},Servo:{prefix:"Servo",body:"Servo",kind:5},Servo_Port_Slot:{prefix:"Servo_Port_Slot",body:"Servo servo_${1|6,7,8,9,10|}_${2|1,2|};",description:"Allows MeAuriga board to control RC (hobby) servo motors.",kind:25},"Servo::attach":{prefix:"Servo::attach",body:"attach(${1:pin})",description:"Attach the Servo variable to a pin.",kind:1},"Servo::write":{prefix:"Servo::write",body:"write(${1:angle})",description:"Writes a value to the servo, controlling the shaft accordingly.",kind:1},Me7SegmentDisplay:{prefix:"Me7SegmentDisplay",body:"Me7SegmentDisplay",kind:5},Me7SegmentDisplay_Port:{prefix:"Me7SegmentDisplay_Port",body:"Me7SegmentDisplay seg7_${1|6,7,8,9,10|}(${1|6,7,8,9,10|});",description:"Alternate Constructor which can call your own function to map the 7-Segment display to arduino port,the slot1 will be used for data pin and slot2 will used for clk pin.",kind:25},"Me7SegmentDisplay::display":{prefix:"Me7SegmentDisplay::display",body:"display(${1:value})",description:"Display certain value, and this value type is uint16_t.",kind:1}}},extGenerators=[{lang:"arduinoc",template:"// generated by mBlock5 for MegaPi\n// codes make you happy\n\n//( include //)\n\n//( lib //)\n\n//({\n    this.$ALL_VARIABLES.length==0?'':this.$ALL_VARIABLES.map(v=>\"float \"+v+\" = 0;\").join('\\n')\n}//)\n\n//( declare //)\n\nvoid _delay(float seconds) {\n  if(seconds < 0.0){\n    seconds = 0.0;\n  }\n  long endTime = millis() + seconds * 1000;\n  while(millis() < endTime) _loop();\n}\n\n//(\nvoid setup() {\n  //( setup //)\n  //( code //)\n}\n//)\n\nvoid _loop() {\n  //( _loop //)\n}\n\nvoid loop() {\n  //( loop //)\n  _loop();\n}",splitor:{frame:{left:"//(",right:"//)"},expression:{left:"/*{",right:"}*/"}},reducers:[{name:"include",reduce:function reduce(codes){var codes1=[],_iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _iterator=codes[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var code=_step.value,codeStr="";"string"==typeof code?codeStr=code:"function"==typeof code&&(codeStr=code()),-1===codes1.indexOf(codeStr)&&codes1.push(codeStr)}}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{_iteratorNormalCompletion||null==_iterator.return||_iterator.return()}finally{if(_didIteratorError)throw _iteratorError}}return 0===codes1.length?void 0:codes1.map(function(code){return"#include "+code}).join("\n")+"\n"}}]}],extSources={arduino:[{filename:"src/MeBarrierSensor.cpp",code:"/**\r\n * \\par Copyright (C), 2012-2016, MakeBlock\r\n * \\class MeBarrierSensor\r\n * \\brief   Driver for Me line follwer device.\r\n * @file    MeBarrierSensor.cpp\r\n * @author  MakeBlock\r\n * @version V1.0.0\r\n * @date    2021/03/24\r\n * @brief   Driver for Me line follwer device.\r\n *\r\n * \\par Copyright\r\n * This software is Copyright (C), 2012-2016, MakeBlock. Use is subject to license \\n\r\n * conditions. The main licensing options available are GPL V2 or Commercial: \\n\r\n *\r\n * \\par Open Source Licensing GPL V2\r\n * This is the appropriate option if you want to share the source code of your \\n\r\n * application with everyone you distribute it to, and you also want to give them \\n\r\n * the right to share who uses it. If you wish to use this software under Open \\n\r\n * Source Licensing, you must contribute all your source code to the open source \\n\r\n * community in accordance with the GPL Version 2 when your application is \\n\r\n * distributed. See http://www.gnu.org/copyleft/gpl.html\r\n *\r\n * \\par Description\r\n * This file is a drive for Me line follwer device, It supports line follwer device\r\n * V2.2 provided by the MakeBlock. The line follwer used Infrared Tube to Use infrared\r\n * receiver and transmitter to detect the black line.\r\n *\r\n * \\par Method List:\r\n *\r\n *    1. void MeBarrierSensor::setpin(uint8_t SensorPin)\r\n *    2. uint8_t MeBarrierSensor::readSensor(void)\r\n *    3. bool MeBarrierSensor::isBarried(void)\r\n *\r\n * \\par History:\r\n * <pre>\r\n * \"<Author>\"         \"<Time>\"        \"<Version>\"        \"<Descr>\"\r\n * huyisi         2021/03/24     1.0.0            build the new.\r\n * </pre>\r\n *\r\n * @example LineFollowerTest.ino\r\n */\r\n\r\n#include \"MeBarrierSensor.h\"\r\n\r\n\r\n/**\r\n * \\par Function\r\n *   setpin\r\n * \\par Description\r\n *   Reset the line follwer device available PIN by its arduino port.\r\n * \\param[in]\r\n *   SensorPin - arduino port(should digital pin)\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\nMeBarrierSensor::MeBarrierSensor(uint8_t SensorPin)\r\n{\r\n  _SensorPin = SensorPin;\r\n  pinMode(_SensorPin,INPUT);\r\n}\r\n\r\n\r\n/**\r\n * \\par Function\r\n *   setpin\r\n * \\par Description\r\n *   Reset the line follwer device available PIN by its arduino port.\r\n * \\param[in]\r\n *   SensorPin - arduino port(should digital pin)\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\nvoid MeBarrierSensor::setpin(uint8_t SensorPin)\r\n{\r\n  _SensorPin = SensorPin;\r\n  pinMode(_SensorPin,INPUT);\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   readSensor1\r\n * \\par Description\r\n *   Get the sensors state.\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   0: sensor1 is Barried \\n\r\n *   1: sensor1 is not Barried \r\n * \\par Others\r\n *   None\r\n */\r\nbool MeBarrierSensor::readSensor(void)\r\n{\r\n  return digitalRead(_SensorPin);\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   onLine\r\n * \\par Description\r\n *   Get the sensors state.\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   true: sensor is Barried \\n\r\n *   false: sensor is not Barried\r\n * \\par Others\r\n *   None\r\n */\r\nbool MeBarrierSensor::isBarried(void)\r\n{\r\n  if(digitalRead(_SensorPin))\r\n  {\r\n    return false;\r\n  }\r\n  else\r\n  {\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n"},{filename:"src/MeBarrierSensor.h",code:"/**\r\n * \\par Copyright (C), 2012-2016, MakeBlock\r\n * \\class   MeBarrierSensor\r\n * \\brief   Driver for MeBarrierSensor module.\r\n * @file    MeBarrierSensor.h\r\n * @author  MakeBlock\r\n * @version V1.0.0\r\n * @date    2021/03/24\r\n * @brief   Header for MeBarrierSensor.cpp.\r\n *\r\n * \\par Copyright\r\n * This software is Copyright (C), 2012-2016, MakeBlock. Use is subject to license \\n\r\n * conditions. The main licensing options available are GPL V2 or Commercial: \\n\r\n *\r\n * \\par Open Source Licensing GPL V2\r\n * This is the appropriate option if you want to share the source code of your \\n\r\n * application with everyone you distribute it to, and you also want to give them \\n\r\n * the right to share who uses it. If you wish to use this software under Open \\n\r\n * Source Licensing, you must contribute all your source code to the open source \\n\r\n * community in accordance with the GPL Version 2 when your application is \\n\r\n * distributed. See http://www.gnu.org/copyleft/gpl.html\r\n *\r\n * \\par Description\r\n *\r\n * \\par Method List:\r\n *\r\n *    1. void MeBarrierSensor::setpin(uint8_t SensorPin)\r\n *    2. uint8_t MeBarrierSensor::readSensor(void)\r\n *    3. bool MeBarrierSensor::isBarried(void)\r\n *\r\n * \\par History:\r\n * <pre>\r\n * \"<Author>\"         \"<Time>\"        \"<Version>\"        \"<Descr>\"\r\n * huyisi         2021/03/24     1.0.0            build the new.\r\n * </pre>\r\n *\r\n */\r\n\r\n/* Define to prevent recursive inclusion -------------------------------------*/\r\n#ifndef MeBarrierSensor_H\r\n#define MeBarrierSensor_H\r\n\r\n/* Includes ------------------------------------------------------------------*/\r\n#include <stdint.h>\r\n#include <stdbool.h>\r\n#include <Arduino.h>\r\n#include \"MeConfig.h\"\r\n\r\n#ifdef ME_PORT_DEFINED\r\n#include \"MePort.h\"\r\n#endif // ME_PORT_DEFINED\r\n\r\n/* Exported classes ----------------------------------------------------------*/\r\n/**\r\n * Class: MeBarrierSensor\r\n * \\par Description\r\n * Declaration of Class MeBarrierSensor.\r\n */\r\n#ifndef ME_PORT_DEFINED\r\nclass MeBarrierSensor\r\n#else // !ME_PORT_DEFINED\r\nclass MeBarrierSensor : public MePort\r\n#endif  // !ME_PORT_DEFINED\r\n{\r\npublic:\r\n\r\n/**\r\n * \\par Function\r\n *   setpin\r\n * \\par Description\r\n *   Reset the line follwer device available PIN by its arduino port.\r\n * \\param[in]\r\n *   SensorPin - arduino port(should digital pin)\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\n MeBarrierSensor(uint8_t SensorPin);\r\n\r\n/**\r\n * \\par Function\r\n *    setpin\r\n * \\par Description\r\n *    Reset the limit switch available PIN by its arduino port.\r\n * \\param[in]\r\n *    switchPin - arduino port for switch detect pin.\r\n * \\par Output\r\n *    None\r\n * \\par Return\r\n *    None\r\n * \\par Others\r\n *    None\r\n */\r\n  void setpin(uint8_t switchPin);\r\n\r\n/**\r\n * \\par Function\r\n *   readSensor1\r\n * \\par Description\r\n *   Get the sensors state.\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   0: sensor1 is Barried \\n\r\n *   1: sensor1 is not Barried \r\n * \\par Others\r\n *   None\r\n */\r\n  bool readSensor(void);\r\n\r\n/**\r\n * \\par Function\r\n *   onLine\r\n * \\par Description\r\n *   Get the sensors state.\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   true: sensor is Barried \\n\r\n *   false: sensor is not Barried\r\n * \\par Others\r\n *   None\r\n */\r\n bool isBarried(void);\r\n\r\nprivate:\r\n  uint8_t _SensorPin;\r\n};\r\n#endif\r\n"},{filename:"src/MeCollisionSensor.cpp",code:"/**\r\n * \\par Copyright (C), 2012-2016, MakeBlock\r\n * \\class MeCollisionSensor\r\n * \\brief   Driver for Me line follwer device.\r\n * @file    MeCollisionSensor.cpp\r\n * @author  MakeBlock\r\n * @version V1.0.0\r\n * @date    2021/03/24\r\n * @brief   Driver for Me line follwer device.\r\n *\r\n * \\par Copyright\r\n * This software is Copyright (C), 2012-2016, MakeBlock. Use is subject to license \\n\r\n * conditions. The main licensing options available are GPL V2 or Commercial: \\n\r\n *\r\n * \\par Open Source Licensing GPL V2\r\n * This is the appropriate option if you want to share the source code of your \\n\r\n * application with everyone you distribute it to, and you also want to give them \\n\r\n * the right to share who uses it. If you wish to use this software under Open \\n\r\n * Source Licensing, you must contribute all your source code to the open source \\n\r\n * community in accordance with the GPL Version 2 when your application is \\n\r\n * distributed. See http://www.gnu.org/copyleft/gpl.html\r\n *\r\n * \\par Description\r\n * This file is a drive for Me line follwer device, It supports line follwer device\r\n * V2.2 provided by the MakeBlock. The line follwer used Infrared Tube to Use infrared\r\n * receiver and transmitter to detect the black line.\r\n *\r\n * \\par Method List:\r\n *\r\n *    1. void MeCollisionSensor::setpin(uint8_t SensorPin)\r\n *    2. uint8_t MeCollisionSensor::readSensor(void)\r\n *    3. bool MeCollisionSensor::isCollision(void)\r\n *\r\n * \\par History:\r\n * <pre>\r\n * \"<Author>\"         \"<Time>\"        \"<Version>\"        \"<Descr>\"\r\n * huyisi         2021/03/24     1.0.0            build the new.\r\n * </pre>\r\n *\r\n * @example LineFollowerTest.ino\r\n */\r\n\r\n#include \"MeCollisionSensor.h\"\r\n\r\n\r\n/**\r\n * \\par Function\r\n *   setpin\r\n * \\par Description\r\n *   Reset the line follwer device available PIN by its arduino port.\r\n * \\param[in]\r\n *   SensorPin - arduino port(should digital pin)\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\nMeCollisionSensor::MeCollisionSensor(uint8_t SensorPin)\r\n{\r\n  _SensorPin = SensorPin;\r\n  pinMode(_SensorPin,INPUT);\r\n}\r\n\r\n\r\n/**\r\n * \\par Function\r\n *   setpin\r\n * \\par Description\r\n *   Reset the line follwer device available PIN by its arduino port.\r\n * \\param[in]\r\n *   SensorPin - arduino port(should digital pin)\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\nvoid MeCollisionSensor::setpin(uint8_t SensorPin)\r\n{\r\n  _SensorPin = SensorPin;\r\n  pinMode(_SensorPin,INPUT);\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   readSensor1\r\n * \\par Description\r\n *   Get the sensors state.\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   0: sensor is Collision \\n\r\n *   1: sensor is not Collision\r\n * \\par Others\r\n *   None\r\n */\r\nbool MeCollisionSensor::readSensor(void)\r\n{\r\n  return digitalRead(_SensorPin);\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   onLine\r\n * \\par Description\r\n *   Get the sensors state.\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   true: sensor is Collision \\n\r\n *   false: sensor is not Collision\r\n * \\par Others\r\n *   None\r\n */\r\nbool MeCollisionSensor::isCollision(void)\r\n{\r\n  if(digitalRead(_SensorPin))\r\n  {\r\n    return false;\r\n  }\r\n  else\r\n  {\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n"},{filename:"src/MeCollisionSensor.h",code:"/**\r\n * \\par Copyright (C), 2012-2016, MakeBlock\r\n * \\class   MeCollisionSensor\r\n * \\brief   Driver for MeCollisionSensor module.\r\n * @file    MeCollisionSensor.h\r\n * @author  MakeBlock\r\n * @version V1.0.0\r\n * @date    2021/03/24\r\n * @brief   Header for MeCollisionSensor.cpp.\r\n *\r\n * \\par Copyright\r\n * This software is Copyright (C), 2012-2016, MakeBlock. Use is subject to license \\n\r\n * conditions. The main licensing options available are GPL V2 or Commercial: \\n\r\n *\r\n * \\par Open Source Licensing GPL V2\r\n * This is the appropriate option if you want to share the source code of your \\n\r\n * application with everyone you distribute it to, and you also want to give them \\n\r\n * the right to share who uses it. If you wish to use this software under Open \\n\r\n * Source Licensing, you must contribute all your source code to the open source \\n\r\n * community in accordance with the GPL Version 2 when your application is \\n\r\n * distributed. See http://www.gnu.org/copyleft/gpl.html\r\n *\r\n * \\par Description\r\n *\r\n * \\par Method List:\r\n *\r\n *    1. void MeCollisionSensor::setpin(uint8_t SensorPin)\r\n *    2. uint8_t MeCollisionSensor::readSensor(void)\r\n *    3. bool MeCollisionSensor::isCollision(void)\r\n *\r\n * \\par History:\r\n * <pre>\r\n * \"<Author>\"         \"<Time>\"        \"<Version>\"        \"<Descr>\"\r\n * huyisi         2021/03/24     1.0.0            build the new.\r\n * </pre>\r\n *\r\n */\r\n\r\n/* Define to prevent recursive inclusion -------------------------------------*/\r\n#ifndef MeCollisionSensor_H\r\n#define MeCollisionSensor_H\r\n\r\n/* Includes ------------------------------------------------------------------*/\r\n#include <stdint.h>\r\n#include <stdbool.h>\r\n#include <Arduino.h>\r\n#include \"MeConfig.h\"\r\n\r\n#ifdef ME_PORT_DEFINED\r\n#include \"MePort.h\"\r\n#endif // ME_PORT_DEFINED\r\n\r\n/* Exported classes ----------------------------------------------------------*/\r\n/**\r\n * Class: MeCollisionSensor\r\n * \\par Description\r\n * Declaration of Class MeCollisionSensor.\r\n */\r\n#ifndef ME_PORT_DEFINED\r\nclass MeCollisionSensor\r\n#else // !ME_PORT_DEFINED\r\nclass MeCollisionSensor : public MePort\r\n#endif  // !ME_PORT_DEFINED\r\n{\r\npublic:\r\n\r\n/**\r\n * \\par Function\r\n *   setpin\r\n * \\par Description\r\n *   Reset the line follwer device available PIN by its arduino port.\r\n * \\param[in]\r\n *   SensorPin - arduino port(should digital pin)\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\n MeCollisionSensor(uint8_t SensorPin);\r\n\r\n/**\r\n * \\par Function\r\n *    setpin\r\n * \\par Description\r\n *    Reset the limit switch available PIN by its arduino port.\r\n * \\param[in]\r\n *    switchPin - arduino port for switch detect pin.\r\n * \\par Output\r\n *    None\r\n * \\par Return\r\n *    None\r\n * \\par Others\r\n *    None\r\n */\r\n  void setpin(uint8_t switchPin);\r\n\r\n/**\r\n * \\par Function\r\n *   readSensor1\r\n * \\par Description\r\n *   Get the sensors state.\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   0: sensor is Collision \\n\r\n *   1: sensor is not Collision\r\n * \\par Others\r\n *   None\r\n */\r\n  bool readSensor(void);\r\n\r\n/**\r\n * \\par Function\r\n *   onLine\r\n * \\par Description\r\n *   Get the sensors state.\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   true: sensor is Collision \\n\r\n *   false: sensor is not Collision\r\n * \\par Others\r\n *   None\r\n */\r\n bool isCollision(void);\r\n\r\nprivate:\r\n  uint8_t _SensorPin;\r\n};\r\n#endif\r\n"},{filename:"src/MeSingleLineFollower.cpp",code:"/**\r\n * \\par Copyright (C), 2012-2016, MakeBlock\r\n * \\class MeSingleLineFollower\r\n * \\brief   Driver for Me line follwer device.\r\n * @file    MeSingleLineFollower.cpp\r\n * @author  MakeBlock\r\n * @version V1.0.0\r\n * @date    2021/03/24\r\n * @brief   Driver for Me line follwer device.\r\n *\r\n * \\par Copyright\r\n * This software is Copyright (C), 2012-2016, MakeBlock. Use is subject to license \\n\r\n * conditions. The main licensing options available are GPL V2 or Commercial: \\n\r\n *\r\n * \\par Open Source Licensing GPL V2\r\n * This is the appropriate option if you want to share the source code of your \\n\r\n * application with everyone you distribute it to, and you also want to give them \\n\r\n * the right to share who uses it. If you wish to use this software under Open \\n\r\n * Source Licensing, you must contribute all your source code to the open source \\n\r\n * community in accordance with the GPL Version 2 when your application is \\n\r\n * distributed. See http://www.gnu.org/copyleft/gpl.html\r\n *\r\n * \\par Description\r\n * This file is a drive for Me line follwer device, It supports line follwer device\r\n * V2.2 provided by the MakeBlock. The line follwer used Infrared Tube to Use infrared\r\n * receiver and transmitter to detect the black line.\r\n *\r\n * \\par Method List:\r\n *\r\n *    1. void MeSingleLineFollower::setpin(uint8_t SensorPin)\r\n *    2. uint8_t MeSingleLineFollower::readSensor(void)\r\n *    3. bool MeSingleLineFollower::onLine(void)\r\n *    4. bool MeSingleLineFollower::onBackground(void)\r\n *\r\n * \\par History:\r\n * <pre>\r\n * \"<Author>\"         \"<Time>\"        \"<Version>\"        \"<Descr>\"\r\n * huyisi            2021/03/24         1.0.0            build the new.\r\n * </pre>\r\n *\r\n * @example LineFollowerTest.ino\r\n */\r\n\r\n#include \"MeSingleLineFollower.h\"\r\n\r\n\r\n/**\r\n * \\par Function\r\n *   setpin\r\n * \\par Description\r\n *   Reset the line follwer device available PIN by its arduino port.\r\n * \\param[in]\r\n *   SensorPin - arduino port(should digital pin)\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\nMeSingleLineFollower::MeSingleLineFollower(uint8_t SensorPin)\r\n{\r\n  _SensorPin = SensorPin;\r\n  pinMode(_SensorPin,INPUT);\r\n}\r\n\r\n\r\n/**\r\n * \\par Function\r\n *   setpin\r\n * \\par Description\r\n *   Reset the line follwer device available PIN by its arduino port.\r\n * \\param[in]\r\n *   SensorPin - arduino port(should digital pin)\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\nvoid MeSingleLineFollower::setpin(uint8_t SensorPin)\r\n{\r\n  _SensorPin = SensorPin;\r\n  pinMode(_SensorPin,INPUT);\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   readSensor1\r\n * \\par Description\r\n *   Get the sensors state.\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   0: sensor1 is outside of black line \\n\r\n *   1: sensor1 is inside of black line\r\n * \\par Others\r\n *   None\r\n */\r\nbool MeSingleLineFollower::readSensor(void)\r\n{\r\n  return digitalRead(_SensorPin);\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   onLine\r\n * \\par Description\r\n *   Get the sensors1(left sensors) state.\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   true: sensor1 is on black line \\n\r\n *   false: sensor1 is outside of black line\r\n * \\par Others\r\n *   None\r\n */\r\nbool MeSingleLineFollower::onLine(void)\r\n{\r\n  if(digitalRead(_SensorPin))\r\n  {\r\n    return false;\r\n  }\r\n  else\r\n  {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   onBackground\r\n * \\par Description\r\n *   Get the sensors state.\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   true: sensor1 is inside of background \\n\r\n *   false: sensor1 is outside of background\r\n * \\par Others\r\n *   None\r\n */\r\nbool MeSingleLineFollower::onBackground(void)\r\n{\r\n  if(digitalRead(_SensorPin))\r\n  {\r\n    return true;\r\n  }\r\n  else\r\n  {\r\n    return false;\r\n  }\r\n}\r\n\r\n"},{filename:"src/MeSingleLineFollower.h",code:"/**\r\n * \\par Copyright (C), 2012-2016, MakeBlock\r\n * \\class   MeSingleLineFollower\r\n * \\brief   Driver for MeSingleLineFollower module.\r\n * @file    MeSingleLineFollower.h\r\n * @author  MakeBlock\r\n * @version V1.0.0\r\n * @date    2021/03/24\r\n * @brief   Header for MeSingleLineFollower.cpp.\r\n *\r\n * \\par Copyright\r\n * This software is Copyright (C), 2012-2016, MakeBlock. Use is subject to license \\n\r\n * conditions. The main licensing options available are GPL V2 or Commercial: \\n\r\n *\r\n * \\par Open Source Licensing GPL V2\r\n * This is the appropriate option if you want to share the source code of your \\n\r\n * application with everyone you distribute it to, and you also want to give them \\n\r\n * the right to share who uses it. If you wish to use this software under Open \\n\r\n * Source Licensing, you must contribute all your source code to the open source \\n\r\n * community in accordance with the GPL Version 2 when your application is \\n\r\n * distributed. See http://www.gnu.org/copyleft/gpl.html\r\n *\r\n * \\par Description\r\n *\r\n * \\par Method List:\r\n *\r\n *    1. void MeSingleLineFollower::setpin(uint8_t SensorPin)\r\n *    2. uint8_t MeSingleLineFollower::readSensor(void)\r\n *    3. bool MeSingleLineFollower::onLine(void)\r\n *    4. bool MeSingleLineFollower::onBackground(void)\r\n *\r\n * \\par History:\r\n * <pre>\r\n * \"<Author>\"         \"<Time>\"        \"<Version>\"        \"<Descr>\"\r\n * huyisi         2021/03/24     1.0.0            build the new.\r\n * </pre>\r\n *\r\n */\r\n\r\n/* Define to prevent recursive inclusion -------------------------------------*/\r\n#ifndef MeSingleLineFollower_H\r\n#define MeSingleLineFollower_H\r\n\r\n/* Includes ------------------------------------------------------------------*/\r\n#include <stdint.h>\r\n#include <stdbool.h>\r\n#include <Arduino.h>\r\n#include \"MeConfig.h\"\r\n\r\n#ifdef ME_PORT_DEFINED\r\n#include \"MePort.h\"\r\n#endif // ME_PORT_DEFINED\r\n\r\n\r\n/* Exported classes ----------------------------------------------------------*/\r\n/**\r\n * Class: MeSingleLineFollower\r\n * \\par Description\r\n * Declaration of Class MeSingleLineFollower.\r\n */\r\n#ifndef ME_PORT_DEFINED\r\nclass MeSingleLineFollower\r\n#else // !ME_PORT_DEFINED\r\nclass MeSingleLineFollower : public MePort\r\n#endif  // !ME_PORT_DEFINED\r\n{\r\npublic:\r\n\r\n/**\r\n * \\par Function\r\n *   setpin\r\n * \\par Description\r\n *   Reset the line follwer device available PIN by its arduino port.\r\n * \\param[in]\r\n *   SensorPin - arduino port(should digital pin)\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\n MeSingleLineFollower(uint8_t SensorPin);\r\n\r\n/**\r\n * \\par Function\r\n *    setpin\r\n * \\par Description\r\n *    Reset the limit switch available PIN by its arduino port.\r\n * \\param[in]\r\n *    switchPin - arduino port for switch detect pin.\r\n * \\par Output\r\n *    None\r\n * \\par Return\r\n *    None\r\n * \\par Others\r\n *    None\r\n */\r\n  void setpin(uint8_t switchPin);\r\n\r\n/**\r\n * \\par Function\r\n *   readSensor1\r\n * \\par Description\r\n *   Get the sensors state.\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   0: sensor1 is outside of black line \\n\r\n *   1: sensor1 is inside of black line\r\n * \\par Others\r\n *   None\r\n */\r\n  bool readSensor(void);\r\n\r\n /**\r\n * \\par Function\r\n *   onLine\r\n * \\par Description\r\n *   Get the sensors1(left sensors) state.\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   true: sensor1 is on black line \\n\r\n *   false: sensor1 is outside of black line\r\n * \\par Others\r\n *   None\r\n */\r\n  bool onLine(void);\r\n\r\n/**\r\n * \\par Function\r\n *   onBackground\r\n * \\par Description\r\n *   Get the sensors state.\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   true: sensor1 is inside of background \\n\r\n *   false: sensor1 is outside of background\r\n * \\par Others\r\n *   None\r\n */\r\n bool onBackground(void);\r\n\r\nprivate:\r\n  uint8_t _SensorPin;\r\n};\r\n#endif\r\n"},{filename:"src/MeNewRGBLed.cpp",code:"/**\r\n * \\par Copyright (C), 2014-2018, MakeBlock\r\n * \\class MeRGBLed\r\n * \\brief   Driver for W2812 full-color LED.\r\n * @file    MeRGBLed.cpp\r\n * @author  MakeBlock\r\n * @version V1.0.2\r\n * @date    2017/06/23\r\n * @brief   Driver for W2812 full-color LED lights\r\n *\r\n * \\par Copyright\r\n * This software is Copyright (C), 2014-2018, MakeBlock. Use is subject to license \\n\r\n * conditions. The main licensing options available are GPL V2 or Commercial: \\n\r\n *\r\n * \\par Open Source Licensing GPL V2\r\n * This is the appropriate option if you want to share the source code of your \\n\r\n * application with everyone you distribute it to, and you also want to give them \\n\r\n * the right to share who uses it. If you wish to use this software under Open \\n\r\n * Source Licensing, you must contribute all your source code to the open source \\n\r\n * community in accordance with the GPL Version 2 when your application is \\n\r\n * distributed. See http://www.gnu.org/copyleft/gpl.html\r\n *\r\n * \\par Description\r\n * This file is a drive for WS2811/2812 full-color LED lights, It supports\r\n * W2812B full-color LED lights device provided by the MakeBlock.\r\n *\r\n * \\par Method List:\r\n *\r\n *    1. void MeRGBLed::reset(uint8_t port)\r\n *    2. void MeRGBLed::reset(uint8_t port,uint8_t slot)\r\n *    3. void MeRGBLed::setpin(uint8_t port)\r\n *    4. uint8_t MeRGBLed::getNumber()\r\n *    5. cRGB MeRGBLed::getColorAt(uint8_t index)\r\n *    6. void MeRGBLed::fillPixelsBak(uint8_t red, uint8_t green, uint8_t blue)\r\n *    7. bool MeRGBLed::setColorAt(uint8_t index, uint8_t red, uint8_t green, uint8_t blue)\r\n *    8. bool MeRGBLed::setColor(uint8_t index, uint8_t red, uint8_t green, uint8_t blue)\r\n *    9. bool MeRGBLed::setColor(uint8_t red, uint8_t green, uint8_t blue)\r\n *    10. bool MeRGBLed::setColor(uint8_t index, long value)\r\n *    11. void MeRGBLed::show()\r\n *\r\n * \\par History:\r\n * <pre>\r\n * \"<Author>\"         \"<Time>\"        \"<Version>\"        \"<Descr>\"\r\n * Mark Yan         2015/09/01     1.0.0            Rebuild the old lib.\r\n * Scott            2016/09/20     1.0.1            Add a delay.\r\n * Mark Yan         2017/06/23     1.0.2            Add function fillPixelsBak.\r\n * </pre>\r\n *\r\n * @example ColorLoopTest.ino\r\n * @example IndicatorsTest.ino\r\n * @example WhiteBreathLightTest.ino\r\n *\r\n * DERIVED FROM\r\n * light weight WS2812 lib V2.1 - Arduino support\r\n *\r\n * Controls WS2811/WS2812/WS2812B RGB-LEDs\r\n * Author: Tim (cpldcpu@gmail.com)\r\n *\r\n * Jan  18th, 2014  v2.0b Initial Version\r\n * March 7th, 2014  v2.1  Added option to retarget the port register during runtime\r\n *                        Removes inlining to allow compiling with c++\r\n *\r\n * License: GNU GPL v2 (see License.txt)\r\n */\r\n#include \"MeNewRGBLed.h\"\r\n\r\n/**\r\n * Alternate Constructor which can call your own function to map the MeRGBLed to arduino port,\r\n * it will assigned the LED display buffer and initialization the GPIO of LED lights. You can\r\n * set any arduino digital pin for the LED data PIN, The default number of light strips is 32.\r\n * \\param[in]\r\n *   port - arduino port\r\n */\r\nMeNewRGBLed::MeNewRGBLed(uint8_t port)\r\n{\r\n  pinMask       = digitalPinToBitMask(port);\r\n  ws2812_port   = portOutputRegister(digitalPinToPort(port) );\r\n  // set pinMode OUTPUT */\r\n  pinMode(port, OUTPUT);\r\n  setNumber(DEFAULT_MAX_LED_NUMBER);\r\n}\r\n\r\n/**\r\n * Alternate Constructor which can call your own function to map the MeRGBLed to arduino port,\r\n * it will assigned the LED display buffer and initialization the GPIO of LED lights. You can\r\n * set any arduino digital pin for the LED data PIN, and reset the LED number by this constructor.\r\n * \\param[in]\r\n *   port - arduino port\r\n * \\param[in]\r\n *   led_num - The LED number\r\n */\r\nMeNewRGBLed::MeNewRGBLed(uint8_t port, uint8_t led_num)\r\n{\r\n  pinMask       = digitalPinToBitMask(port);\r\n  ws2812_port   = portOutputRegister(digitalPinToPort(port) );\r\n  // set pinMode OUTPUT */\r\n  pinMode(port, OUTPUT);\r\n  setNumber(led_num);\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   setpin\r\n * \\par Description\r\n *   Reset the LED available data PIN by its arduino port.\r\n * \\param[in]\r\n *   port - arduino port(should digital pin)\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\nvoid MeNewRGBLed::setpin(uint8_t port)\r\n{\r\n  setColor(0,0,0,0);\r\n  fillPixelsBak(0,2,1);\r\n  pinMask   = digitalPinToBitMask(port);\r\n  ws2812_port = portOutputRegister(digitalPinToPort(port) );\r\n  pinMode(port, OUTPUT);\r\n // _port = 0;\r\n // _slot = SLOT2;\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   setNumber\r\n * \\par Description\r\n *   Assigned the LED display buffer by the LED number\r\n * \\param[in]\r\n *   num_leds - The LED number you used\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\nvoid MeNewRGBLed::setNumber(uint8_t num_leds)\r\n{\r\n  count_led = num_leds;\r\n  pixels    = (uint8_t*)malloc(count_led * 3);\r\n  if(!pixels)\r\n  {\r\n    printf(\"There is not enough space!\\r\\n\");\r\n  }\r\n  for(int16_t i = 0; i < count_led * 3; i++)\r\n  {\r\n    pixels[i] = 0;\r\n  }\r\n\r\n  pixels_bak    = (uint8_t*)malloc(count_led * 3);\r\n  if(!pixels_bak)\r\n  {\r\n    printf(\"There is not enough space!\\r\\n\");\r\n  }\r\n  for(int16_t i = 0; i < count_led * 3; i++)\r\n  {\r\n    pixels_bak[i] = 0;\r\n  }\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   getColorAt\r\n * \\par Description\r\n *   Get the LED color value from its index\r\n * \\param[in]\r\n *   index - The LED index number you want to read its value\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   The LED color value, include the R,G,B\r\n * \\par Others\r\n *   The index value from 1 to the max\r\n */\r\ncNewRGB MeNewRGBLed::getColorAt(uint8_t index)\r\n{\r\n  cNewRGB px_value;\r\n\r\n  if(index < count_led)\r\n  {\r\n    uint8_t tmp;\r\n    tmp = (index-1) * 3;\r\n\r\n    px_value.g = pixels[tmp];\r\n    px_value.r = pixels[tmp + 1];\r\n    px_value.b = pixels[tmp + 2];\r\n  }\r\n  return(px_value);\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   getNumber\r\n * \\par Description\r\n *   Get the LED number you can light it.\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   The total number of LED's\r\n * \\par Others\r\n *   The index value from 1 to the max\r\n */\r\nuint8_t MeNewRGBLed::getNumber(void)\r\n{\r\n  return(count_led);\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   fillPixelsBak\r\n * \\par Description\r\n *   fill the LED color data to pixels_bak.\r\n * \\param[in]\r\n *   red - Red values\r\n * \\param[in]\r\n *   green - green values\r\n * \\param[in]\r\n *   blue - blue values\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\nvoid MeNewRGBLed::fillPixelsBak(uint8_t red, uint8_t green, uint8_t blue)\r\n{\r\n  for(int16_t i = 0; i < count_led; i++)\r\n  {\r\n    uint8_t tmp = i * 3;\r\n    pixels_bak[tmp] = green;\r\n    pixels_bak[tmp + 1] = red;\r\n    pixels_bak[tmp + 2] = blue;\r\n  }\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   setColorAt\r\n * \\par Description\r\n *   Set the LED color for any LED.\r\n * \\param[in]\r\n *   index - The LED index number you want to set its color\r\n * \\param[in]\r\n *   red - Red values\r\n * \\param[in]\r\n *   green - green values\r\n * \\param[in]\r\n *   blue - blue values\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   TRUE: Successful implementation\r\n *   FALSE: Wrong execution\r\n * \\par Others\r\n *   The index value from 0 to the max.\r\n */\r\nbool MeNewRGBLed::setColorAt(uint8_t index, uint8_t red, uint8_t green, uint8_t blue)\r\n{\r\n  if(index < count_led)\r\n  {\r\n    uint8_t tmp = index * 3;\r\n    pixels[tmp] = green;\r\n    pixels[tmp + 1] = red;\r\n    pixels[tmp + 2] = blue;\r\n    return(true);\r\n  }\r\n  return(false);\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   setColor\r\n * \\par Description\r\n *   Set the LED color for any LED.\r\n * \\param[in]\r\n *   index - The LED index number you want to set its color\r\n * \\param[in]\r\n *   red - Red values\r\n * \\param[in]\r\n *   green - green values\r\n * \\param[in]\r\n *   blue - blue values\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   TRUE: Successful implementation\r\n *   FALSE: Wrong execution\r\n * \\par Others\r\n *   The index value from 1 to the max, if you set the index 0, all the LED will be lit\r\n */\r\nbool MeNewRGBLed::setColor(uint8_t index, uint8_t red, uint8_t green, uint8_t blue)\r\n{\r\n  if(index == 0)\r\n  {\r\n    for(int16_t i = 0; i < count_led; i++)\r\n    {\r\n      setColorAt(i,red,green,blue);\r\n    }\r\n    return(true);\r\n  }\r\n  else\r\n  {\r\n    setColorAt(index-1,red,green,blue);\r\n  }\r\n  return(false);\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   setColor\r\n * \\par Description\r\n *   Set the LED color for all LED.\r\n * \\param[in]\r\n *   red - Red values\r\n * \\param[in]\r\n *   green - green values\r\n * \\param[in]\r\n *   blue - blue values\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   TRUE: Successful implementation\r\n *   FALSE: Wrong execution\r\n * \\par Others\r\n *   All the LED will be lit.\r\n */\r\nbool MeNewRGBLed::setColor(uint8_t red, uint8_t green, uint8_t blue)\r\n{\r\n  return(setColor(0, red, green, blue) );;\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   setColor\r\n * \\par Description\r\n *   Set the LED color for any LED.\r\n * \\param[in]\r\n *   value - the LED color defined as long type, for example (white) = 0xFFFFFF\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   TRUE: Successful implementation\r\n *   FALSE: Wrong execution\r\n * \\par Others\r\n *   The index value from 1 to the max, if you set the index 0, all the LED will be lit\r\n */\r\nbool MeNewRGBLed::setColor(uint8_t index, long value)\r\n{\r\n  if(index == 0)\r\n  {\r\n    for(int16_t i = 0; i < count_led; i++)\r\n    {\r\n      uint8_t tmp    = index * 3;\r\n      uint8_t red    = (value & 0xff0000) >> 16;\r\n      uint8_t green  = (value & 0xff00) >> 8;\r\n      uint8_t blue   = value & 0xff;\r\n      pixels[tmp]    = green;\r\n      pixels[tmp + 1] = red;\r\n      pixels[tmp + 2] = blue;\r\n    }\r\n    return(true);\r\n  }\r\n  else if(index < count_led)\r\n  {\r\n    uint8_t tmp    = (index - 1) * 3;\r\n    uint8_t red    = (value & 0xff0000) >> 16;\r\n    uint8_t green  = (value & 0xff00) >> 8;\r\n    uint8_t blue   = value & 0xff;\r\n    pixels[tmp]    = green;\r\n    pixels[tmp + 1] = red;\r\n    pixels[tmp + 2] = blue;\r\n    return(true);\r\n  }\r\n  return(false);\r\n}\r\n\r\n/*\r\n  This routine writes an array of bytes with RGB values to the Dataout pin\r\n  using the fast 800kHz clockless WS2811/2812 protocol.\r\n */\r\n/* Timing in ns */\r\n#define w_zeropulse (350)\r\n#define w_onepulse  (900)\r\n#define w_totalperiod (1250)\r\n\r\n/* Fixed cycles used by the inner loop */\r\n#define w_fixedlow  (3)\r\n#define w_fixedhigh (6)\r\n#define w_fixedtotal (10)\r\n\r\n/* Insert NOPs to match the timing, if possible */\r\n#define w_zerocycles ( ( (F_CPU / 1000) * w_zeropulse) / 1000000)\r\n#define w_onecycles ( ( (F_CPU / 1000) * w_onepulse + 500000) / 1000000)\r\n#define w_totalcycles ( ( (F_CPU / 1000) * w_totalperiod + 500000) / 1000000)\r\n\r\n/* w1 - nops between rising edge and falling edge - low */\r\n#define w1 (w_zerocycles - w_fixedlow)\r\n/* w2   nops between fe low and fe high */\r\n#define w2 (w_onecycles - w_fixedhigh - w1)\r\n/* w3   nops to complete loop */\r\n#define w3 (w_totalcycles - w_fixedtotal - w1 - w2)\r\n\r\n#if w1 > 0\r\n#define w1_nops w1\r\n#else\r\n#define w1_nops 0\r\n#endif\r\n\r\n/*\r\n  The only critical timing parameter is the minimum pulse length of the \"0\"\r\n  Warn or throw error if this timing can not be met with current F_CPU settings.\r\n */\r\n#define w_lowtime ( (w1_nops + w_fixedlow) * 1000000) / (F_CPU / 1000)\r\n#if w_lowtime > 550\r\n#error \"Light_ws2812: Sorry, the clock speed is too low. Did you set F_CPU correctly?\"\r\n#elif w_lowtime > 450\r\n#warning \"Light_ws2812: The timing is critical and may only work on WS2812B, not on WS2812(S).\"\r\n#warning \"Please consider a higher clockspeed, if possible\"\r\n#endif\r\n\r\n#if w2 > 0\r\n#define w2_nops w2\r\n#else\r\n#define w2_nops 0\r\n#endif\r\n\r\n#if w3 > 0\r\n#define w3_nops w3\r\n#else\r\n#define w3_nops 0\r\n#endif\r\n\r\n#define w_nop1  \"nop      \\n\\t\"\r\n#define w_nop2  \"rjmp .+0 \\n\\t\"\r\n#define w_nop4  w_nop2 w_nop2\r\n#define w_nop8  w_nop4 w_nop4\r\n#define w_nop16 w_nop8 w_nop8\r\n\r\n/**\r\n * \\par Function\r\n *   rgbled_sendarray_mask\r\n * \\par Description\r\n *   Set the LED color for any LED.\r\n * \\param[in]\r\n *   *data - the LED color store memory address\r\n * \\param[in]\r\n *   datlen - the data length need to be transmitted.\r\n * \\param[in]\r\n *   maskhi - the gpio pin mask\r\n * \\param[in]\r\n *   *port - the gpio port address\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   TRUE: Successful implementation\r\n *   FALSE: Wrong execution\r\n * \\par Others\r\n *   None\r\n */\r\nvoid MeNewRGBLed::rgbled_sendarray_mask(uint8_t *data, uint16_t datlen, uint8_t maskhi, uint8_t *port)\r\n{\r\n  uint8_t curbyte, ctr, masklo;\r\n  uint8_t oldSREG = SREG;\r\n  cli(); // Disables all interrupts\r\n\r\n  masklo  = *port & ~maskhi;\r\n  maskhi  = *port | maskhi;\r\n\r\n  while(datlen--)\r\n  {\r\n    curbyte = *data++;\r\n\r\n    asm volatile (\r\n            \"       ldi   %0,8  \\n\\t\"\r\n            \"loop%=:            \\n\\t\"\r\n            \"       st    X,%3 \\n\\t\"        //  '1' [02] '0' [02] - re\r\n#if (w1_nops & 1)\r\n            w_nop1\r\n#endif\r\n#if (w1_nops & 2)\r\n            w_nop2\r\n#endif\r\n#if (w1_nops & 4)\r\n            w_nop4\r\n#endif\r\n#if (w1_nops & 8)\r\n            w_nop8\r\n#endif\r\n#if (w1_nops & 16)\r\n            w_nop16\r\n#endif\r\n            \"       sbrs  %1,7  \\n\\t\"       //  '1' [04] '0' [03]\r\n            \"       st    X,%4 \\n\\t\"        //  '1' [--] '0' [05] - fe-low\r\n            \"       lsl   %1    \\n\\t\"       //  '1' [05] '0' [06]\r\n#if (w2_nops & 1)\r\n            w_nop1\r\n#endif\r\n#if (w2_nops & 2)\r\n            w_nop2\r\n#endif\r\n#if (w2_nops & 4)\r\n            w_nop4\r\n#endif\r\n#if (w2_nops & 8)\r\n            w_nop8\r\n#endif\r\n#if (w2_nops & 16)\r\n            w_nop16\r\n#endif\r\n            \"       brcc skipone%= \\n\\t\"    /*  '1' [+1] '0' [+2] - */\r\n            \"       st   X,%4      \\n\\t\"    /*  '1' [+3] '0' [--] - fe-high */\r\n            \"skipone%=:               \"     /*  '1' [+3] '0' [+2] - */\r\n\r\n#if (w3_nops & 1)\r\n            w_nop1\r\n#endif\r\n#if (w3_nops & 2)\r\n            w_nop2\r\n#endif\r\n#if (w3_nops & 4)\r\n            w_nop4\r\n#endif\r\n#if (w3_nops & 8)\r\n            w_nop8\r\n#endif\r\n#if (w3_nops & 16)\r\n            w_nop16\r\n#endif\r\n\r\n            \"       dec   %0    \\n\\t\"       //  '1' [+4] '0' [+3]\r\n            \"       brne  loop%=\\n\\t\"       //  '1' [+5] '0' [+4]\r\n            : \"=&d\" (ctr)\r\n            : \"r\" (curbyte), \"x\" (port), \"r\" (maskhi), \"r\" (masklo)\r\n    );\r\n  }\r\n\r\n  SREG = oldSREG;\r\n}\r\n\r\n/**\r\n * \\par Function\r\n *   show\r\n * \\par Description\r\n *   Transmission the data to WS2812\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\nvoid MeNewRGBLed::show(void)\r\n{\r\n  if(memcmp(pixels_bak,pixels,3 * count_led) != 0)\r\n  {\r\n    rgbled_sendarray_mask(pixels, 3 * count_led, pinMask, (uint8_t*)ws2812_port);\r\n    memcpy(pixels_bak,pixels,3 * count_led);\r\n    delayMicroseconds(500);\r\n  }\r\n}\r\n\r\n/**\r\n * Destructor which can call your own function, it will release the LED buffer\r\n */\r\nMeNewRGBLed::~MeNewRGBLed(void)\r\n{\r\n  free(pixels);\r\n  pixels = NULL;\r\n  free(pixels_bak);\r\n  pixels_bak = NULL;\r\n}\r\n"},{filename:"src/MeNewRGBLed.h",code:"/**\r\n * \\par Copyright (C), 2014-2018, MakeBlock\r\n * \\class MeRGBLed\r\n * \\brief   Driver for W2812 full-color LED lights.\r\n * @file    MeRGBLed.h\r\n * @author  MakeBlock\r\n * @version V1.0.1\r\n * @date    2017/06/23\r\n * @brief   Header for MeRGBLed.cpp module\r\n *\r\n * \\par Copyright\r\n * This software is Copyright (C), 2014-2018, MakeBlock. Use is subject to license \\n\r\n * conditions. The main licensing options available are GPL V2 or Commercial: \\n\r\n *\r\n * \\par Open Source Licensing GPL V2\r\n * This is the appropriate option if you want to share the source code of your \\n\r\n * application with everyone you distribute it to, and you also want to give them \\n\r\n * the right to share who uses it. If you wish to use this software under Open \\n\r\n * Source Licensing, you must contribute all your source code to the open source \\n\r\n * community in accordance with the GPL Version 2 when your application is \\n\r\n * distributed. See http://www.gnu.org/copyleft/gpl.html\r\n *\r\n * \\par Description\r\n * This file is a drive for WS2811/2812 full-color LED lights, It supports\r\n * W2812B full-color LED lights device provided by the MakeBlock.\r\n *\r\n * \\par Method List:\r\n *\r\n *    1. void MeRGBLed::reset(uint8_t port)\r\n *    2. void MeRGBLed::reset(uint8_t port,uint8_t slot)\r\n *    3. void MeRGBLed::setpin(uint8_t port)\r\n *    4. uint8_t MeRGBLed::getNumber()\r\n *    5. cRGB MeRGBLed::getColorAt(uint8_t index)\r\n *    6. void MeRGBLed::fillPixelsBak(uint8_t red, uint8_t green, uint8_t blue)\r\n *    7. bool MeRGBLed::setColorAt(uint8_t index, uint8_t red, uint8_t green, uint8_t blue)\r\n *    8. bool MeRGBLed::setColor(uint8_t index, uint8_t red, uint8_t green, uint8_t blue)\r\n *    9. bool MeRGBLed::setColor(uint8_t red, uint8_t green, uint8_t blue)\r\n *    10. bool MeRGBLed::setColor(uint8_t index, long value)\r\n *    11. void MeRGBLed::show()\r\n *\r\n * \\par History:\r\n * <pre>\r\n * \"<Author>\"         \"<Time>\"        \"<Version>\"        \"<Descr>\"\r\n * Mark Yan         2015/09/01     1.0.0            Rebuild the old lib.\r\n * Mark Yan         2017/06/23     1.0.1            Add function fillPixelsBak.\r\n * </pre>\r\n *\r\n * DERIVED FROM\r\n * light weight WS2812 lib V2.1 - Arduino support\r\n *\r\n * Controls WS2811/WS2812/WS2812B RGB-LEDs\r\n * Author: Tim (cpldcpu@gmail.com)\r\n *\r\n * Jan  18th, 2014  v2.0b Initial Version\r\n * March 7th, 2014  v2.1  Added option to retarget the port register during runtime\r\n *                        Removes inlining to allow compiling with c++\r\n *\r\n * License: GNU GPL v2 (see License.txt)\r\n */\r\n#ifndef MeNewRGBLed_h\r\n#define MeNewRGBLed_h\r\n#include <stdint.h>\r\n#include <stdbool.h>\r\n#include <Arduino.h>\r\n#include \"MeConfig.h\"\r\n\r\n\r\n#define DEFAULT_MAX_LED_NUMBER  (32)\r\n\r\n/// @brief Class for RGB Led Module\r\nstruct cNewRGB\r\n{\r\n  uint8_t g;\r\n  uint8_t r;\r\n  uint8_t b;\r\n};\r\n\r\n/**\r\n * Class: MeRGBLed\r\n *\r\n * \\par Description\r\n * Declaration of Class MeRGBLed\r\n */\r\n\r\nclass MeNewRGBLed\r\n{\r\npublic:\r\n\r\n/**\r\n * Alternate Constructor which can call your own function to map the MeRGBLed to arduino port,\r\n * it will assigned the LED display buffer and initialization the GPIO of LED lights. You can\r\n * set any arduino digital pin for the LED data PIN, The default number of light strips is 32.\r\n * \\param[in]\r\n *   port - arduino port\r\n */\r\n  MeNewRGBLed(uint8_t port);\r\n\r\n/**\r\n * Alternate Constructor which can call your own function to map the MeRGBLed to arduino port,\r\n * it will assigned the LED display buffer and initialization the GPIO of LED lights. You can\r\n * set any arduino digital pin for the LED data PIN, and reset the LED number by this constructor.\r\n * \\param[in]\r\n *   port - arduino port\r\n * \\param[in]\r\n *   led_num - The LED number\r\n */\r\n  MeNewRGBLed(uint8_t port, uint8_t led_num);\r\n/**\r\n * Destructor which can call your own function, it will release the LED buffer\r\n */\r\n  ~MeNewRGBLed(void);\r\n\r\n/**\r\n * \\par Function\r\n *   setpin\r\n * \\par Description\r\n *   Reset the LED available data PIN by its arduino port.\r\n * \\param[in]\r\n *   port - arduino port(should digital pin)\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\n  void setpin(uint8_t port);\r\n\r\n/**\r\n * \\par Function\r\n *   getNumber\r\n * \\par Description\r\n *   Get the LED number you can light it.\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   The total number of LED's\r\n * \\par Others\r\n *   The index value from 1 to the max\r\n */\r\n  uint8_t getNumber(void);\r\n\r\n/**\r\n * \\par Function\r\n *   getColorAt\r\n * \\par Description\r\n *   Get the LED color value from its index\r\n * \\param[in]\r\n *   index - The LED index number you want to read its value\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   The LED color value, include the R,G,B\r\n * \\par Others\r\n *   The index value from 1 to the max\r\n */\r\n  cNewRGB getColorAt(uint8_t index);\r\n\r\n/**\r\n * \\par Function\r\n *   fillPixelsBak\r\n * \\par Description\r\n *   fill the LED color data to pixels_bak.\r\n * \\param[in]\r\n *   red - Red values\r\n * \\param[in]\r\n *   green - green values\r\n * \\param[in]\r\n *   blue - blue values\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\nvoid fillPixelsBak(uint8_t red, uint8_t green, uint8_t blue);\r\n\r\n/**\r\n * \\par Function\r\n *   setColorAt\r\n * \\par Description\r\n *   Set the LED color for any LED.\r\n * \\param[in]\r\n *   index - The LED index number you want to set its color\r\n * \\param[in]\r\n *   red - Red values\r\n * \\param[in]\r\n *   green - green values\r\n * \\param[in]\r\n *   blue - blue values\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   TRUE: Successful implementation\r\n *   FALSE: Wrong execution\r\n * \\par Others\r\n *   The index value from 0 to the max.\r\n */\r\nbool setColorAt(uint8_t index, uint8_t red, uint8_t green, uint8_t blue);\r\n\r\n/**\r\n * \\par Function\r\n *   setColor\r\n * \\par Description\r\n *   Set the LED color for any LED.\r\n * \\param[in]\r\n *   index - The LED index number you want to set its color\r\n * \\param[in]\r\n *   red - Red values\r\n * \\param[in]\r\n *   green - green values\r\n * \\param[in]\r\n *   blue - blue values\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   TRUE: Successful implementation\r\n *   FALSE: Wrong execution\r\n * \\par Others\r\n *   The index value from 1 to the max, if you set the index 0, all the LED will be lit\r\n */\r\n  bool setColor(uint8_t index, uint8_t red, uint8_t green, uint8_t blue);\r\n\r\n/**\r\n * \\par Function\r\n *   setColor\r\n * \\par Description\r\n *   Set the LED color for all LED.\r\n * \\param[in]\r\n *   red - Red values\r\n * \\param[in]\r\n *   green - green values\r\n * \\param[in]\r\n *   blue - blue values\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   TRUE: Successful implementation\r\n *   FALSE: Wrong execution\r\n * \\par Others\r\n *   All the LED will be lit.\r\n */\r\n  bool setColor(uint8_t red, uint8_t green, uint8_t blue);\r\n\r\n/**\r\n * \\par Function\r\n *   setColor\r\n * \\par Description\r\n *   Set the LED color for any LED.\r\n * \\param[in]\r\n *   value - the LED color defined as long type, for example (white) = 0xFFFFFF\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   TRUE: Successful implementation\r\n *   FALSE: Wrong execution\r\n * \\par Others\r\n *   The index value from 1 to the max, if you set the index 0, all the LED will be lit\r\n */\r\n  bool setColor(uint8_t index, long value);\r\n\r\n/**\r\n * \\par Function\r\n *   setNumber\r\n * \\par Description\r\n *   Assigned the LED display buffer by the LED number\r\n * \\param[in]\r\n *   num_leds - The LED number you used\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\n  void setNumber(uint8_t num_led);\r\n\r\n/**\r\n * \\par Function\r\n *   show\r\n * \\par Description\r\n *   Transmission the data to WS2812\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   None\r\n * \\par Others\r\n *   None\r\n */\r\n  void show(void);\r\n\r\nprivate:\r\n  uint16_t count_led;\r\n  uint8_t *pixels;\r\n  uint8_t *pixels_bak;\r\n\r\n/**\r\n * \\par Function\r\n *   rgbled_sendarray_mask\r\n * \\par Description\r\n *   Set the LED color for any LED.\r\n * \\param[in]\r\n *   *data - the LED color store memory address\r\n * \\param[in]\r\n *   datlen - the data length need to be transmitted.\r\n * \\param[in]\r\n *   maskhi - the gpio pin mask\r\n * \\param[in]\r\n *   *port - the gpio port address\r\n * \\par Output\r\n *   None\r\n * \\return\r\n *   TRUE: Successful implementation\r\n *   FALSE: Wrong execution\r\n * \\par Others\r\n *   None\r\n */\r\n  void rgbled_sendarray_mask(uint8_t *array, uint16_t length, uint8_t pinmask, uint8_t *port);\r\n\r\n  const volatile uint8_t *ws2812_port;\r\n  volatile uint8_t *ws2812_port_reg;\r\n  uint8_t pinMask;\r\n};\r\n#endif\r\n"}]},extFacePanels={"1339ce76":{guid:"1339ce76",name:"megapi rgbled",actions:["DRAW","ERASE","CLEAN","RULER","SAVE"],colorIndex:4,colors:["#4a4a4a","#d0021b","#f5a623","#f8e71c","#7ed321","#50e3c2","#4a90e2","#bd10e0","#fff"],columns:16,defaultFaces:["1,6,3,4"],enableAnimation:!1,interval:10,multiColor:!0,radius:12,rows:8,showNumber:!1,size:{width:32,height:32},startNumber:1,type:"facePanel",sort:999,create_time:1612691570,modify_time:1612691570,uid:1050255,ftype:2,boxspacing:0,bgimg:"",count:4,rowCount:15,allowAddCount:!0,addCount:3,customerSupport:!1,offsetCount:3,rotateAngle:45,id:"575",defaultValue:"1,6,3,4"}},ExtHandler={openSensorium:function openSensorium(device){sensorium.setSender(function(data){device.writeRaw(Uint8Array.from(data))})},closeSensorium:function closeSensorium(){sensorium.setSender(function(){})},onLoad:function onLoad(app,target){return _asyncToGenerator(regeneratorRuntime.mark(function _callee3(){var account,userInfo,_app$workspace8;return regeneratorRuntime.wrap(function(_context3){for(;;)switch(_context3.prev=_context3.next){case 0:return account=app.getService("account"),_context3.next=3,account.getUserInfo();case 3:userInfo=_context3.sent,userInfo||(_app$workspace8=app.workspace).disableBlocks.apply(_app$workspace8,mustLoginBlocks),account.onLogin(function(){var _app$workspace9;(_app$workspace9=app.workspace).enableBlocks.apply(_app$workspace9,mustLoginBlocks)}),account.onLogout(function(){var _app$workspace10;(_app$workspace10=app.workspace).disableBlocks.apply(_app$workspace10,mustLoginBlocks)}),triggerBlocksStatus(target.isUploadMode()?"upload":"debug",app,target);case 8:case"end":return _context3.stop();}},_callee3)}))()},onUnload:function onUnload(){},onConnect:function onConnect(app,device){device.isUploadMode()?this.closeSensorium(device):this.openSensorium(device)},onDisconnect:function onDisconnect(app,device){this.closeSensorium(device)},beforeChangeUploadMode:function beforeChangeUploadMode(){return _asyncToGenerator(regeneratorRuntime.mark(function _callee4(){return regeneratorRuntime.wrap(function(_context4){for(;;)switch(_context4.prev=_context4.next){case 0:return _context4.abrupt("return",!0);case 1:case"end":return _context4.stop();}},_callee4)}))()},beforeChangeDebugMode:function beforeChangeDebugMode(){return _asyncToGenerator(regeneratorRuntime.mark(function _callee5(){return regeneratorRuntime.wrap(function(_context5){for(;;)switch(_context5.prev=_context5.next){case 0:return _context5.abrupt("return",!0);case 1:case"end":return _context5.stop();}},_callee5)}))()},afterChangeUploadMode:function afterChangeUploadMode(app,device){triggerBlocksStatus("upload",app,device),this.closeSensorium()},afterChangeDebugMode:function afterChangeDebugMode(app,device){triggerBlocksStatus("debug",app,device),this.openSensorium(device)},onSelect:function onSelect(app,device){setTimeout(function(){triggerBlocksStatus(device.isUploadMode()?"upload":"debug",app,device)},0)},onUnselect:function onUnselect(app,device){triggerBlocksStatus("",app,device)},beforeCodeUpload:function beforeCodeUpload(){},afterCodeUpload:function afterCodeUpload(){},onRead:function onRead(app,device){sensorium.doReceived(device.readRaw())}},ExtMegapiRobot=function(){function ExtMegapiRobot(){_classCallCheck(this,ExtMegapiRobot),this.checkFirmwareInForce="undefined"!=typeof checkFirmwareInForce&&checkFirmwareInForce,this.funcs={firmwareSettingHandle:{handle:function handle(app,device,info){var uploaderUI=app.getService("system.ui.firmware.uploader");uploaderUI&&(uploaderUI.onOK(function(data){device.uploadFirmware(data)}),uploaderUI.onFail(function(){}),uploaderUI.open(info))},check:function check(){return new Promise(function(){var _ref8=_asyncToGenerator(regeneratorRuntime.mark(function _callee7(resolve){var latest,count,maxCount,info,shouldUpdate,interval;return regeneratorRuntime.wrap(function(_context7){for(;;)switch(_context7.prev=_context7.next){case 0:latest="47.01.101",count=1,maxCount=8,info=null,shouldUpdate=!1,interval=setInterval(_asyncToGenerator(regeneratorRuntime.mark(function _callee6(){var matchVersionRule;return regeneratorRuntime.wrap(function(_context6){for(;;)switch(_context6.prev=_context6.next){case 0:if(!(count>maxCount)){_context6.next=6;break}return shouldUpdate=!0,resolve(shouldUpdate),clearInterval(interval),_context6.abrupt("return");case 6:return count++,_context6.next=9,engine.version.getData();case 9:if(info=_context6.sent,!info){_context6.next=17;break}return matchVersionRule=info&&1<info.toString().split("").filter(function(item){return"."==item}).length,shouldUpdate=null===info||info!==latest&&matchVersionRule,resolve(shouldUpdate),clearInterval(interval),_context6.abrupt("return");case 17:case"end":return _context6.stop();}},_callee6)})),800);case 3:case"end":return _context7.stop();}},_callee7)}));return function(){return _ref8.apply(this,arguments)}}())}},block1616555651965CodesLib:["MeNewRGBLed rgbled_/*{PORT}*/(/*{PORT}*/,4);"],block1616555651965CodesSetup:["rgbled_/*{PORT}*/.fillPixelsBak(0, 2, 1);"],block1616555651965CodesCode:function block1616555651965CodesCode(args){var out_str="";return out_str=args.FACE_PANEL.split("").join(" "),"\nrgbled_".concat(args.PORT,".setColor(").concat(args.POS,",  ").concat(out_str,");\nrgbled_").concat(args.PORT,".show();")},BLOCK_1616555651965:{onRun:function onRun(){}},block1617797266050CodesLib:["MeNewRGBLed rgbled_/*{PORT}*/(/*{PORT}*/,4);"],block1617797266050CodesSetup:["rgbled_/*{PORT}*/.fillPixelsBak(0, 2, 1);"],block1617797266050CodesCode:function block1617797266050CodesCode(args){var color=formatColorData(args.COLOR);return"\nrgbled_".concat(args.PORT,".setColor(").concat(args.POS,", ").concat(color,");\nrgbled_").concat(args.PORT,".show();")},BLOCK_1617797266050:{onRun:function(){var _onRun=_asyncToGenerator(regeneratorRuntime.mark(function _callee8(args,app,device){var index,rgb;return regeneratorRuntime.wrap(function(_context8){for(;;)switch(_context8.prev=_context8.next){case 0:return _context8.next=2,getIndex();case 2:if(index=_context8.sent,rgb=color2RGB(args.COLOR),!(0<=+args.POS&&4>=+args.POS)){_context8.next=9;break}return _context8.next=7,device.asyncWriteProtocol("ff55",megapiProtocol.show_external_led(index,+args.PORT,parseInt(args.POS),rgb));case 7:return _context8.next=9,device.asyncReadProtocol("ff55",[]);case 9:resetIndex(index);case 10:case"end":return _context8.stop();}},_callee8)}));return function onRun(){return _onRun.apply(this,arguments)}}()},block1617797266243CodesLib:["MeNewRGBLed rgbled_/*{PORT}*/(/*{PORT}*/,4);"],block1617797266243CodesSetup:["rgbled_/*{PORT}*/.fillPixelsBak(0, 2, 1);"],block1617797266243CodesCode:function block1617797266243CodesCode(args){return"None"==args.R?args.R=0:0>+args.R?args.R=0:255<+args.R&&(args.R=255),"None"==args.G?args.G=0:0>+args.G?args.G=0:255<+args.G&&(args.G=255),"None"==args.B?args.B=0:0>+args.B?args.B=0:255<+args.B&&(args.B=255),"\nrgbled_".concat(args.PORT,".setColor(").concat(args.POS,", ").concat(args.R,", ").concat(args.G,", ").concat(args.B,");\nrgbled_").concat(args.PORT,".show();")},BLOCK_1617797266243:{onRun:function(){var _onRun2=_asyncToGenerator(regeneratorRuntime.mark(function _callee9(args,app,device){var index,rgb;return regeneratorRuntime.wrap(function(_context9){for(;;)switch(_context9.prev=_context9.next){case 0:return isNaN(args.R)||0>args.R?args.R=0:255<args.R&&(args.R=255),args.R=parseInt(args.R),isNaN(args.G)||0>args.G?args.G=0:255<args.G&&(args.G=255),args.G=parseInt(args.G),isNaN(args.B)||0>args.B?args.B=0:255<args.B&&(args.B=255),args.B=parseInt(args.B),_context9.next=8,getIndex();case 8:if(index=_context9.sent,rgb=[args.R,args.G,args.B],!(0<=+args.POS&&4>=+args.POS)){_context9.next=15;break}return _context9.next=13,device.asyncWriteProtocol("ff55",megapiProtocol.show_external_led(index,+args.PORT,parseInt(args.POS),rgb));case 13:return _context9.next=15,device.asyncReadProtocol("ff55",[]);case 15:resetIndex(index);case 16:case"end":return _context9.stop();}},_callee9)}));return function onRun(){return _onRun2.apply(this,arguments)}}()},block1617797266441CodesLib:["MeNewRGBLed rgbled_/*{PORT}*/(/*{PORT}*/,4);"],block1617797266441CodesSetup:["rgbled_/*{PORT}*/.fillPixelsBak(0, 2, 1);"],block1617797266441CodesCode:function block1617797266441CodesCode(args){return"\nrgbled_".concat(args.PORT,".setColor(").concat(args.POS,",  0, 0, 0);\nrgbled_").concat(args.PORT,".show();")},BLOCK_1617797266441:{onRun:function(){var _onRun3=_asyncToGenerator(regeneratorRuntime.mark(function _callee10(args,app,device){var index,rgb;return regeneratorRuntime.wrap(function(_context10){for(;;)switch(_context10.prev=_context10.next){case 0:return _context10.next=2,getIndex();case 2:if(index=_context10.sent,rgb=[0,0,0],!(0<=+args.POS&&4>=+args.POS)){_context10.next=9;break}return _context10.next=7,device.asyncWriteProtocol("ff55",megapiProtocol.show_external_led(index,+args.PORT,parseInt(args.POS),rgb));case 7:return _context10.next=9,device.asyncReadProtocol("ff55",[]);case 9:resetIndex(index);case 10:case"end":return _context10.stop();}},_callee10)}));return function onRun(){return _onRun3.apply(this,arguments)}}()},block1617797266298CodesLib:["MeNewRGBLed rgbled_/*{PORT}*/(/*{PORT}*/,4);"],block1617797266298CodesSetup:["rgbled_/*{PORT}*/.fillPixelsBak(0, 2, 1);"],block1617797266298CodesCode:function block1617797266298CodesCode(args){var color=formatColorData(args.COLOR);return"\nrgbled_".concat(args.PORT,".setColor(0, ").concat(color,");\nrgbled_").concat(args.PORT,".show();")},BLOCK_1617797266298:{onRun:function(){var _onRun4=_asyncToGenerator(regeneratorRuntime.mark(function _callee11(args,app,device){var index,rgb;return regeneratorRuntime.wrap(function(_context11){for(;;)switch(_context11.prev=_context11.next){case 0:return _context11.next=2,getIndex();case 2:return index=_context11.sent,rgb=color2RGB(args.COLOR),_context11.next=6,device.asyncWriteProtocol("ff55",megapiProtocol.show_external_led(index,+args.PORT,0,rgb));case 6:return _context11.next=8,device.asyncReadProtocol("ff55",[]);case 8:resetIndex(index);case 9:case"end":return _context11.stop();}},_callee11)}));return function onRun(){return _onRun4.apply(this,arguments)}}()},block1617797266352CodesLib:["MeNewRGBLed rgbled_/*{PORT}*/(/*{PORT}*/,4);"],block1617797266352CodesSetup:["rgbled_/*{PORT}*/.fillPixelsBak(0, 2, 1);"],block1617797266352CodesCode:function block1617797266352CodesCode(args){return"None"==args.R?args.R=0:0>+args.R?args.R=0:255<+args.R&&(args.R=255),"None"==args.G?args.G=0:0>+args.G?args.G=0:255<+args.G&&(args.G=255),"None"==args.B?args.B=0:0>+args.B?args.B=0:255<+args.B&&(args.B=255),"\nrgbled_".concat(args.PORT,".setColor(0, ").concat(args.R,", ").concat(args.G,", ").concat(args.B,");\nrgbled_").concat(args.PORT,".show();")},BLOCK_1617797266352:{onRun:function(){var _onRun5=_asyncToGenerator(regeneratorRuntime.mark(function _callee12(args,app,device){var index,rgb;return regeneratorRuntime.wrap(function(_context12){for(;;)switch(_context12.prev=_context12.next){case 0:return isNaN(args.R)||0>args.R?args.R=0:255<args.R&&(args.R=255),args.R=parseInt(args.R),isNaN(args.G)||0>args.G?args.G=0:255<args.G&&(args.G=255),args.G=parseInt(args.G),isNaN(args.B)||0>args.B?args.B=0:255<args.B&&(args.B=255),args.B=parseInt(args.B),_context12.next=8,getIndex();case 8:return index=_context12.sent,rgb=[args.R,args.G,args.B],_context12.next=12,device.asyncWriteProtocol("ff55",megapiProtocol.show_external_led(index,+args.PORT,0,rgb));case 12:return _context12.next=14,device.asyncReadProtocol("ff55",[]);case 14:resetIndex(index);case 15:case"end":return _context12.stop();}},_callee12)}));return function onRun(){return _onRun5.apply(this,arguments)}}()},block1616555750567CodesLib:["MeMegaPiDCMotor motor_/*{PORT}*/(/*{PORT}*/);"],block1616555750567CodesCode:function block1616555750567CodesCode(args){return"None"==args.POWER?args.POWER=0:-100>+args.POWER?args.POWER=-100:100<+args.POWER&&(args.POWER=100),"\nmotor_".concat(args.PORT,".run(").concat(args.POWER," / 100.0 * 255);")},BLOCK_1616555750567:{onRun:function(){var _onRun6=_asyncToGenerator(regeneratorRuntime.mark(function _callee13(args,app,device){var index;return regeneratorRuntime.wrap(function(_context13){for(;;)switch(_context13.prev=_context13.next){case 0:return isNaN(args.POWER)?args.POWER=0:-100>+args.POWER?args.POWER=-100:100<+args.POWER&&(args.POWER=100),args.POWER=parseInt(args.POWER),_context13.next=4,getIndex();case 4:return index=_context13.sent,_context13.next=7,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,+args.PORT,255*(+args.POWER/100)));case 7:return _context13.next=9,device.asyncReadProtocol("ff55",[]);case 9:resetIndex(index);case 10:case"end":return _context13.stop();}},_callee13)}));return function onRun(){return _onRun6.apply(this,arguments)}}()},block1616555750670CodesLib:["MeMegaPiDCMotor motor_/*{PORT1}*/(/*{PORT1}*/);","MeMegaPiDCMotor motor_/*{PORT2}*/(/*{PORT2}*/);"],block1616555750670CodesCode:function block1616555750670CodesCode(args){"None"==args.POWER?args.POWER=0:-100>+args.POWER?args.POWER=-100:100<+args.POWER&&(args.POWER=100);var same_port=0;return args.PORT1==args.PORT2&&(same_port=1),same_port?"\nmotor_".concat(args.PORT1,".run(").concat(args.POWER," / 100.0 * 255);"):"\nmotor_".concat(args.PORT1,".run(").concat(args.POWER," / 100.0 * 255);\nmotor_").concat(args.PORT2,".run(").concat(args.POWER," / 100.0 * 255);")},BLOCK_1616555750670:{onRun:function(){var _onRun7=_asyncToGenerator(regeneratorRuntime.mark(function _callee14(args,app,device){var index,same_port;return regeneratorRuntime.wrap(function(_context14){for(;;)switch(_context14.prev=_context14.next){case 0:return isNaN(args.POWER)?args.POWER=0:-100>+args.POWER?args.POWER=-100:100<+args.POWER&&(args.POWER=100),args.POWER=parseInt(args.POWER),_context14.next=4,getIndex();case 4:if(index=_context14.sent,same_port=0,args.PORT1==args.PORT2&&(same_port=1),!same_port){_context14.next=14;break}return _context14.next=10,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,+args.PORT1,255*(+args.POWER/100)));case 10:return _context14.next=12,device.asyncReadProtocol("ff55",[]);case 12:_context14.next=22;break;case 14:return _context14.next=16,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,+args.PORT1,255*(+args.POWER/100)));case 16:return _context14.next=18,device.asyncReadProtocol("ff55",[]);case 18:return _context14.next=20,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,+args.PORT2,255*(+args.POWER/100)));case 20:return _context14.next=22,device.asyncReadProtocol("ff55",[]);case 22:resetIndex(index);case 23:case"end":return _context14.stop();}},_callee14)}));return function onRun(){return _onRun7.apply(this,arguments)}}()},block1616555750741CodesLib:["MeMegaPiDCMotor motor_1(1);","MeMegaPiDCMotor motor_9(9);","MeMegaPiDCMotor motor_2(2);","MeMegaPiDCMotor motor_10(10);","MeMegaPiDCMotor motor_3(3);","MeMegaPiDCMotor motor_11(11);","MeMegaPiDCMotor motor_4(4);","MeMegaPiDCMotor motor_12(12);"],block1616555750741CodesCode:function block1616555750741CodesCode(args){return"None"==args.POWER?args.POWER=0:-100>+args.POWER?args.POWER=-100:100<+args.POWER&&(args.POWER=100),"\nmotor_1.run(".concat(args.POWER," / 100.0 * 255);\nmotor_9.run(").concat(args.POWER," / 100.0 * 255);\nmotor_2.run(").concat(args.POWER," / 100.0 * 255);\nmotor_10.run(").concat(args.POWER," / 100.0 * 255);\nmotor_3.run(").concat(args.POWER," / 100.0 * 255);\nmotor_11.run(").concat(args.POWER," / 100.0 * 255);\nmotor_4.run(").concat(args.POWER," / 100.0 * 255);\nmotor_12.run(").concat(args.POWER," / 100.0 * 255);")},BLOCK_1616555750741:{onRun:function(){var _onRun8=_asyncToGenerator(regeneratorRuntime.mark(function _callee15(args,app,device){var index;return regeneratorRuntime.wrap(function(_context15){for(;;)switch(_context15.prev=_context15.next){case 0:return isNaN(args.POWER)?args.POWER=0:-100>+args.POWER?args.POWER=-100:100<+args.POWER&&(args.POWER=100),args.POWER=parseInt(args.POWER),_context15.next=4,getIndex();case 4:return index=_context15.sent,_context15.next=7,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,1,255*(+args.POWER/100)));case 7:return _context15.next=9,device.asyncReadProtocol("ff55",[]);case 9:return _context15.next=11,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,9,255*(+args.POWER/100)));case 11:return _context15.next=13,device.asyncReadProtocol("ff55",[]);case 13:return _context15.next=15,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,2,255*(+args.POWER/100)));case 15:return _context15.next=17,device.asyncReadProtocol("ff55",[]);case 17:return _context15.next=19,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,10,255*(+args.POWER/100)));case 19:return _context15.next=21,device.asyncReadProtocol("ff55",[]);case 21:return _context15.next=23,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,3,255*(+args.POWER/100)));case 23:return _context15.next=25,device.asyncReadProtocol("ff55",[]);case 25:return _context15.next=27,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,11,255*(+args.POWER/100)));case 27:return _context15.next=29,device.asyncReadProtocol("ff55",[]);case 29:return _context15.next=31,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,4,255*(+args.POWER/100)));case 31:return _context15.next=33,device.asyncReadProtocol("ff55",[]);case 33:return _context15.next=35,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,12,255*(+args.POWER/100)));case 35:return _context15.next=37,device.asyncReadProtocol("ff55",[]);case 37:resetIndex(index);case 38:case"end":return _context15.stop();}},_callee15)}));return function onRun(){return _onRun8.apply(this,arguments)}}()},block1617082946013CodesLib:["MeMegaPiDCMotor motor_1(1);","MeMegaPiDCMotor motor_9(9);","MeMegaPiDCMotor motor_2(2);","MeMegaPiDCMotor motor_10(10);","MeMegaPiDCMotor motor_3(3);","MeMegaPiDCMotor motor_11(11);","MeMegaPiDCMotor motor_4(4);","MeMegaPiDCMotor motor_12(12);"],block1617082946013CodesCode:function block1617082946013CodesCode(){return"\nmotor_1.run(0);\nmotor_9.run(0);\nmotor_2.run(0);\nmotor_10.run(0);\nmotor_3.run(0);\nmotor_11.run(0);\nmotor_4.run(0);\nmotor_12.run(0);"},BLOCK_1617082946013:{onRun:function(){var _onRun9=_asyncToGenerator(regeneratorRuntime.mark(function _callee16(args,app,device){var index;return regeneratorRuntime.wrap(function(_context16){for(;;)switch(_context16.prev=_context16.next){case 0:return _context16.next=2,getIndex();case 2:return index=_context16.sent,_context16.next=5,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,1,0));case 5:return _context16.next=7,device.asyncReadProtocol("ff55",[]);case 7:return _context16.next=9,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,9,0));case 9:return _context16.next=11,device.asyncReadProtocol("ff55",[]);case 11:return _context16.next=13,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,2,0));case 13:return _context16.next=15,device.asyncReadProtocol("ff55",[]);case 15:return _context16.next=17,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,10,0));case 17:return _context16.next=19,device.asyncReadProtocol("ff55",[]);case 19:return _context16.next=21,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,3,0));case 21:return _context16.next=23,device.asyncReadProtocol("ff55",[]);case 23:return _context16.next=25,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,11,0));case 25:return _context16.next=27,device.asyncReadProtocol("ff55",[]);case 27:return _context16.next=29,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,4,0));case 29:return _context16.next=31,device.asyncReadProtocol("ff55",[]);case 31:return _context16.next=33,device.asyncWriteProtocol("ff55",megapiProtocol.run_motor(index,12,0));case 33:return _context16.next=35,device.asyncReadProtocol("ff55",[]);case 35:resetIndex(index);case 36:case"end":return _context16.stop();}},_callee16)}));return function onRun(){return _onRun9.apply(this,arguments)}}()},block1616747767054CodesLib:["MeMegaPiDCMotor motor_1(1);","MeMegaPiDCMotor motor_9(9);","MeMegaPiDCMotor motor_2(2);","MeMegaPiDCMotor motor_10(10);"],block1616747767054CodesCode:function block1616747767054CodesCode(args){var dirction=args.MOVE_DIRECTION;return("None"==args.POWER||0>args.POWER?args.POWER=0:100<args.POWER&&(args.POWER=100),0==dirction)?"\nmove_control(0, ".concat(args.POWER," / 100.0 * 255, 0);"):1==dirction?"\nmove_control(0, -".concat(args.POWER," / 100.0 * 255, 0);"):2==dirction?"\nmove_control(-".concat(args.POWER," / 100.0 * 255, 0, 0);"):3==dirction?"\nmove_control(".concat(args.POWER," / 100.0 * 255, 0, 0);"):void 0},BLOCK_1616747767054:{onRun:function(){var _onRun10=_asyncToGenerator(regeneratorRuntime.mark(function _callee17(args,app,device){var dirction,index;return regeneratorRuntime.wrap(function(_context17){for(;;)switch(_context17.prev=_context17.next){case 0:return dirction=args.MOVE_DIRECTION,"None"==args.POWER||0>args.POWER?args.POWER=0:100<args.POWER&&(args.POWER=100),args.POWER=parseInt(args.POWER),_context17.next=5,getIndex();case 5:if(index=_context17.sent,0!=dirction){_context17.next=11;break}return _context17.next=9,device.asyncWriteProtocol("ff55",megapiProtocol.run_car(index,0,0,255*(+args.POWER/100)),0);case 9:_context17.next=24;break;case 11:if(1!=dirction){_context17.next=16;break}return _context17.next=14,device.asyncWriteProtocol("ff55",megapiProtocol.run_car(index,0,0,255*(+-args.POWER/100)),0);case 14:_context17.next=24;break;case 16:if(2!=dirction){_context17.next=21;break}return _context17.next=19,device.asyncWriteProtocol("ff55",megapiProtocol.run_car(index,0,255*(+-args.POWER/100)),0,0);case 19:_context17.next=24;break;case 21:if(3!=dirction){_context17.next=24;break}return _context17.next=24,device.asyncWriteProtocol("ff55",megapiProtocol.run_car(index,0,255*(+args.POWER/100)),0,0);case 24:return _context17.next=26,device.asyncReadProtocol("ff55",[]);case 26:resetIndex(index);case 27:case"end":return _context17.stop();}},_callee17)}));return function onRun(){return _onRun10.apply(this,arguments)}}()},block1616748288206CodesLib:["MeMegaPiDCMotor motor_1(1);","MeMegaPiDCMotor motor_9(9);","MeMegaPiDCMotor motor_2(2);","MeMegaPiDCMotor motor_10(10);"],block1616748288206CodesCode:function block1616748288206CodesCode(args){return"None"==args.vx?args.vx=0:-100>+args.vx?args.vx=-100:100<+args.vx&&(args.vx=100),"None"==args.vy?args.vy=0:-100>+args.vy?args.vy=-100:100<+args.vy&&(args.vy=100),"None"==args.vw?args.vw=0:-100>+args.vw?args.vw=-100:100<+args.vw&&(args.vw=100),"\nmove_control(".concat(args.vx," / 100.0 * 255,").concat(args.vy," / 100.0 * 255,").concat(args.vw," / 100.0 * 255);")},BLOCK_1616748288206:{onRun:function(){var _onRun11=_asyncToGenerator(regeneratorRuntime.mark(function _callee18(args,app,device){var index;return regeneratorRuntime.wrap(function(_context18){for(;;)switch(_context18.prev=_context18.next){case 0:return"None"==args.vx?args.vx=0:-100>+args.vx?args.vx=-100:100<+args.vx&&(args.vx=100),"None"==args.vy?args.vy=0:-100>+args.vy?args.vy=-100:100<+args.vy&&(args.vy=100),"None"==args.vw?args.vw=0:-100>+args.vw?args.vw=-100:100<+args.vw&&(args.vw=100),_context18.next=5,getIndex();case 5:return index=_context18.sent,_context18.next=8,device.asyncWriteProtocol("ff55",megapiProtocol.run_car(index,0,255*(+args.vx/100),255*(+args.vy/100),255*(+args.vw/100)));case 8:return _context18.next=10,device.asyncReadProtocol("ff55",[]);case 10:resetIndex(index);case 11:case"end":return _context18.stop();}},_callee18)}));return function onRun(){return _onRun11.apply(this,arguments)}}()},block1616555666950CodesLib:["MeBarrierSensor barrier_/*{PORT}*/(/*{PORT}*/);"],BLOCK_1616555666950:{onRun:function(){var _onRun12=_asyncToGenerator(regeneratorRuntime.mark(function _callee19(args,app,device){var index,value;return regeneratorRuntime.wrap(function(_context19){for(;;)switch(_context19.prev=_context19.next){case 0:return _context19.next=2,getIndex();case 2:return index=_context19.sent,_context19.next=5,device.asyncWriteProtocol("ff55",[["byte",index],"0146",["byte",+args.PORT]]);case 5:return _context19.next=7,device.asyncReadProtocol("ff55",["".concat(byte2Hex(index),"02"),"float"]);case 7:if(value=_context19.sent,resetIndex(index),null!=value){_context19.next=12;break}return _context19.abrupt("return",0);case 12:return _context19.abrupt("return",!value[0]);case 13:case"end":return _context19.stop();}},_callee19)}));return function onRun(){return _onRun12.apply(this,arguments)}}()},block1616555667136CodesLib:["MeSingleLineFollower linefollower_/*{PORT}*/(/*{PORT}*/);"],BLOCK_1616555667136:{onRun:function(){var _onRun13=_asyncToGenerator(regeneratorRuntime.mark(function _callee20(args,app,device){var index,black_white,value;return regeneratorRuntime.wrap(function(_context20){for(;;)switch(_context20.prev=_context20.next){case 0:return _context20.next=2,getIndex();case 2:return index=_context20.sent,black_white=+args.COLOR,_context20.next=6,device.asyncWriteProtocol("ff55",[["byte",index],"0144",["byte",+args.PORT]]);case 6:return _context20.next=8,device.asyncReadProtocol("ff55",["".concat(byte2Hex(index),"02"),"float"]);case 8:if(value=_context20.sent,resetIndex(index),null!=value){_context20.next=13;break}return _context20.abrupt("return",0);case 13:if(!black_white){_context20.next=17;break}return _context20.abrupt("return",!!value[0]);case 17:return _context20.abrupt("return",!value[0]);case 18:case"end":return _context20.stop();}},_callee20)}));return function onRun(){return _onRun13.apply(this,arguments)}}()},block1616555667069CodesLib:["MeCollisionSensor collision_/*{PORT}*/(/*{PORT}*/);"],BLOCK_1616555667069:{onRun:function(){var _onRun14=_asyncToGenerator(regeneratorRuntime.mark(function _callee21(args,app,device){var index,value;return regeneratorRuntime.wrap(function(_context21){for(;;)switch(_context21.prev=_context21.next){case 0:return _context21.next=2,getIndex();case 2:return index=_context21.sent,_context21.next=5,device.asyncWriteProtocol("ff55",[["byte",index],"0145",["byte",+args.PORT]]);case 5:return _context21.next=7,device.asyncReadProtocol("ff55",["".concat(byte2Hex(index),"02"),"float"]);case 7:if(value=_context21.sent,resetIndex(index),null!=value){_context21.next=12;break}return _context21.abrupt("return",0);case 12:return _context21.abrupt("return",!value[0]);case 13:case"end":return _context21.stop();}},_callee21)}));return function onRun(){return _onRun14.apply(this,arguments)}}()},detectTimerCodesLib:["double currentTime = 0;","double lastTime = 0;"],detectTimerCodesDeclare:["double getLastTime() {\n  return currentTime = millis()/1000.0 - lastTime;\n}"],detect_timer:{onRun:function(){var _onRun15=_asyncToGenerator(regeneratorRuntime.mark(function _callee22(){return regeneratorRuntime.wrap(function(_context22){for(;;)switch(_context22.prev=_context22.next){case 0:return _context22.abrupt("return",((new Date().getTime()-lastTime)/1e3).toFixed(3));case 1:case"end":return _context22.stop();}},_callee22)}));return function onRun(){return _onRun15.apply(this,arguments)}}()},resetTimerCodesLib:["double currentTime = 0;","double lastTime = 0;"],reset_timer:{onRun:function(){var _onRun16=_asyncToGenerator(regeneratorRuntime.mark(function _callee23(){return regeneratorRuntime.wrap(function(_context23){for(;;)switch(_context23.prev=_context23.next){case 0:lastTime=new Date().getTime();case 1:case"end":return _context23.stop();}},_callee23)}));return function onRun(){return _onRun16.apply(this,arguments)}}()},megapiMainCodesLib:["double angle_rad = PI/180.0;","double angle_deg = 180.0/PI;"],megapiMainCodesSetup:["TCCR1A = _BV(WGM10);","TCCR1B = _BV(CS11) | _BV(WGM12);","TCCR2A = _BV(WGM21) | _BV(WGM20);","TCCR2B = _BV(CS21);"],megapi_main:{onRun:function onRun(){},onAdd:function onAdd(){},onRemove:function onRemove(){}},proceduresDefinitionCodesDeclare:["void /*{$PROC_CODE}*/{\n  /*{$BRANCH}*/\n}",0]}}return _createClass(ExtMegapiRobot,[{key:"getInfo",value:function getInfo(){return{id:"megapi_robot",targets:{device:!0,name:"megapi_robot",icon:window.MbApi.getExtResPath("megapi_robot/imgs/80d0de0d8bdc49cda92cbebcc5112f33.png","megapi_robot"),enableCode:!0,enableUpload:["serialport"],enableOnline:["serialport"],shouldConnect:["serialport"],defaultOnline:!0,options:{connect:{serialport:{helpLink:"",tips:{success:[""],fail:["megapi_robot.connect_fail_e3b8aead","megapi_robot.connect_fail_0a8e963b","megapi_robot.connect_fail_c6b30a1c"]},baudRate:"115200",vendorId:"0x7523"},ble:{helpLink:"",tips:{success:[""],fail:["megapi_robot.connect_fail_9a8a4feb","megapi_robot.connect_fail_671017f3","megapi_robot.connect_fail_aad5f15d","megapi_robot.connect_fail_2df5ee83"]},channel:"1",localName:"Makeblock",serviceUUID:"ffe1",writeProperty:"ffe3",notifyProperty:"ffe2"},hid:{helpLink:"",tips:{success:[""],fail:[""]}}},upload:{helpLink:"",tips:{success:[""],fail:["megapi_robot.upload_fail_c9f06d49","megapi_robot.upload_fail_3bd7dbc4"]},middlewares:[{name:"arduino",params:{board:"mega",sources:extSources.arduino}}],driver:{name:"stk500v2"}},firmware:{helpLink:"",tips:{success:["megapi_robot.firmware_success_5a28c266"],fail:["megapi_robot.firmware_fail_e4b56cf5"]},driver:{name:"stk500v2"}}},firmware:[{id:"e0a3fed5",name:"megapi_robot.firmwares_version_e0a3fed5",version:"47.01.101",isDefault:!1,url:{name:"Firmware_for_mBot_mega_online.ino.mega.hex",url:window.MbApi.getExtResPath("megapi_robot/res/dbca654e29934f6ca930ee0024d3dc54.hex","megapi_robot")}},{id:"625bba0b",name:"megapi_robot.firmwares_version_625bba0b",version:"47.01.002",isDefault:!1,url:{name:"Firmware_for_mBot_mega.ino.mega.hex",url:window.MbApi.getExtResPath("megapi_robot/res/17b0215b4d94470db3d3bdf6afd1ba8e.hex","megapi_robot")}}],settings:[{text:"megapi_robot.UPDATE_FIRMWARE",handle:this.funcs.firmwareSettingHandle}],categoriesOrder:["display","power","sensing","events","control","operators","data","myBlocks"],ota:{param:{host:"",text:""},desc:[]}},codeTypes:["arduinoc"],version:"1.0.5",platform:["mblockpc","mblockweb","mblockapp"],categories:[{name:"display",colors:["#BD10E0","#AA0ECA","#970DB3"],menuIconURI:"",blockIcon:null,blocks:[{opcode:"BLOCK_1616555651965",blockType:"command",checkboxInFlyout:!1,hidden:!0,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"67",menu:"BLOCK_1616555651965_PORT"},FACE_PANEL:extFacePanels["1339ce76"]},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:this.funcs.block1616555651965CodesCode,sections:{lib:this.funcs.block1616555651965CodesLib,setup:this.funcs.block1616555651965CodesSetup}}},handler:this.funcs.BLOCK_1616555651965},{opcode:"BLOCK_1617797266050",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"67",menu:"BLOCK_1616555651965_PORT"},POS:{type:"number",defaultValue:1},COLOR:{type:"color",defaultValue:"#7ED321"}},branchCount:0,platform:["mblockpc","mblockweb"],codes:{arduinoc:{code:this.funcs.block1617797266050CodesCode,sections:{lib:this.funcs.block1617797266050CodesLib,setup:this.funcs.block1617797266050CodesSetup}}},handler:this.funcs.BLOCK_1617797266050},{opcode:"BLOCK_1617797266243",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"67",menu:"BLOCK_1616555651965_PORT"},POS:{type:"number",defaultValue:1},R:{type:"number",defaultValue:255},G:{type:"number",defaultValue:0},B:{type:"number",defaultValue:0}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:this.funcs.block1617797266243CodesCode,sections:{lib:this.funcs.block1617797266243CodesLib,setup:this.funcs.block1617797266243CodesSetup}}},handler:this.funcs.BLOCK_1617797266243},{opcode:"BLOCK_1617797266441",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"67",menu:"BLOCK_1616555651965_PORT"},POS:{type:"number",defaultValue:1}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:this.funcs.block1617797266441CodesCode,sections:{lib:this.funcs.block1617797266441CodesLib,setup:this.funcs.block1617797266441CodesSetup}}},handler:this.funcs.BLOCK_1617797266441},{opcode:"BLOCK_1617797266298",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"67",menu:"BLOCK_1616555651965_PORT"},COLOR:{type:"color",defaultValue:"#7ED321"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:this.funcs.block1617797266298CodesCode,sections:{lib:this.funcs.block1617797266298CodesLib,setup:this.funcs.block1617797266298CodesSetup}}},handler:this.funcs.BLOCK_1617797266298},{opcode:"BLOCK_1617797266352",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"67",menu:"BLOCK_1616555651965_PORT"},R:{type:"number",defaultValue:255},G:{type:"number",defaultValue:0},B:{type:"number",defaultValue:0}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:this.funcs.block1617797266352CodesCode,sections:{lib:this.funcs.block1617797266352CodesLib,setup:this.funcs.block1617797266352CodesSetup}}},handler:this.funcs.BLOCK_1617797266352}],menus:{BLOCK_1616555651965_PORT:[{text:"BLOCK_1616555651965_PORT_0",value:"67"},{text:"BLOCK_1616555651965_PORT_1",value:"68"}]}},{name:"power",colors:["#4A90E2","#3080DE","#2171CF"],menuIconURI:"",blockIcon:null,blocks:[{opcode:"BLOCK_1616555750567",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"1",menu:"BLOCK_1616555750567_PORT"},POWER:{type:"number",defaultValue:50}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:this.funcs.block1616555750567CodesCode,sections:{lib:this.funcs.block1616555750567CodesLib}}},handler:this.funcs.BLOCK_1616555750567},{opcode:"BLOCK_1616555750670",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT1:{type:"fieldMenu",defaultValue:"1",menu:"BLOCK_1616555750567_PORT"},PORT2:{type:"fieldMenu",defaultValue:"9",menu:"BLOCK_1616555750567_PORT"},POWER:{type:"number",defaultValue:50}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:this.funcs.block1616555750670CodesCode,sections:{lib:this.funcs.block1616555750670CodesLib}}},handler:this.funcs.BLOCK_1616555750670},{opcode:"BLOCK_1616555750741",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{POWER:{type:"number",defaultValue:50}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:this.funcs.block1616555750741CodesCode,sections:{lib:this.funcs.block1616555750741CodesLib}}},handler:this.funcs.BLOCK_1616555750741},{opcode:"BLOCK_1617082946013",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:this.funcs.block1617082946013CodesCode,sections:{lib:this.funcs.block1617082946013CodesLib}}},handler:this.funcs.BLOCK_1617082946013},{opcode:"BLOCK_1616747767054",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{MOVE_DIRECTION:{type:"fieldMenu",defaultValue:"0",menu:"BLOCK_1616747767054_MOVE_DIRECTION"},POWER:{type:"number",defaultValue:50}},branchCount:0,platform:["mblockpc","mblockweb"],codes:{arduinoc:{code:this.funcs.block1616747767054CodesCode,sections:{lib:this.funcs.block1616747767054CodesLib,declare:"void motor_foward_left_run(int16_t speed)\r\n{\r\n   motor_10.run(-speed);\r\n}\r\n\r\nvoid motor_foward_right_run(int16_t speed)\r\n{\r\n  motor_1.run(speed);\r\n}\r\n\r\nvoid motor_back_left_run(int16_t speed)\r\n{\r\n  motor_2.run(-speed);\r\n}\r\n\r\nvoid motor_back_right_run(int16_t speed)\r\n{\r\n  motor_9.run(speed);\r\n}\r\n\r\nvoid move_control(int16_t vx, int16_t vy, int16_t vw)\r\n{\r\n  int16_t foward_left_speed;\r\n  int16_t foward_right_speed;\r\n  int16_t back_left_speed;\r\n  int16_t back_right_speed;\r\n\r\n  foward_left_speed = vy + vx + vw;\r\n  foward_right_speed = vy - vx - vw;\r\n  back_left_speed = vy - vx + vw;\r\n  back_right_speed = vy + vx - vw;\r\n\r\n  motor_foward_left_run(foward_left_speed);    \r\n  motor_foward_right_run(foward_right_speed);   \r\n  motor_back_left_run(back_left_speed);   \r\n  motor_back_right_run(back_right_speed);   \r\n}"}}},handler:this.funcs.BLOCK_1616747767054},{opcode:"BLOCK_1616748288206",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{vx:{type:"number",defaultValue:0},vy:{type:"number",defaultValue:0},vw:{type:"number",defaultValue:0}},branchCount:0,platform:["mblockpc","mblockweb"],codes:{arduinoc:{code:this.funcs.block1616748288206CodesCode,sections:{lib:this.funcs.block1616748288206CodesLib,declare:"void motor_foward_left_run(int16_t speed)\r\n{\r\n   motor_10.run(-speed);\r\n}\r\n\r\nvoid motor_foward_right_run(int16_t speed)\r\n{\r\n  motor_1.run(speed);\r\n}\r\n\r\nvoid motor_back_left_run(int16_t speed)\r\n{\r\n  motor_2.run(-speed);\r\n}\r\n\r\nvoid motor_back_right_run(int16_t speed)\r\n{\r\n  motor_9.run(speed);\r\n}\r\n\r\nvoid move_control(int16_t vx, int16_t vy, int16_t vw)\r\n{\r\n  int16_t foward_left_speed;\r\n  int16_t foward_right_speed;\r\n  int16_t back_left_speed;\r\n  int16_t back_right_speed;\r\n\r\n  foward_left_speed = vy + vx + vw;\r\n  foward_right_speed = vy - vx - vw;\r\n  back_left_speed = vy - vx + vw;\r\n  back_right_speed = vy + vx - vw;\r\n\r\n  motor_foward_left_run(foward_left_speed);    \r\n  motor_foward_right_run(foward_right_speed);   \r\n  motor_back_left_run(back_left_speed);   \r\n  motor_back_right_run(back_right_speed);   \r\n}"}}},handler:this.funcs.BLOCK_1616748288206}],menus:{BLOCK_1616555750567_PORT:[{text:"BLOCK_1616555750567_PORT_0",value:"1"},{text:"BLOCK_1616555750567_PORT_1",value:"9"},{text:"BLOCK_1616555750567_PORT_2",value:"2"},{text:"BLOCK_1616555750567_PORT_3",value:"10"},{text:"BLOCK_1616555750567_PORT_4",value:"3"},{text:"BLOCK_1616555750567_PORT_5",value:"11"},{text:"BLOCK_1616555750567_PORT_6",value:"4"},{text:"BLOCK_1616555750567_PORT_7",value:"12"}],BLOCK_1616747767054_MOVE_DIRECTION:[{text:"BLOCK_1616747767054_MOVE_DIRECTION_0",value:"0"},{text:"BLOCK_1616747767054_MOVE_DIRECTION_1",value:"1"},{text:"BLOCK_1616747767054_MOVE_DIRECTION_2",value:"2"},{text:"BLOCK_1616747767054_MOVE_DIRECTION_3",value:"3"}]}},{name:"sensing",colors:["#4CBFE6","#31B5E2","#1EA8D7"],menuIconURI:"",blockIcon:null,blocks:[{opcode:"BLOCK_1616555666950",blockType:"boolean",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"60",menu:"BLOCK_1616555666950_PORT"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"barrier_/*{PORT}*/.isBarried()",sections:{lib:this.funcs.block1616555666950CodesLib}}},handler:this.funcs.BLOCK_1616555666950},{opcode:"BLOCK_1616555667136",blockType:"boolean",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{PORT:{type:"fieldMenu",defaultValue:"63",menu:"BLOCK_1616555667136_PORT"},COLOR:{type:"fieldMenu",defaultValue:"0",menu:"BLOCK_1616555667136_COLOR"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"(linefollower_/*{PORT}*/.readSensor() == /*{COLOR}*/)",sections:{lib:this.funcs.block1616555667136CodesLib}}},handler:this.funcs.BLOCK_1616555667136},{opcode:"BLOCK_1616555667069",blockType:"boolean",checkboxInFlyout:!1,hidden:!1,gap:36,arguments:{PORT:{type:"fieldMenu",defaultValue:"65",menu:"BLOCK_1616555667069_PORT"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"collision_/*{PORT}*/.isCollision()",sections:{lib:this.funcs.block1616555667069CodesLib}}},handler:this.funcs.BLOCK_1616555667069},{opcode:"detect_timer",blockType:"number",checkboxInFlyout:!0,hidden:!1,gap:12,arguments:{},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"getLastTime()",sections:{lib:this.funcs.detectTimerCodesLib,declare:this.funcs.detectTimerCodesDeclare}}},handler:this.funcs.detect_timer},{opcode:"reset_timer",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"lastTime = millis()/1000.0;",sections:{lib:this.funcs.resetTimerCodesLib}}},handler:this.funcs.reset_timer}],menus:{BLOCK_1616555666950_PORT:[{text:"BLOCK_1616555666950_PORT_0",value:"60"},{text:"BLOCK_1616555666950_PORT_1",value:"61"},{text:"BLOCK_1616555666950_PORT_2",value:"62"}],BLOCK_1616555667136_PORT:[{text:"BLOCK_1616555667136_PORT_0",value:"63"},{text:"BLOCK_1616555667136_PORT_1",value:"64"}],BLOCK_1616555667136_COLOR:[{text:"BLOCK_1616555667136_COLOR_0",value:"0"},{text:"BLOCK_1616555667136_COLOR_1",value:"1"}],BLOCK_1616555667069_PORT:[{text:"BLOCK_1616555667069_PORT_0",value:"65"},{text:"BLOCK_1616555667069_PORT_1",value:"66"}]}},{name:"events",colors:["#FFBF00","#E6AC00","#CC9900"],menuIconURI:"",blockIcon:null,blocks:[{opcode:"event_whenflagclicked",blockType:"hat",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"]},{opcode:"event_whenkeypressed",blockType:"hat",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"]},{opcode:"megapi_main",blockType:"hat",checkboxInFlyout:!1,hidden:!1,gap:36,arguments:{},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"/*{$BRANCH}*/",sections:{include:["<Arduino.h>","<Wire.h>","<SoftwareSerial.h>","\"src/MeSingleLineFollower.h\"","\"src/MeCollisionSensor.h\"","\"src/MeBarrierSensor.h\"","\"src/MeNewRGBLed.h\"","<MeMegaPi.h>"],lib:this.funcs.megapiMainCodesLib,setup:this.funcs.megapiMainCodesSetup}}},handler:this.funcs.megapi_main},{opcode:"event_whenbroadcastreceived",blockType:"hat",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{BROADCAST_OPTION:{type:"inputVariable",defaultValue:""}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"]},{opcode:"event_broadcast",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{BROADCAST_INPUT:{type:"inputVariable",defaultValue:""}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"]},{opcode:"event_broadcastandwait",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{BROADCAST_INPUT:{type:"inputVariable",defaultValue:""}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"]}],menus:{}},{name:"control",colors:["#FFAB19","#FCA000","#E08E00"],menuIconURI:"",blockIcon:null,blocks:[{opcode:"control_stop",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{TYPE:{type:"fieldMenu",defaultValue:"all",menu:"CONTROL_STOP_TYPE"}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"]},{opcode:"control_forever",blockType:"conditional",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{},branchCount:1,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{sections:{loop:"/*{$BRANCH1}*/"}}}},{opcode:"control_repeat_until",blockType:"conditional",checkboxInFlyout:!1,hidden:!1,gap:36,arguments:{CONDITION:{type:"boolean",defaultValue:!1}},branchCount:1,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"while(!(/*{{this.CONDITION ? this.CONDITION : 0}}*/)) \r\n{\r\n  _loop();\r\n  /*{$BRANCH1}*/\r\n}"}}},{opcode:"control_wait_until",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:36,arguments:{CONDITION:{type:"boolean",defaultValue:!1}},branchCount:0,platform:["mblockpc","mblockweb","mblockapp"],codes:{arduinoc:{code:"while(!(/*{{this.CONDITION ? this.CONDITION : 0}}*/))\r\n{\r\n  _loop();\r\n}"}}}],menus:{CONTROL_STOP_TYPE:[{text:"CONTROL_STOP_TYPE_0",value:"all"},{text:"CONTROL_STOP_TYPE_1",value:"this script"},{text:"CONTROL_STOP_TYPE_2",value:"other scripts in sprite"}]}},{name:"operators",colors:["#59C059","#46B746","#3EA33E"],menuIconURI:"",blockIcon:null,blocks:[],menus:{}},{name:"data",colors:["#FF8C1A","#FD7E00","#E17000"],menuIconURI:"",blockIcon:null,blocks:[{opcode:"data_setvariableto",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{VARIABLE:{type:"fieldVariable",defaultValue:""},VALUE:{type:"number",defaultValue:0}},branchCount:0},{opcode:"data_variable",blockType:"number",checkboxInFlyout:!0,hidden:!1,gap:12,arguments:{VARIABLE:{type:"fieldVariable",defaultValue:""}},branchCount:0},{opcode:"data_changevariableby",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{VARIABLE:{type:"fieldVariable",defaultValue:""},VALUE:{type:"number",defaultValue:1}},branchCount:0}],menus:{}},{name:"myBlocks",colors:["#FF6680","#FF4262","#FF1F45"],menuIconURI:"",blockIcon:null,blocks:[{opcode:"procedures_definition",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:36,arguments:{},branchCount:0,platform:[],codes:{arduinoc:{sections:{declare:this.funcs.proceduresDefinitionCodesDeclare}}}}],menus:{}}],generators:extGenerators,translationMap:extTranslationMap,snippets:codeSnippets,excludeBlocks:["event_whengreaterthan","event_whenthisspriteclicked","event_whenbackdropswitchesto","control_start_as_clone","control_create_clone_of","control_delete_this_clone"],generatorStartBlocks:["megapi_main"],feature:[],mustLoginBlocks:[],disabledOffline:["event_whenflagclicked","event_whenkeypressed","event_whenbroadcastreceived","event_broadcast","event_broadcastandwait","control_stop"],disabledOnline:["megapi_robot.megapi_main"]}}},{key:"getHandler",value:function getHandler(){return"object"===_typeof(ExtHandler)?ExtHandler:"function"==typeof ExtHandler?new ExtHandler:void 0}}]),ExtMegapiRobot}();_exports.default=ExtMegapiRobot});